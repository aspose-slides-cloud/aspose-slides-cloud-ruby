=begin
Copyright (c) 2019 Aspose Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=end

require 'spec_helper'
#require 'json'

# Unit tests for AsposeSlidesCloud::SlidesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SlidesApi' do

  # unit tests for copy_file
  # Copy file
  # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
  # @param dest_path Destination file path
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to copy
  # @return [nil]
  describe 'copy_file test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'CopyFile', requestParam.src_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'srcPath', requestParam.src_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcPath', requestParam.src_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_path' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'CopyFile', requestParam.dest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'destPath', requestParam.dest_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destPath', requestParam.dest_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid src_storage_name' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'CopyFile', requestParam.src_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'srcStorageName', requestParam.src_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcStorageName', requestParam.src_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_storage_name' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'CopyFile', requestParam.dest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'destStorageName', requestParam.dest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destStorageName', requestParam.dest_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid version_id' do
      requestParam = AsposeSlidesCloud::CopyFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'CopyFile', requestParam.version_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'versionId', requestParam.version_id)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'versionId', requestParam.version_id)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for copy_folder
  # Copy folder
  # @param src_path Source folder path e.g. &#39;/src&#39;
  # @param dest_path Destination folder path e.g. &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'copy_folder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::CopyFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.copy_folder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      requestParam = AsposeSlidesCloud::CopyFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'CopyFolder', requestParam.src_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'srcPath', requestParam.src_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcPath', requestParam.src_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_path' do
      requestParam = AsposeSlidesCloud::CopyFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'CopyFolder', requestParam.dest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'destPath', requestParam.dest_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destPath', requestParam.dest_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid src_storage_name' do
      requestParam = AsposeSlidesCloud::CopyFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'CopyFolder', requestParam.src_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'srcStorageName', requestParam.src_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcStorageName', requestParam.src_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_storage_name' do
      requestParam = AsposeSlidesCloud::CopyFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'CopyFolder', requestParam.dest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'destStorageName', requestParam.dest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.copy_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destStorageName', requestParam.dest_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for create_folder
  # Create the folder
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
  # @option opts [String] :storage_name Storage name
  # @return [nil]
  describe 'create_folder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::CreateFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.create_folder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::CreateFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'CreateFolder', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.create_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateFolder', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::CreateFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'CreateFolder', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.create_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateFolder', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_file
  # Delete file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path File path e.g. &#39;/folder/file.ext&#39;
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to delete
  # @return [nil]
  describe 'delete_file test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_file_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteFile', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::DeleteFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DeleteFile', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid version_id' do
      requestParam = AsposeSlidesCloud::DeleteFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'DeleteFile', requestParam.version_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'versionId', requestParam.version_id)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'versionId', requestParam.version_id)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_folder
  # Delete folder
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Folder path e.g. &#39;/folder&#39;
  # @option opts [String] :storage_name Storage name
  # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files
  # @return [nil]
  describe 'delete_folder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      requestParam.recursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_folder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      requestParam.recursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteFolder', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::DeleteFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      requestParam.recursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DeleteFolder', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid recursive' do
      requestParam = AsposeSlidesCloud::DeleteFolderRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      requestParam.recursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      requestParam.recursive = AsposeSlidesCloud::SpecUtils.invalidize_param_value('recursive', 'DeleteFolder', requestParam.recursive, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'recursive', requestParam.recursive)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'recursive')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'recursive', requestParam.recursive)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide
  # Remove notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'delete_notes_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_paragraph
  # Remove a paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_notes_slide_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlideParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlideParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteNotesSlideParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlideParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlideParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlideParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlideParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_paragraphs
  # Remove a range of paragraphs.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :paragraphs The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_notes_slide_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlideParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlideParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraphs' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphs', 'DeleteNotesSlideParagraphs', requestParam.paragraphs, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'paragraphs', requestParam.paragraphs)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'paragraphs')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'paragraphs', requestParam.paragraphs)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlideParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlideParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlideParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_portion
  # Remove a portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_notes_slide_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlidePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlidePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteNotesSlidePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteNotesSlidePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeleteNotesSlidePortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlidePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlidePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteNotesSlidePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlidePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_portions
  # Remove a range of portions.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :portions The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_notes_slide_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlidePortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlidePortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteNotesSlidePortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteNotesSlidePortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portions' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portions', 'DeleteNotesSlidePortions', requestParam.portions, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'portions', requestParam.portions)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'portions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'portions', requestParam.portions)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlidePortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlidePortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlidePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlidePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteNotesSlidePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteNotesSlidePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlidePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlidePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlidePortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlidePortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlidePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlidePortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_shape
  # Remove a shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_notes_slide_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlideShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlideShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteNotesSlideShape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlideShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlideShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlideShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_notes_slide_shapes
  # Remove a range of shapes.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :shapes The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_notes_slide_shapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlideShapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlideShapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shapes' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'DeleteNotesSlideShapes', requestParam.shapes, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'shapes', requestParam.shapes)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'shapes', requestParam.shapes)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlideShapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlideShapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlideShapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlideShapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlideShapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_paragraph
  # Remove a paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_paragraphs
  # Remove a range of paragraphs.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :paragraphs The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraphs' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphs', 'DeleteParagraphs', requestParam.paragraphs, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'paragraphs', requestParam.paragraphs)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'paragraphs')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'paragraphs', requestParam.paragraphs)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_portion
  # Remove a portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeletePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeletePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeletePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeletePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeletePortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeletePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeletePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeletePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeletePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_portions
  # Remove a range of portions.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :portions The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeletePortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeletePortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeletePortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeletePortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portions' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portions', 'DeletePortions', requestParam.portions, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'portions', requestParam.portions)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'portions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'portions', requestParam.portions)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeletePortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeletePortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeletePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeletePortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation
  # Remove animation from a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimation', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimation', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimation', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimation', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimation', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimation', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimation', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation_effect
  # Remove an effect from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimationEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimationEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteSlideAnimationEffect', requestParam.effect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'effectIndex', requestParam.effect_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'effectIndex', requestParam.effect_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimationEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimationEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimationEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation_interactive_sequence
  # Remove an interactive sequence from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The index of an interactive sequence to be deleted.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation_interactive_sequence test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimationInteractiveSequence', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid sequence_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', requestParam.sequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'sequenceIndex', requestParam.sequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'sequenceIndex', requestParam.sequence_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimationInteractiveSequence', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimationInteractiveSequence', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequence', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequence', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation_interactive_sequence_effect
  # Remove an effect from slide animation interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index Interactive sequence index.
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid sequence_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.sequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.effect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'effectIndex', requestParam.effect_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'effectIndex', requestParam.effect_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimationInteractiveSequenceEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation_interactive_sequences
  # Clear all interactive sequences from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation_interactive_sequences test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimationInteractiveSequences', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequences', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequences', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimationInteractiveSequences', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequences', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequences', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationInteractiveSequencesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationInteractiveSequences', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimationInteractiveSequences', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationInteractiveSequences', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_interactive_sequences_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationInteractiveSequences', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationInteractiveSequences', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_animation_main_sequence
  # Clear main sequence in slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_slide_animation_main_sequence test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideAnimationMainSequence', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationMainSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationMainSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideAnimationMainSequence', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationMainSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideAnimationMainSequence', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationMainSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideAnimationMainSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideAnimationMainSequence', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideAnimationMainSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideAnimationMainSequence', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideAnimationMainSequence', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_animation_main_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideAnimationMainSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideAnimationMainSequence', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_by_index
  # Delete a presentation slide by index.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'delete_slide_by_index test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideByIndex', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideByIndex', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideByIndex', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideByIndex', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideByIndex', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideByIndex', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideByIndex', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideByIndex', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideByIndexRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideByIndex', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideByIndex', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideByIndex', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideByIndex', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideByIndex', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideByIndex', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_by_index_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideByIndex', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideByIndex', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_shape
  # Remove a shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_slide_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSlideShape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_shapes
  # Remove a range of shapes.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :shapes The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_slide_shapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideShapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideShapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shapes' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'DeleteSlideShapes', requestParam.shapes, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'shapes', requestParam.shapes)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'shapes', requestParam.shapes)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideShapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideShapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideShapes', 'Integer')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideShapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideShapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideShapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_subshape
  # Remove a shape (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_slide_subshape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideSubshape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideSubshape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSlideSubshape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSlideSubshape', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideSubshape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideSubshape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideSubshape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slide_subshapes
  # Remove a range of shapes (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :shapes The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'delete_slide_subshapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideSubshapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideSubshapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSlideSubshapes', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shapes' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'DeleteSlideSubshapes', requestParam.shapes, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'shapes', requestParam.shapes)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'shapes', requestParam.shapes)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideSubshapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideSubshapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSlideSubshapes', 'String')
      requestParam.shapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideSubshapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideSubshapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideSubshapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideSubshapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slides_clean_slides_list
  # Delete presentation slides.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :slides The indices of the slides to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'delete_slides_clean_slides_list test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlidesCleanSlidesList', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesCleanSlidesList', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slides' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'DeleteSlidesCleanSlidesList', requestParam.slides, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', 'slides', requestParam.slides)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesCleanSlidesList', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', 'slides', requestParam.slides)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlidesCleanSlidesList', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesCleanSlidesList', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlidesCleanSlidesList', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesCleanSlidesList', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlidesCleanSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.slides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesCleanSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlidesCleanSlidesList', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesCleanSlidesList', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_clean_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesCleanSlidesList', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesCleanSlidesList', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slides_document_properties
  # Clean document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'delete_slides_document_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slides_document_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlidesDocumentProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlidesDocumentProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlidesDocumentProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlidesDocumentProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slides_document_property
  # Delete document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'delete_slides_document_property test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlidesDocumentProperty', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid property_name' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'DeleteSlidesDocumentProperty', requestParam.property_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', 'propertyName', requestParam.property_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', 'propertyName', requestParam.property_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlidesDocumentProperty', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlidesDocumentProperty', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlidesDocumentProperty', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesDocumentProperty', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesDocumentProperty', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_slides_slide_background
  # Remove background from a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'delete_slides_slide_background test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlidesSlideBackground', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesSlideBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlidesSlideBackground', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesSlideBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlidesSlideBackground', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesSlideBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlidesSlideBackground', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesSlideBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlidesSlideBackground', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlidesSlideBackground', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlidesSlideBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlidesSlideBackground', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_subshape_paragraph
  # Remove a paragraph (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_subshape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSubshapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSubshapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSubshapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSubshapeParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSubshapeParagraph', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSubshapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSubshapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSubshapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_subshape_paragraphs
  # Remove a range of paragraphs (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :paragraphs The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_subshape_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSubshapeParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSubshapeParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSubshapeParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSubshapeParagraphs', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraphs' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphs', 'DeleteSubshapeParagraphs', requestParam.paragraphs, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'paragraphs', requestParam.paragraphs)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'paragraphs')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'paragraphs', requestParam.paragraphs)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSubshapeParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSubshapeParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapeParagraphs', 'String')
      requestParam.paragraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSubshapeParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapeParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapeParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapeParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_subshape_portion
  # Remove a portion (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_subshape_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSubshapePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSubshapePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSubshapePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSubshapePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeleteSubshapePortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSubshapePortion', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSubshapePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSubshapePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSubshapePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for delete_subshape_portions
  # Remove a range of portions (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :portions The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_subshape_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSubshapePortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSubshapePortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSubshapePortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSubshapePortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteSubshapePortions', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portions' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portions', 'DeleteSubshapePortions', requestParam.portions, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'portions', requestParam.portions)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'portions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'portions', requestParam.portions)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSubshapePortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSubshapePortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::DeleteSubshapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSubshapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSubshapePortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteSubshapePortions', 'String')
      requestParam.portions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSubshapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSubshapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSubshapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSubshapePortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSubshapePortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.delete_subshape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSubshapePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSubshapePortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for download_file
  # Download file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path File path e.g. &#39;/folder/file.ext&#39;
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to download
  # @return [File]
  describe 'download_file test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::DownloadFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.download_file_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::DownloadFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DownloadFile', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.download_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::DownloadFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DownloadFile', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.download_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid version_id' do
      requestParam = AsposeSlidesCloud::DownloadFileRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'DownloadFile', requestParam.version_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'versionId', requestParam.version_id)
      begin
        AsposeSlidesCloud::SpecUtils.api.download_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'versionId', requestParam.version_id)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_disc_usage
  # Get disc usage
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [DiscUsage]
  describe 'get_disc_usage test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetDiscUsageRequest.new
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetDiscUsage', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDiscUsage', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_disc_usage_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDiscUsage', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::GetDiscUsageRequest.new
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetDiscUsage', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetDiscUsage', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDiscUsage', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_disc_usage_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDiscUsage', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDiscUsage', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_file_versions
  # Get file versions
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path File path e.g. &#39;/file.ext&#39;
  # @option opts [String] :storage_name Storage name
  # @return [FileVersions]
  describe 'get_file_versions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetFileVersionsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_file_versions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetFileVersionsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetFileVersions', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_file_versions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFileVersions', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::GetFileVersionsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetFileVersions', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_file_versions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFileVersions', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_files_list
  # Get all files and folders within a folder
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Folder path e.g. &#39;/folder&#39;
  # @option opts [String] :storage_name Storage name
  # @return [FilesList]
  describe 'get_files_list test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetFilesListRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_files_list_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetFilesListRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetFilesList', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_files_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFilesList', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::GetFilesListRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetFilesList', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_files_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFilesList', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_layout_slide
  # Read presentation layoutSlide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'get_layout_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetLayoutSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetLayoutSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetLayoutSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetLayoutSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetLayoutSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_layout_slides_list
  # Read presentation layoutSlides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlides]
  describe 'get_layout_slides_list test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetLayoutSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlidesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlidesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_layout_slides_list_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlidesList', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetLayoutSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlidesList', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetLayoutSlidesList', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlidesList', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlidesList', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlidesList', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetLayoutSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetLayoutSlidesList', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlidesList', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlidesList', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlidesList', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetLayoutSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetLayoutSlidesList', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlidesList', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlidesList', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlidesList', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetLayoutSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetLayoutSlidesList', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlidesList', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_layout_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlidesList', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlidesList', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_master_slide
  # Read presentation masterSlide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlide]
  describe 'get_master_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetMasterSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetMasterSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetMasterSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetMasterSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetMasterSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetMasterSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_master_slides_list
  # Read presentation masterSlides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlides]
  describe 'get_master_slides_list test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetMasterSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlidesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlidesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_master_slides_list_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlidesList', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetMasterSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlidesList', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetMasterSlidesList', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlidesList', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlidesList', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlidesList', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetMasterSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetMasterSlidesList', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlidesList', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlidesList', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlidesList', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetMasterSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetMasterSlidesList', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlidesList', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlidesList', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlidesList', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetMasterSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetMasterSlidesList', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlidesList', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_master_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlidesList', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlidesList', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide
  # Read notes slide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'get_notes_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_exists
  # Get info whether a notes slide exists.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [EntityExists]
  describe 'get_notes_slide_exists test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideExists', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideExists', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideExists', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideExists', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideExists', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideExists', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideExists', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideExists', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideExistsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideExists', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideExists', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideExists', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideExists', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideExists', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideExists', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideExists', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shape
  # Read slide shape info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'get_notes_slide_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetNotesSlideShape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shape_paragraph
  # Read shape paragraph info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'get_notes_slide_shape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shape_paragraphs
  # Read shape paragraphs info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'get_notes_slide_shape_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShapeParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShapeParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShapeParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShapeParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapeParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapeParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapeParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shape_portion
  # Read paragraph portion info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'get_notes_slide_shape_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShapePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShapePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetNotesSlideShapePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetNotesSlideShapePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetNotesSlideShapePortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShapePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShapePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetNotesSlideShapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShapePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shape_portions
  # Read paragraph portions info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'get_notes_slide_shape_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShapePortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShapePortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetNotesSlideShapePortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetNotesSlideShapePortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShapePortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShapePortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapePortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapePortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetNotesSlideShapePortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapePortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapePortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShapePortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapePortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shape_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapePortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_shapes
  # Read slide shapes info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'get_notes_slide_shapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideShapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideShapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideShapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideShapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideShapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideShapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideShapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_notes_slide_with_format
  # Convert notes slide to the specified image format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width Output file width.
  # @option opts [Integer] :height Output file height.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'get_notes_slide_with_format test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideWithFormat', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideWithFormat', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'GetNotesSlideWithFormat', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'GetNotesSlideWithFormat', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'GetNotesSlideWithFormat', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideWithFormat', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideWithFormat', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideWithFormat', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::GetNotesSlideWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'GetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'GetNotesSlideWithFormat', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideWithFormat', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideWithFormat', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideWithFormat', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_paragraph_portion
  # Read paragraph portion info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'get_paragraph_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraphPortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraphPortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraphPortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetParagraphPortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetParagraphPortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraphPortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraphPortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetParagraphPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraphPortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_paragraph_portions
  # Read paragraph portions info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'get_paragraph_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraphPortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraphPortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraphPortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetParagraphPortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraphPortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraphPortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphPortions', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraphPortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphPortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphPortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphPortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_animation
  # Read slide animation effects.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index. If specified, only effects related to that shape are returned.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'get_slide_animation test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideAnimation', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideAnimation', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideAnimation', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideAnimation', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideAnimation', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideAnimation', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideAnimation', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideAnimation', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideAnimation', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideAnimation', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_shape
  # Read slide shape info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'get_slide_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideShape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_shape_paragraph
  # Read shape paragraph info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'get_slide_shape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideShapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideShapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideShapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSlideShapeParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideShapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideShapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideShapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideShapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_shape_paragraphs
  # Read shape paragraphs info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'get_slide_shape_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideShapeParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideShapeParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideShapeParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideShapeParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideShapeParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideShapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideShapeParagraphs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideShapeParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapeParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapeParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapeParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_shapes
  # Read slide shapes info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'get_slide_shapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideShapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideShapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideShapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideShapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideShapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideShapes', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideShapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_shapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_subshape
  # Read slide shape info (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'get_slide_subshape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideSubshape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideSubshape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideSubshape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSlideSubshape', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideSubshape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideSubshape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideSubshape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_subshape_paragraph
  # Read shape paragraph info (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'get_slide_subshape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideSubshapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideSubshapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideSubshapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSlideSubshapeParagraph', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideSubshapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideSubshapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSlideSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideSubshapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_subshape_paragraphs
  # Read shape paragraphs info (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'get_slide_subshape_paragraphs test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideSubshapeParagraphs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideSubshapeParagraphs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSlideSubshapeParagraphs', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideSubshapeParagraphs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideSubshapeParagraphs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapeParagraphsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideSubshapeParagraphs', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapeParagraphs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideSubshapeParagraphs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapeParagraphs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshape_paragraphs_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapeParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapeParagraphs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slide_subshapes
  # Read slide shapes info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path (for smart art and group shapes).
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shapes]
  describe 'get_slide_subshapes test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideSubshapes', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideSubshapes', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSlideSubshapes', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideSubshapes', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideSubshapes', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlideSubshapesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideSubshapes', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideSubshapes', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSlideSubshapes', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideSubshapes', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideSubshapes', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideSubshapes', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideSubshapes', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slide_subshapes_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideSubshapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideSubshapes', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_api_info
  # Get API info.
  # @param [Hash] opts the optional parameters
  # @return [ApiInfo]
  describe 'get_slides_api_info test' do
    it 'should work' do
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesApiInfo', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_api_info_with_http_info
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesApiInfo', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end
  end

  # unit tests for get_slides_document
  # Read presentation info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Documentstorage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'get_slides_document test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocument', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocument', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_document_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocument', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocument', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesDocument', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocument', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocument', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocument', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesDocument', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocument', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocument', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocument', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesDocument', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocument', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocument', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocument', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesDocument', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocument', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocument', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocument', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_document_properties
  # Read presentation document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'get_slides_document_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_document_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesDocumentProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesDocumentProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesDocumentProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesDocumentProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_document_property
  # Read presentation document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperty]
  describe 'get_slides_document_property test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesDocumentProperty', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid property_name' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'GetSlidesDocumentProperty', requestParam.property_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', 'propertyName', requestParam.property_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', 'propertyName', requestParam.property_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesDocumentProperty', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesDocumentProperty', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetSlidesDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesDocumentProperty', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesDocumentProperty', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesDocumentProperty', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_image_with_default_format
  # Get image binary data.
  # @param name Document name.
  # @param index Image index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'get_slides_image_with_default_format test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesImageWithDefaultFormat', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithDefaultFormat', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid index' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'GetSlidesImageWithDefaultFormat', requestParam.index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', 'index', requestParam.index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithDefaultFormat', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', 'index', requestParam.index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesImageWithDefaultFormat', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithDefaultFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesImageWithDefaultFormat', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithDefaultFormat', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithDefaultFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithDefaultFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithDefaultFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesImageWithDefaultFormat', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithDefaultFormat', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_default_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithDefaultFormat', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithDefaultFormat', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_image_with_format
  # Get image in specified format.
  # @param name Document name.
  # @param index Image index.
  # @param format Export format (png, jpg, gif).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'get_slides_image_with_format test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesImageWithFormat', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid index' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'GetSlidesImageWithFormat', requestParam.index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'index', requestParam.index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'index', requestParam.index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'GetSlidesImageWithFormat', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesImageWithFormat', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesImageWithFormat', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesImageWithFormatRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImageWithFormat', 'String')
      requestParam.index = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'GetSlidesImageWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'GetSlidesImageWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImageWithFormat', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImageWithFormat', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesImageWithFormat', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImageWithFormat', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_image_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImageWithFormat', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImageWithFormat', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_images
  # Read presentation images info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Images]
  describe 'get_slides_images test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImages', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImages', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_images_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImages', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImages', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesImages', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImages', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImages', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImages', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesImages', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImages', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImages', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImages', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesImages', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImages', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImages', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImages', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesImages', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesImages', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesImages', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesImages', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_placeholder
  # Read slide placeholder info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param placeholder_index Placeholder index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Placeholder]
  describe 'get_slides_placeholder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesPlaceholder', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesPlaceholder', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid placeholder_index' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('placeholderIndex', 'GetSlidesPlaceholder', requestParam.placeholder_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'placeholderIndex', requestParam.placeholder_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'placeholderIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'placeholderIndex', requestParam.placeholder_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesPlaceholder', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesPlaceholder', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.placeholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetSlidesPlaceholder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesPlaceholder', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholder', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholder', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholder', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_placeholders
  # Read slide placeholders info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Placeholders]
  describe 'get_slides_placeholders test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesPlaceholders', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholders', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesPlaceholders', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholders', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesPlaceholders', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholders', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesPlaceholders', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholders', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesPlaceholdersRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPlaceholders', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesPlaceholders', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPlaceholders', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPlaceholders', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesPlaceholders', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPlaceholders', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_placeholders_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPlaceholders', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPlaceholders', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_presentation_text_items
  # Extract presentation text items.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_empty True to incude empty items.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextItems]
  describe 'get_slides_presentation_text_items test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesPresentationTextItems', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPresentationTextItems', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid with_empty' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withEmpty', 'GetSlidesPresentationTextItems', requestParam.with_empty, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', 'withEmpty', requestParam.with_empty)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPresentationTextItems', 'withEmpty')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', 'withEmpty', requestParam.with_empty)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesPresentationTextItems', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPresentationTextItems', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesPresentationTextItems', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPresentationTextItems', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesPresentationTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesPresentationTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesPresentationTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesPresentationTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesPresentationTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesPresentationTextItems', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesPresentationTextItems', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_presentation_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesPresentationTextItems', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesPresentationTextItems', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slide
  # Read presentation slide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'get_slides_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlide', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slide_background
  # Read slide background info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'get_slides_slide_background test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlideBackground', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesSlideBackground', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlideBackground', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlideBackground', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideBackground', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlideBackground', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideBackground', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideBackground', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slide_comments
  # Read presentation slide comments.
  # @param name Document name.
  # @param slide_index The position of the slide to be reordered.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideComments]
  describe 'get_slides_slide_comments test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlideComments', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideComments', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesSlideComments', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideComments', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlideComments', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideComments', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlideComments', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideComments', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideCommentsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideComments', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideComments', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideComments', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideComments', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlideComments', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideComments', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_comments_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideComments', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideComments', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slide_images
  # Read slide images info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Images]
  describe 'get_slides_slide_images test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlideImages', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideImages', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesSlideImages', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideImages', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlideImages', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideImages', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlideImages', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideImages', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideImagesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideImages', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideImages', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideImages', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideImages', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlideImages', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideImages', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_images_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideImages', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideImages', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slide_text_items
  # Extract slide text items.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_empty True to incude empty items.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextItems]
  describe 'get_slides_slide_text_items test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlideTextItems', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesSlideTextItems', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid with_empty' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withEmpty', 'GetSlidesSlideTextItems', requestParam.with_empty, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'withEmpty', requestParam.with_empty)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'withEmpty')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'withEmpty', requestParam.with_empty)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlideTextItems', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlideTextItems', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlideTextItemsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlideTextItems', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesSlideTextItems', 'Integer')
      requestParam.with_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlidesSlideTextItems', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlideTextItems', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlideTextItems', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlideTextItems', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlideTextItems', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slide_text_items_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlideTextItems', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlideTextItems', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_slides_list
  # Read presentation slides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'get_slides_slides_list test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlidesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlidesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_slides_list_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlidesList', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlidesList', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesSlidesList', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlidesList', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlidesList', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlidesList', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesSlidesList', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlidesList', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlidesList', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlidesList', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesSlidesList', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlidesList', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlidesList', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlidesList', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesSlidesListRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesSlidesList', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesSlidesList', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesSlidesList', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesSlidesList', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesSlidesList', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_slides_list_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesSlidesList', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesSlidesList', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_theme
  # Read slide theme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Theme]
  describe 'get_slides_theme test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesTheme', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesTheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesTheme', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesTheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesTheme', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesTheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesTheme', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesTheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesTheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesTheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesTheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesTheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesTheme', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesTheme', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesTheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesTheme', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_theme_color_scheme
  # Read slide theme color scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ColorScheme]
  describe 'get_slides_theme_color_scheme test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesThemeColorScheme', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeColorScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesThemeColorScheme', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeColorScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesThemeColorScheme', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeColorScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesThemeColorScheme', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeColorScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeColorSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeColorScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeColorScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeColorScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeColorScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesThemeColorScheme', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeColorScheme', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_color_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeColorScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeColorScheme', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_theme_font_scheme
  # Read slide theme font scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FontScheme]
  describe 'get_slides_theme_font_scheme test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesThemeFontScheme', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFontScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesThemeFontScheme', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFontScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesThemeFontScheme', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFontScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesThemeFontScheme', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFontScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFontSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFontScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFontScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFontScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFontScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesThemeFontScheme', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFontScheme', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_font_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFontScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFontScheme', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_theme_format_scheme
  # Read slide theme format scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FormatScheme]
  describe 'get_slides_theme_format_scheme test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesThemeFormatScheme', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFormatScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlidesThemeFormatScheme', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFormatScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesThemeFormatScheme', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFormatScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesThemeFormatScheme', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFormatScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesThemeFormatSchemeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlidesThemeFormatScheme', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesThemeFormatScheme', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesThemeFormatScheme', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesThemeFormatScheme', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_theme_format_scheme_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesThemeFormatScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesThemeFormatScheme', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_slides_view_properties
  # Read presentation document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ViewProperties]
  describe 'get_slides_view_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesViewProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesViewProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_slides_view_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesViewProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesViewProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlidesViewProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesViewProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesViewProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesViewProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlidesViewProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesViewProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesViewProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesViewProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlidesViewProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesViewProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesViewProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesViewProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlidesViewProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlidesViewProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlidesViewProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlidesViewProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_subshape_paragraph_portion
  # Read paragraph portion info (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'get_subshape_paragraph_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSubshapeParagraphPortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSubshapeParagraphPortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSubshapeParagraphPortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetSubshapeParagraphPortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSubshapeParagraphPortion', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSubshapeParagraphPortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSubshapeParagraphPortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSubshapeParagraphPortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSubshapeParagraphPortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for get_subshape_paragraph_portions
  # Read paragraph portions info (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'get_subshape_paragraph_portions test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSubshapeParagraphPortions', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSubshapeParagraphPortions', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSubshapeParagraphPortions', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetSubshapeParagraphPortions', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSubshapeParagraphPortions', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSubshapeParagraphPortions', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::GetSubshapeParagraphPortionsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSubshapeParagraphPortions', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSubshapeParagraphPortions', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetSubshapeParagraphPortions', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSubshapeParagraphPortions', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSubshapeParagraphPortions', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSubshapeParagraphPortions', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSubshapeParagraphPortions', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.get_subshape_paragraph_portions_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSubshapeParagraphPortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSubshapeParagraphPortions', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for move_file
  # Move file
  # @param src_path Source file path e.g. &#39;/src.ext&#39;
  # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to move
  # @return [nil]
  describe 'move_file test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'MoveFile', requestParam.src_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'srcPath', requestParam.src_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcPath', requestParam.src_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_path' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'MoveFile', requestParam.dest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'destPath', requestParam.dest_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destPath', requestParam.dest_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid src_storage_name' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'MoveFile', requestParam.src_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'srcStorageName', requestParam.src_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcStorageName', requestParam.src_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_storage_name' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'MoveFile', requestParam.dest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'destStorageName', requestParam.dest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destStorageName', requestParam.dest_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid version_id' do
      requestParam = AsposeSlidesCloud::MoveFileRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'MoveFile', requestParam.version_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'versionId', requestParam.version_id)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'versionId', requestParam.version_id)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for move_folder
  # Move folder
  # @param src_path Folder path to move e.g. &#39;/folder&#39;
  # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'move_folder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::MoveFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.move_folder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      requestParam = AsposeSlidesCloud::MoveFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'MoveFolder', requestParam.src_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'srcPath', requestParam.src_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcPath', requestParam.src_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_path' do
      requestParam = AsposeSlidesCloud::MoveFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'MoveFolder', requestParam.dest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'destPath', requestParam.dest_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destPath', requestParam.dest_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid src_storage_name' do
      requestParam = AsposeSlidesCloud::MoveFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'MoveFolder', requestParam.src_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'srcStorageName', requestParam.src_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcStorageName', requestParam.src_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_storage_name' do
      requestParam = AsposeSlidesCloud::MoveFolderRequest.new
      requestParam.src_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      requestParam.dest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      requestParam.src_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      requestParam.dest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'MoveFolder', requestParam.dest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'destStorageName', requestParam.dest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.move_folder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destStorageName', requestParam.dest_storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for object_exists
  # Check if file or folder exists
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID
  # @return [ObjectExist]
  describe 'object_exists test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::ObjectExistsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.object_exists_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::ObjectExistsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'ObjectExists', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.object_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::ObjectExistsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'ObjectExists', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.object_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid version_id' do
      requestParam = AsposeSlidesCloud::ObjectExistsRequest.new
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      requestParam.version_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'ObjectExists', requestParam.version_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'versionId', requestParam.version_id)
      begin
        AsposeSlidesCloud::SpecUtils.api.object_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'versionId', requestParam.version_id)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_paragraph
  # Creates new paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new paragraph in the list. Default is at the end of the list.
  # @return [Paragraph]
  describe 'post_add_new_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostAddNewParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewParagraph', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewParagraph', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewParagraph', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewParagraph', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewParagraph', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewParagraph', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_portion
  # Creates new portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new portion in the list. Default is at the end of the list.
  # @return [Portion]
  describe 'post_add_new_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewPortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewPortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostAddNewPortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PostAddNewPortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewPortion', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewPortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewPortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewPortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewPortion', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewPortion', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewPortion', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewPortion', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewPortion', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_shape
  # Create new shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :shape_to_clone Optional index for clone shape instead of adding a new one.
  # @option opts [Integer] :position Position of the new shape in the list. Default is at the end of the list.
  # @return [ShapeBase]
  describe 'post_add_new_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewShape', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_to_clone' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeToClone', 'PostAddNewShape', requestParam.shape_to_clone, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'shapeToClone', requestParam.shape_to_clone)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'shapeToClone')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'shapeToClone', requestParam.shape_to_clone)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewShape', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewShape', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewShape', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewShape', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_subshape
  # Create new shape (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :shape_to_clone Optional index for clone shape instead of adding a new one.
  # @option opts [Integer] :position Position of the new shape in the list. Default is at the end of the list.
  # @return [ShapeBase]
  describe 'post_add_new_subshape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewSubshape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewSubshape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PostAddNewSubshape', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewSubshape', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewSubshape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewSubshape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewSubshape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_to_clone' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeToClone', 'PostAddNewSubshape', requestParam.shape_to_clone, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'shapeToClone', requestParam.shape_to_clone)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'shapeToClone')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'shapeToClone', requestParam.shape_to_clone)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshape', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewSubshape', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshape', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshape', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshape', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_subshape_paragraph
  # Creates new paragraph (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new paragraph in the list. Default is at the end of the list.
  # @return [Paragraph]
  describe 'post_add_new_subshape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewSubshapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewSubshapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PostAddNewSubshapeParagraph', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewSubshapeParagraph', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewSubshapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewSubshapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewSubshapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapeParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapeParagraph', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewSubshapeParagraph', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapeParagraph', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapeParagraph', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapeParagraph', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_new_subshape_portion
  # Creates new portion (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new portion in the list. Default is at the end of the list.
  # @return [Portion]
  describe 'post_add_new_subshape_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNewSubshapePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNewSubshapePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostAddNewSubshapePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PostAddNewSubshapePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PostAddNewSubshapePortion', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNewSubshapePortion', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNewSubshapePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNewSubshapePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNewSubshapePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostAddNewSubshapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNewSubshapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostAddNewSubshapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNewSubshapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNewSubshapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNewSubshapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNewSubshapePortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostAddNewSubshapePortion', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostAddNewSubshapePortion', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNewSubshapePortion', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_new_subshape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNewSubshapePortion', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNewSubshapePortion', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_add_notes_slide
  # Add new notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [NotesSlide] :dto A NotesSlide object with notes slide data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'post_add_notes_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostAddNotesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostAddNotesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostAddNotesSlide', requestParam.dto, 'NotesSlide')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostAddNotesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostAddNotesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostAddNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostAddNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostAddNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostAddNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostAddNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostAddNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostAddNotesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostAddNotesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_add_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostAddNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostAddNotesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_copy_layout_slide_from_source_presentation
  # Copy layoutSlide from source presentation.
  # @param name Document name.
  # @param clone_from Name of the document to clone layoutSlide from.
  # @param clone_from_position Position of cloned layout slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clone_from_password Password for the document to clone layoutSlide from.
  # @option opts [String] :clone_from_storage Storage of the document to clone layoutSlide from.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'post_copy_layout_slide_from_source_presentation test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.clone_from, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'cloneFrom', requestParam.clone_from)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'cloneFrom')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'cloneFrom', requestParam.clone_from)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_position' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.clone_from_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPosition', requestParam.clone_from_position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPosition', requestParam.clone_from_position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_password' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.clone_from_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPassword', requestParam.clone_from_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromPassword', requestParam.clone_from_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_storage' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.clone_from_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromStorage', requestParam.clone_from_storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'cloneFromStorage', requestParam.clone_from_storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostCopyLayoutSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyLayoutSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostCopyLayoutSlideFromSourcePresentation', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyLayoutSlideFromSourcePresentation', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_layout_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyLayoutSlideFromSourcePresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyLayoutSlideFromSourcePresentation', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_copy_master_slide_from_source_presentation
  # Copy masterSlide from source presentation.
  # @param name Document name.
  # @param clone_from Name of the document to clone masterSlide from.
  # @param clone_from_position Position of cloned master slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clone_from_password Password for the document to clone masterSlide from.
  # @option opts [String] :clone_from_storage Storage of the document to clone masterSlide from.
  # @option opts [BOOLEAN] :apply_to_all True to apply cloned master slide to every existing slide.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlide]
  describe 'post_copy_master_slide_from_source_presentation test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', requestParam.clone_from, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'cloneFrom', requestParam.clone_from)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'cloneFrom')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'cloneFrom', requestParam.clone_from)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_position' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', requestParam.clone_from_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPosition', requestParam.clone_from_position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPosition', requestParam.clone_from_position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_password' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', requestParam.clone_from_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPassword', requestParam.clone_from_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'cloneFromPassword', requestParam.clone_from_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid clone_from_storage' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', requestParam.clone_from_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'cloneFromStorage', requestParam.clone_from_storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'cloneFromStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'cloneFromStorage', requestParam.clone_from_storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid apply_to_all' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.invalidize_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', requestParam.apply_to_all, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'applyToAll', requestParam.apply_to_all)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'applyToAll')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'applyToAll', requestParam.apply_to_all)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostCopyMasterSlideFromSourcePresentationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'PostCopyMasterSlideFromSourcePresentation', 'Integer')
      requestParam.clone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.clone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.apply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'PostCopyMasterSlideFromSourcePresentation', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostCopyMasterSlideFromSourcePresentation', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostCopyMasterSlideFromSourcePresentation', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_copy_master_slide_from_source_presentation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostCopyMasterSlideFromSourcePresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostCopyMasterSlideFromSourcePresentation', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_get_notes_slide
  # Read notes slide info.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :document Document data.
  # @option opts [String] :password Document password.
  # @return [NotesSlide]
  describe 'post_get_notes_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlide', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlide', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlide', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlide', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostGetNotesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid document' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlide', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlide', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlide', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'PostGetNotesSlide', requestParam.document, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlide', 'document', requestParam.document)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlide', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlide', 'document', requestParam.document)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlide', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlide', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostGetNotesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_get_notes_slide_exists
  # Get info whether a notes slide exists.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :document Document data.
  # @option opts [String] :password Document password.
  # @return [EntityExists]
  describe 'post_get_notes_slide_exists test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideExistsRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideExists', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideExists', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_exists_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideExists', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideExistsRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideExists', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideExists', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideExists', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostGetNotesSlideExists', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideExists', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideExists', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideExists', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid document' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideExistsRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideExists', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideExists', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideExists', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'PostGetNotesSlideExists', requestParam.document, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideExists', 'document', requestParam.document)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideExists', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideExists', 'document', requestParam.document)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideExistsRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideExists', 'Integer')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideExists', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideExists', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostGetNotesSlideExists', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideExists', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideExists', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideExists', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_get_notes_slide_with_format
  # Convert notes slide to the specified image format.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :document Document data.
  # @option opts [Integer] :width Output file width.
  # @option opts [Integer] :height Output file height.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'post_get_notes_slide_with_format test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostGetNotesSlideWithFormat', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostGetNotesSlideWithFormat', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid document' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'PostGetNotesSlideWithFormat', requestParam.document, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'document', requestParam.document)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'document', requestParam.document)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'PostGetNotesSlideWithFormat', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'PostGetNotesSlideWithFormat', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostGetNotesSlideWithFormat', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostGetNotesSlideWithFormatRequest.new
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostGetNotesSlideWithFormat', 'File')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostGetNotesSlideWithFormat', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostGetNotesSlideWithFormat', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostGetNotesSlideWithFormat', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_get_notes_slide_with_format_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostGetNotesSlideWithFormat', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostGetNotesSlideWithFormat', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_notes_slide_add_new_paragraph
  # Creates new paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new paragraph in the list. Default is at the end of the list.
  # @return [Paragraph]
  describe 'post_notes_slide_add_new_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostNotesSlideAddNewParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostNotesSlideAddNewParagraph', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostNotesSlideAddNewParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostNotesSlideAddNewParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostNotesSlideAddNewParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewParagraph', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewParagraph', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostNotesSlideAddNewParagraph', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewParagraph', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewParagraph', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewParagraph', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_notes_slide_add_new_portion
  # Creates new portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Position of the new portion in the list. Default is at the end of the list.
  # @return [Portion]
  describe 'post_notes_slide_add_new_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostNotesSlideAddNewPortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostNotesSlideAddNewPortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostNotesSlideAddNewPortion', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostNotesSlideAddNewPortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostNotesSlideAddNewPortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostNotesSlideAddNewPortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewPortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewPortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewPortion', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewPortion', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostNotesSlideAddNewPortion', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewPortion', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewPortion', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewPortion', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_notes_slide_add_new_shape
  # Create new shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :shape_to_clone Optional index for clone shape instead of adding a new one.
  # @option opts [Integer] :position Position of the new shape in the list. Default is at the end of the list.
  # @return [ShapeBase]
  describe 'post_notes_slide_add_new_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostNotesSlideAddNewShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostNotesSlideAddNewShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PostNotesSlideAddNewShape', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostNotesSlideAddNewShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostNotesSlideAddNewShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostNotesSlideAddNewShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_to_clone' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeToClone', 'PostNotesSlideAddNewShape', requestParam.shape_to_clone, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'shapeToClone', requestParam.shape_to_clone)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'shapeToClone')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'shapeToClone', requestParam.shape_to_clone)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostNotesSlideAddNewShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideAddNewShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PostNotesSlideAddNewShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideAddNewShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideAddNewShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideAddNewShape', 'String')
      requestParam.shape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostNotesSlideAddNewShape', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostNotesSlideAddNewShape', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideAddNewShape', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_add_new_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideAddNewShape', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideAddNewShape', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_notes_slide_shape_save_as
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [File]
  describe 'post_notes_slide_shape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostNotesSlideShapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostNotesSlideShapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostNotesSlideShapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostNotesSlideShapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostNotesSlideShapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostNotesSlideShapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PostNotesSlideShapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PostNotesSlideShapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PostNotesSlideShapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostNotesSlideShapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostNotesSlideShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostNotesSlideShapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostNotesSlideShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_presentation_merge
  # Merge the presentation with other presentations specified in the request parameter.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [PresentationsMergeRequest] :request PresentationsMergeRequest with a list of presentations to merge.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'post_presentation_merge test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostPresentationMerge', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostPresentationMerge', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid request' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'PostPresentationMerge', requestParam.request, 'PresentationsMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', 'request', requestParam.request)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostPresentationMerge', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', 'request', requestParam.request)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostPresentationMerge', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostPresentationMerge', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostPresentationMerge', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostPresentationMerge', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PostPresentationMerge', 'PresentationsMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostPresentationMerge', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostPresentationMerge', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostPresentationMerge', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostPresentationMerge', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_shape_save_as
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [File]
  describe 'post_shape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostShapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostShapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostShapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostShapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostShapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostShapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostShapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostShapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PostShapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PostShapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PostShapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostShapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostShapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slide_animation_effect
  # Add an effect to slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [Effect] :effect Animation effect DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'post_slide_animation_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlideAnimationEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlideAnimationEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'PostSlideAnimationEffect', requestParam.effect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'effect', requestParam.effect)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'effect', requestParam.effect)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlideAnimationEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlideAnimationEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlideAnimationEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slide_animation_interactive_sequence
  # Set slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [InteractiveSequence] :sequence Animation sequence DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'post_slide_animation_interactive_sequence test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlideAnimationInteractiveSequence', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid sequence' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequence', 'PostSlideAnimationInteractiveSequence', requestParam.sequence, 'InteractiveSequence')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'sequence', requestParam.sequence)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'sequence')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'sequence', requestParam.sequence)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlideAnimationInteractiveSequence', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlideAnimationInteractiveSequence', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequence', 'Integer')
      requestParam.sequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'PostSlideAnimationInteractiveSequence', 'InteractiveSequence')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequence', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlideAnimationInteractiveSequence', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequence', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequence', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slide_animation_interactive_sequence_effect
  # Add an animation effect to a slide interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The position of the interactive sequence.
  # @param [Hash] opts the optional parameters
  # @option opts [Effect] :effect Animation effect DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'post_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid sequence_index' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.sequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.effect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'effect', requestParam.effect)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'effect', requestParam.effect)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PostSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PostSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlideAnimationInteractiveSequenceEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slide_save_as
  # Save a slide to a specified format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [Integer] :width Output file width; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height Output file height; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'post_slide_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlideSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlideSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostSlideSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostSlideSaveAs', requestParam.options, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'PostSlideSaveAs', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'PostSlideSaveAs', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlideSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlideSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlideSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostSlideSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlideSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlideSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlideSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_add
  # Create a slide.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position The target position at which to create the slide. Add to the end by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :layout_alias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index
  # @return [Slides]
  describe 'post_slides_add test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesAdd', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostSlidesAdd', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesAdd', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesAdd', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesAdd', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid layout_alias' do
      requestParam = AsposeSlidesCloud::PostSlidesAddRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesAdd', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesAdd', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesAdd', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesAdd', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'PostSlidesAdd', 'String')
      requestParam.layout_alias = AsposeSlidesCloud::SpecUtils.invalidize_param_value('layoutAlias', 'PostSlidesAdd', requestParam.layout_alias, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesAdd', 'layoutAlias', requestParam.layout_alias)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_add_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesAdd', 'layoutAlias')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesAdd', 'layoutAlias', requestParam.layout_alias)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_convert
  # Convert presentation from request content to format specified.
  # @param format Export format.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :document Document data.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [File]
  describe 'post_slides_convert test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesConvert', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesConvert', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_convert_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesConvert', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesConvert', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostSlidesConvert', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesConvert', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesConvert', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesConvert', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid document' do
      requestParam = AsposeSlidesCloud::PostSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'PostSlidesConvert', requestParam.document, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesConvert', 'document', requestParam.document)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesConvert', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesConvert', 'document', requestParam.document)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesConvert', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesConvert', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesConvert', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesConvert', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesConvert', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PostSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostSlidesConvert', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesConvert', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesConvert', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesConvert', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_copy
  # Copy a slide from the current or another presentation.
  # @param name Document name.
  # @param slide_to_copy The index of the slide to be copied from the source presentation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position The target position at which to copy the slide. Copy to the end by default.
  # @option opts [String] :source Name of the document to copy a slide from.
  # @option opts [String] :source_password Password for the document to copy a slide from.
  # @option opts [String] :source_storage Template storage name.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'post_slides_copy test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesCopy', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_to_copy' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideToCopy', 'PostSlidesCopy', requestParam.slide_to_copy, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'slideToCopy', requestParam.slide_to_copy)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'slideToCopy')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'slideToCopy', requestParam.slide_to_copy)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid position' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'PostSlidesCopy', requestParam.position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'position', requestParam.position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'position', requestParam.position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.source = AsposeSlidesCloud::SpecUtils.invalidize_param_value('source', 'PostSlidesCopy', requestParam.source, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'source', requestParam.source)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'source')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'source', requestParam.source)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source_password' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePassword', 'PostSlidesCopy', requestParam.source_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'sourcePassword', requestParam.source_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'sourcePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'sourcePassword', requestParam.source_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source_storage' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceStorage', 'PostSlidesCopy', requestParam.source_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'sourceStorage', requestParam.source_storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'sourceStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'sourceStorage', requestParam.source_storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesCopy', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesCopy', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesCopyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesCopy', 'String')
      requestParam.slide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'PostSlidesCopy', 'Integer')
      requestParam.position = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'PostSlidesCopy', 'Integer')
      requestParam.source = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'PostSlidesCopy', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesCopy', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesCopy', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesCopy', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesCopy', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesCopy', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesCopy', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_copy_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesCopy', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesCopy', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_document
  # Create a presentation.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :data Document input data.
  # @option opts [String] :input_password The password for input document.
  # @option opts [String] :password The document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'post_slides_document test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesDocument', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid data' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.invalidize_param_value('data', 'PostSlidesDocument', requestParam.data, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'data', requestParam.data)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'data')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'data', requestParam.data)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid input_password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('inputPassword', 'PostSlidesDocument', requestParam.input_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'inputPassword', requestParam.input_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'inputPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'inputPassword', requestParam.input_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesDocument', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesDocument', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocument', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocument', 'File')
      requestParam.input_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'PostSlidesDocument', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocument', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocument', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesDocument', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocument', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocument', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocument', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_document_from_html
  # Create presentation document from html.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :html HTML data.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'post_slides_document_from_html test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesDocumentFromHtml', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromHtml', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid html' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.invalidize_param_value('html', 'PostSlidesDocumentFromHtml', requestParam.html, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', 'html', requestParam.html)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromHtml', 'html')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', 'html', requestParam.html)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesDocumentFromHtml', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromHtml', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesDocumentFromHtml', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromHtml', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesDocumentFromHtml', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromHtml', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromHtml', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromHtml', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_document_from_source
  # Create a presentation from an existing source.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :source_path Template file path.
  # @option opts [String] :source_password Template file password.
  # @option opts [String] :source_storage Template storage name.
  # @option opts [String] :password The document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'post_slides_document_from_source test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesDocumentFromSource', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source_path' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePath', 'PostSlidesDocumentFromSource', requestParam.source_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'sourcePath', requestParam.source_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'sourcePath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'sourcePath', requestParam.source_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source_password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePassword', 'PostSlidesDocumentFromSource', requestParam.source_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'sourcePassword', requestParam.source_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'sourcePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'sourcePassword', requestParam.source_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid source_storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceStorage', 'PostSlidesDocumentFromSource', requestParam.source_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'sourceStorage', requestParam.source_storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'sourceStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'sourceStorage', requestParam.source_storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesDocumentFromSource', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesDocumentFromSource', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromSourceRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'PostSlidesDocumentFromSource', 'String')
      requestParam.source_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromSource', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromSource', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesDocumentFromSource', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromSource', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_source_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromSource', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromSource', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_document_from_template
  # Create a presentation.
  # @param name Document name.
  # @param template_path Template file path.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :data Document input data.
  # @option opts [String] :template_password Template file password.
  # @option opts [String] :template_storage Template storage name.
  # @option opts [BOOLEAN] :is_image_data_embedded True if image data is embedded.
  # @option opts [String] :password The document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'post_slides_document_from_template test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesDocumentFromTemplate', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid template_path' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templatePath', 'PostSlidesDocumentFromTemplate', requestParam.template_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'templatePath', requestParam.template_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'templatePath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'templatePath', requestParam.template_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid data' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.invalidize_param_value('data', 'PostSlidesDocumentFromTemplate', requestParam.data, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'data', requestParam.data)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'data')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'data', requestParam.data)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid template_password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', requestParam.template_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'templatePassword', requestParam.template_password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'templatePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'templatePassword', requestParam.template_password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid template_storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', requestParam.template_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'templateStorage', requestParam.template_storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'templateStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'templateStorage', requestParam.template_storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid is_image_data_embedded' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.invalidize_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', requestParam.is_image_data_embedded, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'isImageDataEmbedded', requestParam.is_image_data_embedded)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'isImageDataEmbedded')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'isImageDataEmbedded', requestParam.is_image_data_embedded)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesDocumentFromTemplate', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesDocumentFromTemplate', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesDocumentFromTemplateRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.data = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.template_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.is_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'PostSlidesDocumentFromTemplate', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesDocumentFromTemplate', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesDocumentFromTemplate', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesDocumentFromTemplate', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_document_from_template_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesDocumentFromTemplate', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesDocumentFromTemplate', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_pipeline
  # Performs slides pipeline.
  # @param [Hash] opts the optional parameters
  # @option opts [Pipeline] :pipeline A Pipeline object.
  # @option opts [File[]] :files files to upload with the pipeline
  # @return [File]
  describe 'post_slides_pipeline test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesPipelineRequest.new
      requestParam.pipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'PostSlidesPipeline', 'Pipeline')
      requestParam.files = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'PostSlidesPipeline', 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPipeline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_pipeline_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPipeline', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid pipeline' do
      requestParam = AsposeSlidesCloud::PostSlidesPipelineRequest.new
      requestParam.pipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'PostSlidesPipeline', 'Pipeline')
      requestParam.files = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'PostSlidesPipeline', 'File[]')
      requestParam.pipeline = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pipeline', 'PostSlidesPipeline', requestParam.pipeline, 'Pipeline')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPipeline', 'pipeline', requestParam.pipeline)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_pipeline_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPipeline', 'pipeline')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPipeline', 'pipeline', requestParam.pipeline)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid files' do
      requestParam = AsposeSlidesCloud::PostSlidesPipelineRequest.new
      requestParam.pipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'PostSlidesPipeline', 'Pipeline')
      requestParam.files = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'PostSlidesPipeline', 'File[]')
      requestParam.files = AsposeSlidesCloud::SpecUtils.invalidize_param_value('files', 'PostSlidesPipeline', requestParam.files, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPipeline', 'files', requestParam.files)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_pipeline_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPipeline', 'files')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPipeline', 'files', requestParam.files)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_presentation_replace_text
  # Replace text with a new value.
  # @param name Document name.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentReplaceResult]
  describe 'post_slides_presentation_replace_text test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesPresentationReplaceText', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid old_value' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'PostSlidesPresentationReplaceText', requestParam.old_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'oldValue', requestParam.old_value)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'oldValue', requestParam.old_value)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid new_value' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'PostSlidesPresentationReplaceText', requestParam.new_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'newValue', requestParam.new_value)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'newValue', requestParam.new_value)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid ignore_case' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', requestParam.ignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'ignoreCase', requestParam.ignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'ignoreCase', requestParam.ignore_case)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesPresentationReplaceText', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesPresentationReplaceText', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesPresentationReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesPresentationReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesPresentationReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesPresentationReplaceText', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesPresentationReplaceText', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_presentation_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesPresentationReplaceText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesPresentationReplaceText', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_reorder
  # Reorder presentation slide position.
  # @param name Document name.
  # @param slide_index The position of the slide to be reordered.
  # @param new_position The new position of the reordered slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'post_slides_reorder test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesReorder', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlidesReorder', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid new_position' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newPosition', 'PostSlidesReorder', requestParam.new_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'newPosition', requestParam.new_position)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'newPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'newPosition', requestParam.new_position)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesReorder', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesReorder', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorder', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesReorder', 'Integer')
      requestParam.new_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'PostSlidesReorder', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorder', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorder', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesReorder', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorder', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorder', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorder', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_reorder_many
  # Reorder presentation slides positions.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :old_positions A comma separated array of positions of slides to be reordered.
  # @option opts [String] :new_positions A comma separated array of new slide positions.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'post_slides_reorder_many test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesReorderMany', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid old_positions' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldPositions', 'PostSlidesReorderMany', requestParam.old_positions, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'oldPositions', requestParam.old_positions)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'oldPositions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'oldPositions', requestParam.old_positions)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid new_positions' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newPositions', 'PostSlidesReorderMany', requestParam.new_positions, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'newPositions', requestParam.new_positions)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'newPositions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'newPositions', requestParam.new_positions)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesReorderMany', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesReorderMany', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesReorderManyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesReorderMany', 'String')
      requestParam.old_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'PostSlidesReorderMany', 'String')
      requestParam.new_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'PostSlidesReorderMany', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesReorderMany', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesReorderMany', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesReorderMany', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesReorderMany', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_reorder_many_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesReorderMany', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesReorderMany', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_save_as
  # Save a presentation to a specified format.
  # @param name Document name.
  # @param format Export format.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [File]
  describe 'post_slides_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostSlidesSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostSlidesSaveAs', requestParam.options, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostSlidesSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_set_document_properties
  # Set document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [DocumentProperties] :properties New properties.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'post_slides_set_document_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesSetDocumentProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSetDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid properties' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.invalidize_param_value('properties', 'PostSlidesSetDocumentProperties', requestParam.properties, 'DocumentProperties')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', 'properties', requestParam.properties)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSetDocumentProperties', 'properties')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', 'properties', requestParam.properties)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesSetDocumentProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSetDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesSetDocumentProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSetDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesSetDocumentPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.properties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'PostSlidesSetDocumentProperties', 'DocumentProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSetDocumentProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesSetDocumentProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSetDocumentProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_set_document_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSetDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSetDocumentProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_slide_replace_text
  # Replace text with a new value.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideReplaceResult]
  describe 'post_slides_slide_replace_text test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesSlideReplaceText', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSlidesSlideReplaceText', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid old_value' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'PostSlidesSlideReplaceText', requestParam.old_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'oldValue', requestParam.old_value)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'oldValue', requestParam.old_value)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid new_value' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'PostSlidesSlideReplaceText', requestParam.new_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'newValue', requestParam.new_value)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'newValue', requestParam.new_value)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid ignore_case' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'PostSlidesSlideReplaceText', requestParam.ignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'ignoreCase', requestParam.ignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'ignoreCase', requestParam.ignore_case)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesSlideReplaceText', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesSlideReplaceText', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesSlideReplaceTextRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSlideReplaceText', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSlidesSlideReplaceText', 'Integer')
      requestParam.old_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.new_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'PostSlidesSlideReplaceText', 'String')
      requestParam.ignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'PostSlidesSlideReplaceText', 'BOOLEAN')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSlideReplaceText', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSlideReplaceText', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesSlideReplaceText', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSlideReplaceText', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_slide_replace_text_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSlideReplaceText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSlideReplaceText', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_slides_split
  # Splitting presentations. Create one image per slide.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :format Export format. Default value is jpeg.
  # @option opts [Integer] :width The width of created images.
  # @option opts [Integer] :height The height of created images.
  # @option opts [Integer] :to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
  # @option opts [Integer] :from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
  # @option opts [String] :dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [SplitDocumentResult]
  describe 'post_slides_split test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSlidesSplit', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostSlidesSplit', requestParam.options, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostSlidesSplit', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'PostSlidesSplit', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'PostSlidesSplit', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid to' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.to = AsposeSlidesCloud::SpecUtils.invalidize_param_value('to', 'PostSlidesSplit', requestParam.to, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'to', requestParam.to)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'to')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'to', requestParam.to)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid from' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.from = AsposeSlidesCloud::SpecUtils.invalidize_param_value('from', 'PostSlidesSplit', requestParam.from, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'from', requestParam.from)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'from')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'from', requestParam.from)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dest_folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destFolder', 'PostSlidesSplit', requestParam.dest_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'destFolder', requestParam.dest_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'destFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'destFolder', requestParam.dest_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSlidesSplit', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSlidesSplit', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSlidesSplit', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostSlidesSplitRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSlidesSplit', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSlidesSplit', 'ExportOptions')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSlidesSplit', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PostSlidesSplit', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PostSlidesSplit', 'Integer')
      requestParam.to = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'PostSlidesSplit', 'Integer')
      requestParam.from = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'PostSlidesSplit', 'Integer')
      requestParam.dest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'PostSlidesSplit', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSlidesSplit', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSlidesSplit', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSlidesSplit', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostSlidesSplit', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSlidesSplit', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_slides_split_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSlidesSplit', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSlidesSplit', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for post_subshape_save_as
  # Render shape to specified picture format (for smart art and group shapes).
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [File]
  describe 'post_subshape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PostSubshapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PostSubshapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PostSubshapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PostSubshapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PostSubshapeSaveAs', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PostSubshapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PostSubshapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PostSubshapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PostSubshapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PostSubshapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PostSubshapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PostSubshapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PostSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PostSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PostSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PostSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PostSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PostSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PostSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PostSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PostSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PostSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PostSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PostSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PostSubshapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PostSubshapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.post_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PostSubshapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PostSubshapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_layout_slide
  # Update a layoutSlide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [LayoutSlide] :slide_dto Slide update data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'put_layout_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutLayoutSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutLayoutSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_dto' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideDto', 'PutLayoutSlide', requestParam.slide_dto, 'LayoutSlide')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'slideDto', requestParam.slide_dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'slideDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'slideDto', requestParam.slide_dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutLayoutSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutLayoutSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutLayoutSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutLayoutSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutLayoutSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutLayoutSlide', 'LayoutSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutLayoutSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutLayoutSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutLayoutSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutLayoutSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_layout_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutLayoutSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutLayoutSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_notes_slide_shape_save_as
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [nil]
  describe 'put_notes_slide_shape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutNotesSlideShapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutNotesSlideShapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutNotesSlideShapeSaveAs', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PutNotesSlideShapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutNotesSlideShapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutNotesSlideShapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutNotesSlideShapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PutNotesSlideShapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PutNotesSlideShapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PutNotesSlideShapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutNotesSlideShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutNotesSlideShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutNotesSlideShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutNotesSlideShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutNotesSlideShapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutNotesSlideShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_notes_slide_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutNotesSlideShapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutNotesSlideShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_presentation_merge
  # Merge the presentation with other presentations or some of their slides specified in the request parameter.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [OrderedMergeRequest] :request OrderedMergeRequest with a list of presentations and slide indices to merge.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'put_presentation_merge test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutPresentationMerge', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutPresentationMerge', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid request' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'PutPresentationMerge', requestParam.request, 'OrderedMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', 'request', requestParam.request)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutPresentationMerge', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', 'request', requestParam.request)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutPresentationMerge', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutPresentationMerge', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutPresentationMerge', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutPresentationMerge', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutPresentationMergeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutPresentationMerge', 'String')
      requestParam.request = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'PutPresentationMerge', 'OrderedMergeRequest')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutPresentationMerge', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutPresentationMerge', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutPresentationMerge', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutPresentationMerge', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_presentation_merge_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutPresentationMerge', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutPresentationMerge', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_set_paragraph_portion_properties
  # Update portion properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'put_set_paragraph_portion_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSetParagraphPortionProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSetParagraphPortionProperties', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSetParagraphPortionProperties', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'PutSetParagraphPortionProperties', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSetParagraphPortionProperties', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSetParagraphPortionProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSetParagraphPortionProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetParagraphPortionProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSetParagraphPortionProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphPortionProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphPortionProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphPortionProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_set_paragraph_properties
  # Update paragraph properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'put_set_paragraph_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSetParagraphProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSetParagraphProperties', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSetParagraphProperties', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutSetParagraphProperties', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSetParagraphProperties', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSetParagraphProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSetParagraphProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSetParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetParagraphProperties', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSetParagraphProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetParagraphProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetParagraphProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetParagraphProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_set_subshape_paragraph_portion_properties
  # Update portion properties (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'put_set_subshape_paragraph_portion_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSetSubshapeParagraphPortionProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PutSetSubshapeParagraphPortionProperties', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSetSubshapeParagraphPortionProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPortionPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutSetSubshapeParagraphPortionProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphPortionProperties', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSetSubshapeParagraphPortionProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphPortionProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_portion_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphPortionProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphPortionProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_set_subshape_paragraph_properties
  # Update paragraph properties (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'put_set_subshape_paragraph_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSetSubshapeParagraphProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PutSetSubshapeParagraphProperties', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSetSubshapeParagraphProperties', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSetSubshapeParagraphProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSetSubshapeParagraphProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSetSubshapeParagraphPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutSetSubshapeParagraphProperties', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSetSubshapeParagraphProperties', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSetSubshapeParagraphProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSetSubshapeParagraphProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSetSubshapeParagraphProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_set_subshape_paragraph_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSetSubshapeParagraphProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSetSubshapeParagraphProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_shape_save_as
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [nil]
  describe 'put_shape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutShapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutShapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutShapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutShapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutShapeSaveAs', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PutShapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutShapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutShapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutShapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PutShapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PutShapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PutShapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutShapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutShapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutShapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutShapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutShapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutShapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutShapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutShapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutShapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutShapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutShapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutShapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutShapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_shape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutShapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutShapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_animation
  # Set slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [SlideAnimation] :animation Animation DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'put_slide_animation test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideAnimation', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideAnimation', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid animation' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.invalidize_param_value('animation', 'PutSlideAnimation', requestParam.animation, 'SlideAnimation')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'animation', requestParam.animation)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'animation')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'animation', requestParam.animation)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideAnimation', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideAnimation', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimation', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimation', 'Integer')
      requestParam.animation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'PutSlideAnimation', 'SlideAnimation')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimation', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimation', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideAnimation', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimation', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimation', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_animation_effect
  # Modify an animation effect for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param effect_index The position of the effect to be modified.
  # @param [Hash] opts the optional parameters
  # @option opts [Effect] :effect Animation effect DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'put_slide_animation_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideAnimationEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideAnimationEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'PutSlideAnimationEffect', requestParam.effect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'effectIndex', requestParam.effect_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'effectIndex', requestParam.effect_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'PutSlideAnimationEffect', requestParam.effect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'effect', requestParam.effect)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'effect', requestParam.effect)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideAnimationEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideAnimationEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideAnimationEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_animation_interactive_sequence_effect
  # Modify an animation effect for a slide interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The position of the interactive sequence.
  # @param effect_index The position of the effect to be modified.
  # @param [Hash] opts the optional parameters
  # @option opts [Effect] :effect Animation effect DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'put_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid sequence_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.sequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', requestParam.sequence_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect_index' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.effect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'effectIndex', requestParam.effect_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'effectIndex', requestParam.effect_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid effect' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.effect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'effect', requestParam.effect)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'effect', requestParam.effect)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideAnimationInteractiveSequenceEffectRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.sequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'PutSlideAnimationInteractiveSequenceEffect', 'Integer')
      requestParam.effect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'PutSlideAnimationInteractiveSequenceEffect', 'Effect')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideAnimationInteractiveSequenceEffect', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_animation_interactive_sequence_effect_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideAnimationInteractiveSequenceEffect', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_save_as
  # Save a slide to a specified format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param out_path Path to upload the output file to.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [Integer] :width Output file width; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height Output file height; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [nil]
  describe 'put_slide_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutSlideSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutSlideSaveAs', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PutSlideSaveAs', requestParam.options, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'PutSlideSaveAs', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'PutSlideSaveAs', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutSlideSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlideSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlideSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlideSaveAs', 'ExportOptions')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlideSaveAs', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlideSaveAs', 'Integer')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlideSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutSlideSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_shape_info
  # Update shape properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'put_slide_shape_info test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideShapeInfo', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideShapeInfo', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSlideShapeInfo', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSlideShapeInfo', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideShapeInfo', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideShapeInfo', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideShapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideShapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideShapeInfo', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideShapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideShapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideShapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideShapeInfo', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideShapeInfo', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_shape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideShapeInfo', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideShapeInfo', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slide_subshape_info
  # Update shape properties (for smart art and group shapes).
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path.
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'put_slide_subshape_info test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlideSubshapeInfo', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlideSubshapeInfo', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSlideSubshapeInfo', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PutSlideSubshapeInfo', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSlideSubshapeInfo', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlideSubshapeInfo', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlideSubshapeInfo', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlideSubshapeInfoRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlideSubshapeInfo', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSlideSubshapeInfo', 'Integer')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSlideSubshapeInfo', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlideSubshapeInfo', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlideSubshapeInfo', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlideSubshapeInfo', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlideSubshapeInfo', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlideSubshapeInfo', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slide_subshape_info_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlideSubshapeInfo', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlideSubshapeInfo', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_convert
  # Convert presentation from request content to format specified.
  # @param format Export format.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :document Document data.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [nil]
  describe 'put_slides_convert test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutSlidesConvert', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesConvert', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutSlidesConvert', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesConvert', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid document' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'PutSlidesConvert', requestParam.document, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', 'document', requestParam.document)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesConvert', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', 'document', requestParam.document)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesConvert', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesConvert', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutSlidesConvertRequest.new
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesConvert', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesConvert', 'String')
      requestParam.document = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'PutSlidesConvert', 'File')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesConvert', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutSlidesConvert', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesConvert', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_convert_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesConvert', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesConvert', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_document_from_html
  # Update presentation document from html.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :html HTML data.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @return [Document]
  describe 'put_slides_document_from_html test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesDocumentFromHtml', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesDocumentFromHtml', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid html' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.invalidize_param_value('html', 'PutSlidesDocumentFromHtml', requestParam.html, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', 'html', requestParam.html)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesDocumentFromHtml', 'html')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', 'html', requestParam.html)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesDocumentFromHtml', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesDocumentFromHtml', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesDocumentFromHtml', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesDocumentFromHtml', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesDocumentFromHtmlRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.html = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesDocumentFromHtml', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesDocumentFromHtml', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesDocumentFromHtml', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_document_from_html_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesDocumentFromHtml', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesDocumentFromHtml', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_save_as
  # Save a presentation to a specified format.
  # @param name Document name.
  # @param out_path Output path.
  # @param format Export format.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [nil]
  describe 'put_slides_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutSlidesSaveAs', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutSlidesSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PutSlidesSaveAs', requestParam.options, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSlidesSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSlidesSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSlidesSaveAs', 'ExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSlidesSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutSlidesSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_set_document_property
  # Set document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param [Hash] opts the optional parameters
  # @option opts [DocumentProperty] :property Property with the value.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperty]
  describe 'put_slides_set_document_property test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSetDocumentProperty', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid property_name' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'PutSlidesSetDocumentProperty', requestParam.property_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'propertyName', requestParam.property_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'propertyName', requestParam.property_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid property' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.invalidize_param_value('property', 'PutSlidesSetDocumentProperty', requestParam.property, 'DocumentProperty')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'property', requestParam.property)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'property')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'property', requestParam.property)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSetDocumentProperty', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSetDocumentProperty', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSetDocumentPropertyRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.property = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'PutSlidesSetDocumentProperty', 'DocumentProperty')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSetDocumentProperty', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSetDocumentProperty', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSetDocumentProperty', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_set_document_property_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSetDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSetDocumentProperty', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_slide
  # Update a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [Slide] :slide_dto Slide update data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'put_slides_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlidesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_dto' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideDto', 'PutSlidesSlide', requestParam.slide_dto, 'Slide')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'slideDto', requestParam.slide_dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'slideDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'slideDto', requestParam.slide_dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlide', 'Integer')
      requestParam.slide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'PutSlidesSlide', 'Slide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_slide_background
  # Set background for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [SlideBackground] :background Slide background update data.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'put_slides_slide_background test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSlideBackground', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlidesSlideBackground', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid background' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.background = AsposeSlidesCloud::SpecUtils.invalidize_param_value('background', 'PutSlidesSlideBackground', requestParam.background, 'SlideBackground')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'background', requestParam.background)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'background')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'background', requestParam.background)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSlideBackground', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSlideBackground', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackground', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackground', 'Integer')
      requestParam.background = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'PutSlidesSlideBackground', 'SlideBackground')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackground', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackground', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSlideBackground', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackground', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackground', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_slide_background_color
  # Set background color for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param color Slide background target color in RRGGBB format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder Document folder.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'put_slides_slide_background_color test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSlideBackgroundColor', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid color' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.color = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'PutSlidesSlideBackgroundColor', requestParam.color, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'color', requestParam.color)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'color', requestParam.color)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSlideBackgroundColor', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSlideBackgroundColor', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideBackgroundColorRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSlidesSlideBackgroundColor', 'Integer')
      requestParam.color = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideBackgroundColor', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSlideBackgroundColor', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideBackgroundColor', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_background_color_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideBackgroundColor', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideBackgroundColor', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_slide_size
  # Set slide size for a presentation.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :folder Document folder.
  # @option opts [Integer] :width Slide width.
  # @option opts [Integer] :height Slide height.
  # @option opts [String] :size_type Standard slide size type.
  # @option opts [String] :scale_type Standard slide scale type.
  # @return [Document]
  describe 'put_slides_slide_size test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesSlideSize', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesSlideSize', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesSlideSize', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesSlideSize', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid width' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'PutSlidesSlideSize', requestParam.width, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'width', requestParam.width)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'width', requestParam.width)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid height' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'PutSlidesSlideSize', requestParam.height, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'height', requestParam.height)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'height', requestParam.height)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid size_type' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sizeType', 'PutSlidesSlideSize', requestParam.size_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'sizeType', requestParam.size_type)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'sizeType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'sizeType', requestParam.size_type)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_type' do
      requestParam = AsposeSlidesCloud::PutSlidesSlideSizeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesSlideSize', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesSlideSize', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesSlideSize', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesSlideSize', 'String')
      requestParam.width = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'PutSlidesSlideSize', 'Integer')
      requestParam.height = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'PutSlidesSlideSize', 'Integer')
      requestParam.size_type = AsposeSlidesCloud::SpecUtils.get_param_value('sizeType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.get_param_value('scaleType', 'PutSlidesSlideSize', 'String')
      requestParam.scale_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleType', 'PutSlidesSlideSize', requestParam.scale_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesSlideSize', 'scaleType', requestParam.scale_type)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_slide_size_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesSlideSize', 'scaleType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesSlideSize', 'scaleType', requestParam.scale_type)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_slides_view_properties
  # Update presentation document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [ViewProperties] :dto The view properties data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ViewProperties]
  describe 'put_slides_view_properties test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSlidesViewProperties', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesViewProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutSlidesViewProperties', requestParam.dto, 'ViewProperties')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesViewProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSlidesViewProperties', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesViewProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSlidesViewProperties', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesViewProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSlidesViewPropertiesRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSlidesViewProperties', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutSlidesViewProperties', 'ViewProperties')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSlidesViewProperties', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSlidesViewProperties', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSlidesViewProperties', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSlidesViewProperties', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_slides_view_properties_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSlidesViewProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSlidesViewProperties', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_subshape_save_as
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Shape path (for smart art and group shapes).
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :fonts_folder Fonts folder.
  # @return [nil]
  describe 'put_subshape_save_as test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutSubshapeSaveAs', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutSubshapeSaveAs', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutSubshapeSaveAs', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid format' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'PutSubshapeSaveAs', requestParam.format, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'format', requestParam.format)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'format', requestParam.format)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid out_path' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'PutSubshapeSaveAs', requestParam.out_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'outPath', requestParam.out_path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'outPath', requestParam.out_path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'PutSubshapeSaveAs', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid options' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'PutSubshapeSaveAs', requestParam.options, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'options', requestParam.options)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'options', requestParam.options)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutSubshapeSaveAs', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutSubshapeSaveAs', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutSubshapeSaveAs', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_x' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'PutSubshapeSaveAs', requestParam.scale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'scaleX', requestParam.scale_x)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'scaleX', requestParam.scale_x)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid scale_y' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'PutSubshapeSaveAs', requestParam.scale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'scaleY', requestParam.scale_y)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'scaleY', requestParam.scale_y)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid bounds' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'PutSubshapeSaveAs', requestParam.bounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'bounds', requestParam.bounds)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'bounds', requestParam.bounds)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid fonts_folder' do
      requestParam = AsposeSlidesCloud::PutSubshapeSaveAsRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutSubshapeSaveAs', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutSubshapeSaveAs', 'Integer')
      requestParam.format = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'PutSubshapeSaveAs', 'String')
      requestParam.out_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'PutSubshapeSaveAs', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'PutSubshapeSaveAs', 'String')
      requestParam.options = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'PutSubshapeSaveAs', 'IShapeExportOptions')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutSubshapeSaveAs', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutSubshapeSaveAs', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutSubshapeSaveAs', 'String')
      requestParam.scale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'PutSubshapeSaveAs', 'Float')
      requestParam.scale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'PutSubshapeSaveAs', 'Float')
      requestParam.bounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'PutSubshapeSaveAs', 'String')
      requestParam.fonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'PutSubshapeSaveAs', requestParam.fonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutSubshapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_subshape_save_as_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutSubshapeSaveAs', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutSubshapeSaveAs', 'fontsFolder', requestParam.fonts_folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_update_notes_slide
  # Update notes slide properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [NotesSlide] :dto A NotesSlide object with notes slide data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'put_update_notes_slide test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutUpdateNotesSlide', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutUpdateNotesSlide', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutUpdateNotesSlide', requestParam.dto, 'NotesSlide')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutUpdateNotesSlide', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutUpdateNotesSlide', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlide', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlide', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlide', 'NotesSlide')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlide', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlide', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutUpdateNotesSlide', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlide', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlide', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_update_notes_slide_shape
  # Update shape properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'put_update_notes_slide_shape test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutUpdateNotesSlideShape', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutUpdateNotesSlideShape', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutUpdateNotesSlideShape', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutUpdateNotesSlideShape', requestParam.dto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutUpdateNotesSlideShape', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutUpdateNotesSlideShape', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShape', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShape', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShape', 'ShapeBase')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShape', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShape', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutUpdateNotesSlideShape', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShape', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShape', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_update_notes_slide_shape_paragraph
  # Update paragraph properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Paragraph] :dto Paragraph DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'put_update_notes_slide_shape_paragraph test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutUpdateNotesSlideShapeParagraph', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', requestParam.dto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutUpdateNotesSlideShapeParagraph', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapeParagraphRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapeParagraph', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapeParagraph', 'Paragraph')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutUpdateNotesSlideShapeParagraph', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapeParagraph', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_paragraph_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapeParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapeParagraph', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for put_update_notes_slide_shape_portion
  # Update portion properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [Portion] :dto Portion DTO.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'put_update_notes_slide_shape_portion test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'PutUpdateNotesSlideShapePortion', requestParam.name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'name', requestParam.name)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'name', requestParam.name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid slide_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', requestParam.slide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'slideIndex', requestParam.slide_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'slideIndex', requestParam.slide_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid shape_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', requestParam.shape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'shapeIndex', requestParam.shape_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'shapeIndex', requestParam.shape_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid paragraph_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', requestParam.paragraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'paragraphIndex', requestParam.paragraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'paragraphIndex', requestParam.paragraph_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid portion_index' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', requestParam.portion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'portionIndex', requestParam.portion_index)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'portionIndex', requestParam.portion_index)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid dto' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'PutUpdateNotesSlideShapePortion', requestParam.dto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'dto', requestParam.dto)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'dto', requestParam.dto)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid password' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'PutUpdateNotesSlideShapePortion', requestParam.password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'password', requestParam.password)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'password', requestParam.password)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid folder' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'PutUpdateNotesSlideShapePortion', requestParam.folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'folder', requestParam.folder)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'folder', requestParam.folder)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage' do
      requestParam = AsposeSlidesCloud::PutUpdateNotesSlideShapePortionRequest.new
      requestParam.name = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.slide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.shape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.paragraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.portion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'PutUpdateNotesSlideShapePortion', 'Integer')
      requestParam.dto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'PutUpdateNotesSlideShapePortion', 'Portion')
      requestParam.password = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.folder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'PutUpdateNotesSlideShapePortion', 'String')
      requestParam.storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'PutUpdateNotesSlideShapePortion', requestParam.storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('PutUpdateNotesSlideShapePortion', 'storage', requestParam.storage)
      begin
        AsposeSlidesCloud::SpecUtils.api.put_update_notes_slide_shape_portion_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('PutUpdateNotesSlideShapePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('PutUpdateNotesSlideShapePortion', 'storage', requestParam.storage)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for storage_exists
  # Check if storage exists
  # @param storage_name Storage name
  # @param [Hash] opts the optional parameters
  # @return [StorageExist]
  describe 'storage_exists test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::StorageExistsRequest.new
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'StorageExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('StorageExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.storage_exists_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('StorageExists', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::StorageExistsRequest.new
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'StorageExists', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'StorageExists', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('StorageExists', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.storage_exists_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('StorageExists', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('StorageExists', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

  # unit tests for upload_file
  # Upload file
  # @param file File to upload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
  # @option opts [String] :storage_name Storage name
  # @return [FilesUploadResult]
  describe 'upload_file test' do
    it 'should work' do
      requestParam = AsposeSlidesCloud::UploadFileRequest.new
      requestParam.file = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.api.upload_file_with_http_info(requestParam)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid file' do
      requestParam = AsposeSlidesCloud::UploadFileRequest.new
      requestParam.file = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      requestParam.file = AsposeSlidesCloud::SpecUtils.invalidize_param_value('file', 'UploadFile', requestParam.file, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'file', requestParam.file)
      begin
        AsposeSlidesCloud::SpecUtils.api.upload_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'file')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'file', requestParam.file)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid path' do
      requestParam = AsposeSlidesCloud::UploadFileRequest.new
      requestParam.file = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      requestParam.path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'UploadFile', requestParam.path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'path', requestParam.path)
      begin
        AsposeSlidesCloud::SpecUtils.api.upload_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'path', requestParam.path)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end

    it 'invalid storage_name' do
      requestParam = AsposeSlidesCloud::UploadFileRequest.new
      requestParam.file = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      requestParam.path = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      requestParam.storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'UploadFile', requestParam.storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'storageName', requestParam.storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.api.upload_file_with_http_info(requestParam)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'storageName', requestParam.storage_name)
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue
      end
    end
  end

end
