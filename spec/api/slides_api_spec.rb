=begin
Copyright (c) 2019 Aspose Pty Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=end

require 'spec_helper'
#require 'json'

# Unit tests for AsposeSlidesCloud::SlidesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SlidesApi' do

  # unit tests for align_shapes
  # Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param alignment_type Alignment type that will be applied to the shapes.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :align_to_slide If true, shapes will be aligned relative to the slide edges.
  # @option opts [Integer[]] :shapes Shapes indexes.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'align_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'AlignShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'AlignShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid alignment_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('alignmentType', 'AlignShapes', paramalignment_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'alignmentType', paramalignment_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'alignmentType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'alignmentType', paramalignment_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'alignmentType', paramalignment_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid align_to_slide' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.invalidize_param_value('alignToSlide', 'AlignShapes', paramalign_to_slide, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'alignToSlide', paramalign_to_slide)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'alignToSlide')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'alignToSlide', paramalign_to_slide, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'alignToSlide', paramalign_to_slide, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shapes' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'AlignShapes', paramshapes, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'shapes', paramshapes)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'shapes', paramshapes, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'shapes', paramshapes, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'AlignShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'AlignShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'AlignShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignShapes', 'Integer')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'AlignShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_shapes_with_http_info(paramname, paramslide_index, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for align_special_slide_shapes
  # Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param alignment_type Alignment type that will be applied to the shapes.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :align_to_slide If true, shapes will be aligned relative to the slide edges.
  # @option opts [Integer[]] :shapes Shapes indexes.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'align_special_slide_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'AlignSpecialSlideShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'AlignSpecialSlideShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'AlignSpecialSlideShapes', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid alignment_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('alignmentType', 'AlignSpecialSlideShapes', paramalignment_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'alignmentType', paramalignment_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'alignmentType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'alignmentType', paramalignment_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'alignmentType', paramalignment_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid align_to_slide' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.invalidize_param_value('alignToSlide', 'AlignSpecialSlideShapes', paramalign_to_slide, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'alignToSlide', paramalign_to_slide)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'alignToSlide')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'alignToSlide', paramalign_to_slide, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'alignToSlide', paramalign_to_slide, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shapes' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'AlignSpecialSlideShapes', paramshapes, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'shapes', paramshapes)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'shapes', paramshapes, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'shapes', paramshapes, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'AlignSpecialSlideShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'AlignSpecialSlideShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'AlignSpecialSlideShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'AlignSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'AlignSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'AlignSpecialSlideShapes', 'String')
      paramalignment_type = AsposeSlidesCloud::SpecUtils.get_param_value('alignmentType', 'AlignSpecialSlideShapes', 'String')
      paramalign_to_slide = AsposeSlidesCloud::SpecUtils.get_param_value('alignToSlide', 'AlignSpecialSlideShapes', 'BOOLEAN')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'AlignSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'AlignSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'AlignSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'AlignSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'AlignSpecialSlideShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('AlignSpecialSlideShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.align_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramalignment_type, paramalign_to_slide, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('AlignSpecialSlideShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('AlignSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for compress_embedded_fonts
  # Compresses embedded fonts by removing unused characters.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'compress_embedded_fonts test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressEmbeddedFonts', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFonts', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressEmbeddedFonts', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CompressEmbeddedFonts', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFonts', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFonts', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CompressEmbeddedFonts', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFonts', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFonts', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CompressEmbeddedFonts', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFonts', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFonts', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CompressEmbeddedFonts', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFonts', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFonts', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFonts', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for compress_embedded_fonts_online
  # Compresses embedded fonts by removing unused characters.
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'compress_embedded_fonts_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CompressEmbeddedFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFontsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFontsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_online_with_http_info(paramdocument, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFontsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CompressEmbeddedFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFontsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'CompressEmbeddedFontsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFontsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFontsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFontsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFontsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CompressEmbeddedFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressEmbeddedFontsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CompressEmbeddedFontsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressEmbeddedFontsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_embedded_fonts_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressEmbeddedFontsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFontsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressEmbeddedFontsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for compress_image
  # Deletes cropped areas of a pictire.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must refer to a picture frame).
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :resolution Target resolution in DPI.
  # @option opts [BOOLEAN] :delete_picture_cropped_areas true to delete picture cropped areas.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Presentation storage.
  # @return [nil]
  describe 'compress_image test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CompressImage', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CompressImage', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CompressImage', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid resolution' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramresolution = AsposeSlidesCloud::SpecUtils.invalidize_param_value('resolution', 'CompressImage', paramresolution, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'resolution', paramresolution)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'resolution')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'resolution', paramresolution, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'resolution', paramresolution, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid delete_picture_cropped_areas' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.invalidize_param_value('deletePictureCroppedAreas', 'CompressImage', paramdelete_picture_cropped_areas, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'deletePictureCroppedAreas', paramdelete_picture_cropped_areas)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'deletePictureCroppedAreas')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'deletePictureCroppedAreas', paramdelete_picture_cropped_areas, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'deletePictureCroppedAreas', paramdelete_picture_cropped_areas, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CompressImage', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CompressImage', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CompressImage', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CompressImage', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CompressImage', 'Integer')
      paramresolution = AsposeSlidesCloud::SpecUtils.get_param_value('resolution', 'CompressImage', 'Float')
      paramdelete_picture_cropped_areas = AsposeSlidesCloud::SpecUtils.get_param_value('deletePictureCroppedAreas', 'CompressImage', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CompressImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CompressImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CompressImage', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CompressImage', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.compress_image_with_http_info(paramname, paramslide_index, paramshape_index, paramresolution, paramdelete_picture_cropped_areas, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CompressImage', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CompressImage', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for convert
  # Convert presentation from request content to format specified.
  # @param document Document data.
  # @param format Export format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [Integer[]] :slides The indices of the slides to be converted. If not specified, all slides are converted by default.
  # @option opts [ExportOptions] :options Export options.
  # @return [File]
  describe 'convert test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'Convert', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'Convert', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'Convert', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'Convert', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'Convert', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slides' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramslides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'Convert', paramslides, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'slides', paramslides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'slides', paramslides, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'slides', paramslides, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'Convert', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Convert', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Convert', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Convert', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Convert', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'Convert', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Convert', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'Convert', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('Convert', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_with_http_info(paramdocument, paramformat, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Convert', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Convert', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for convert_and_save
  # Convert presentation from request content to format specified.
  # @param document Document data.
  # @param format Export format.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [Integer[]] :slides The indices of the slides to be converted. If not specified, all slides are converted by default.
  # @option opts [ExportOptions] :options Export options.
  # @return [nil]
  describe 'convert_and_save test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ConvertAndSave', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'ConvertAndSave', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'ConvertAndSave', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ConvertAndSave', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ConvertAndSave', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'ConvertAndSave', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slides' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramslides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'ConvertAndSave', paramslides, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'slides', paramslides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'slides', paramslides, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'slides', paramslides, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ConvertAndSave', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'ConvertAndSave', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'ConvertAndSave', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ConvertAndSave', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ConvertAndSave', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ConvertAndSave', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'ConvertAndSave', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ConvertAndSave', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'ConvertAndSave', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('ConvertAndSave', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.convert_and_save_with_http_info(paramdocument, paramformat, paramout_path, parampassword, paramstorage, paramfonts_folder, paramslides, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ConvertAndSave', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ConvertAndSave', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for copy_file
  # Copy file
  # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
  # @param dest_path Destination file path
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to copy
  # @return [nil]
  describe 'copy_file test' do
    it 'should work' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      paramsrc_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'CopyFile', paramsrc_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'srcPath', paramsrc_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcPath', paramsrc_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcPath', paramsrc_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'CopyFile', paramdest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'destPath', paramdest_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destPath', paramdest_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destPath', paramdest_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid src_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'CopyFile', paramsrc_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'srcStorageName', paramsrc_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'CopyFile', paramdest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'destStorageName', paramdest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destStorageName', paramdest_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'destStorageName', paramdest_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid version_id' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'CopyFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'CopyFile', paramversion_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFile', 'versionId', paramversion_id)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'versionId', paramversion_id, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFile', 'versionId', paramversion_id, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for copy_folder
  # Copy folder
  # @param src_path Source folder path e.g. &#39;/src&#39;
  # @param dest_path Destination folder path e.g. &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'copy_folder test' do
    it 'should work' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      paramsrc_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'CopyFolder', paramsrc_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'srcPath', paramsrc_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcPath', paramsrc_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcPath', paramsrc_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'CopyFolder', paramdest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'destPath', paramdest_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destPath', paramdest_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destPath', paramdest_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid src_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'CopyFolder', paramsrc_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'srcStorageName', paramsrc_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'CopyFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'CopyFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'CopyFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'CopyFolder', paramdest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyFolder', 'destStorageName', paramdest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyFolder', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destStorageName', paramdest_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyFolder', 'destStorageName', paramdest_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for copy_layout_slide
  # Copy layoutSlide from source presentation.
  # @param name Document name.
  # @param clone_from Name of the document to clone layoutSlide from.
  # @param clone_from_position Position of cloned layout slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clone_from_password Password for the document to clone layoutSlide from.
  # @option opts [String] :clone_from_storage Storage of the document to clone layoutSlide from.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'copy_layout_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CopyLayoutSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFrom', 'CopyLayoutSlide', paramclone_from, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'cloneFrom', paramclone_from)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'cloneFrom')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFrom', paramclone_from, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFrom', paramclone_from, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPosition', 'CopyLayoutSlide', paramclone_from_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'cloneFromPosition', paramclone_from_position)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'cloneFromPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromPosition', paramclone_from_position, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromPosition', paramclone_from_position, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPassword', 'CopyLayoutSlide', paramclone_from_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'cloneFromPassword', paramclone_from_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'cloneFromPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromPassword', paramclone_from_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromPassword', paramclone_from_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromStorage', 'CopyLayoutSlide', paramclone_from_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'cloneFromStorage', paramclone_from_storage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'cloneFromStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromStorage', paramclone_from_storage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'cloneFromStorage', paramclone_from_storage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CopyLayoutSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CopyLayoutSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyLayoutSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyLayoutSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyLayoutSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyLayoutSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CopyLayoutSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyLayoutSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_layout_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyLayoutSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyLayoutSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for copy_master_slide
  # Copy masterSlide from source presentation.
  # @param name Document name.
  # @param clone_from Name of the document to clone masterSlide from.
  # @param clone_from_position Position of cloned master slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :clone_from_password Password for the document to clone masterSlide from.
  # @option opts [String] :clone_from_storage Storage of the document to clone masterSlide from.
  # @option opts [BOOLEAN] :apply_to_all True to apply cloned master slide to every existing slide.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlide]
  describe 'copy_master_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CopyMasterSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFrom', 'CopyMasterSlide', paramclone_from, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'cloneFrom', paramclone_from)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'cloneFrom')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFrom', paramclone_from, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFrom', paramclone_from, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPosition', 'CopyMasterSlide', paramclone_from_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'cloneFromPosition', paramclone_from_position)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'cloneFromPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromPosition', paramclone_from_position, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromPosition', paramclone_from_position, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromPassword', 'CopyMasterSlide', paramclone_from_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'cloneFromPassword', paramclone_from_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'cloneFromPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromPassword', paramclone_from_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromPassword', paramclone_from_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid clone_from_storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cloneFromStorage', 'CopyMasterSlide', paramclone_from_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'cloneFromStorage', paramclone_from_storage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'cloneFromStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromStorage', paramclone_from_storage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'cloneFromStorage', paramclone_from_storage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid apply_to_all' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.invalidize_param_value('applyToAll', 'CopyMasterSlide', paramapply_to_all, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'applyToAll', paramapply_to_all)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'applyToAll')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'applyToAll', paramapply_to_all, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'applyToAll', paramapply_to_all, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CopyMasterSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CopyMasterSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopyMasterSlide', 'String')
      paramclone_from = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFrom', 'CopyMasterSlide', 'String')
      paramclone_from_position = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPosition', 'CopyMasterSlide', 'Integer')
      paramclone_from_password = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromPassword', 'CopyMasterSlide', 'String')
      paramclone_from_storage = AsposeSlidesCloud::SpecUtils.get_param_value('cloneFromStorage', 'CopyMasterSlide', 'String')
      paramapply_to_all = AsposeSlidesCloud::SpecUtils.get_param_value('applyToAll', 'CopyMasterSlide', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopyMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopyMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CopyMasterSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopyMasterSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_master_slide_with_http_info(paramname, paramclone_from, paramclone_from_position, paramclone_from_password, paramclone_from_storage, paramapply_to_all, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopyMasterSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopyMasterSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for copy_slide
  # Copy a slide from the current or another presentation.
  # @param name Document name.
  # @param slide_to_copy The index of the slide to be copied from the source presentation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position The target position at which to copy the slide. Copy to the end by default.
  # @option opts [String] :source Name of the document to copy a slide from.
  # @option opts [String] :source_password Password for the document to copy a slide from.
  # @option opts [String] :source_storage Template storage name.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'copy_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CopySlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_to_copy' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideToCopy', 'CopySlide', paramslide_to_copy, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'slideToCopy', paramslide_to_copy)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'slideToCopy')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'slideToCopy', paramslide_to_copy, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'slideToCopy', paramslide_to_copy, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CopySlide', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramsource = AsposeSlidesCloud::SpecUtils.invalidize_param_value('source', 'CopySlide', paramsource, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'source', paramsource)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'source')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'source', paramsource, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'source', paramsource, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePassword', 'CopySlide', paramsource_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'sourcePassword', paramsource_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'sourcePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'sourcePassword', paramsource_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'sourcePassword', paramsource_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceStorage', 'CopySlide', paramsource_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'sourceStorage', paramsource_storage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'sourceStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'sourceStorage', paramsource_storage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'sourceStorage', paramsource_storage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CopySlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CopySlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CopySlide', 'String')
      paramslide_to_copy = AsposeSlidesCloud::SpecUtils.get_param_value('slideToCopy', 'CopySlide', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CopySlide', 'Integer')
      paramsource = AsposeSlidesCloud::SpecUtils.get_param_value('source', 'CopySlide', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CopySlide', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CopySlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CopySlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CopySlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CopySlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CopySlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.copy_slide_with_http_info(paramname, paramslide_to_copy, paramposition, paramsource, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CopySlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CopySlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_animation_effect
  # Add an effect to slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'CreateAnimationEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_effect_with_http_info(paramname, paramslide_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_animation_interactive_sequence
  # Set slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence Animation sequence DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_animation_interactive_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateAnimationInteractiveSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateAnimationInteractiveSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequence', 'CreateAnimationInteractiveSequence', paramsequence, 'InteractiveSequence')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'sequence', paramsequence)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'sequence')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'sequence', paramsequence, 'InteractiveSequence')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'sequence', paramsequence, 'InteractiveSequence')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateAnimationInteractiveSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateAnimationInteractiveSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequence', 'Integer')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateAnimationInteractiveSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_animation_interactive_sequence_effect
  # Add an animation effect to a slide interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The position of the interactive sequence.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_caption_track
  # Create video/audio captions track.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must refer to a video or audio frame).
  # @param label Caption track label.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :data Caption track data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Presentation storage.
  # @return [CaptionTrack]
  describe 'create_caption_track test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateCaptionTrack', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateCaptionTrack', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateCaptionTrack', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid label' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramlabel = AsposeSlidesCloud::SpecUtils.invalidize_param_value('label', 'CreateCaptionTrack', paramlabel, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'label', paramlabel)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'label')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'label', paramlabel, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'label', paramlabel, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid data' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.invalidize_param_value('data', 'CreateCaptionTrack', paramdata, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'data', paramdata)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'data')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'data', paramdata, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'data', paramdata, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateCaptionTrack', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateCaptionTrack', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCaptionTrack', 'Integer')
      paramlabel = AsposeSlidesCloud::SpecUtils.get_param_value('label', 'CreateCaptionTrack', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreateCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateCaptionTrack', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCaptionTrack', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramlabel, paramdata, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCaptionTrack', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCaptionTrack', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_chart_category
  # Add a new category to a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param category Category DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'create_chart_category test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateChartCategory', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateChartCategory', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateChartCategory', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid category' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramcategory = AsposeSlidesCloud::SpecUtils.invalidize_param_value('category', 'CreateChartCategory', paramcategory, 'ChartCategory')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'category', paramcategory)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'category')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'category', paramcategory, 'ChartCategory')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'category', paramcategory, 'ChartCategory')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateChartCategory', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateChartCategory', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'CreateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateChartCategory', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartCategory', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartCategory', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartCategory', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_chart_data_point
  # Add a new data point to a chart series.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param series_index Series index.
  # @param data_point Data point DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'create_chart_data_point test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateChartDataPoint', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateChartDataPoint', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateChartDataPoint', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramseries_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesIndex', 'CreateChartDataPoint', paramseries_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'seriesIndex', paramseries_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'seriesIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid data_point' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramdata_point = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dataPoint', 'CreateChartDataPoint', paramdata_point, 'DataPoint')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'dataPoint', paramdata_point)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'dataPoint')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'dataPoint', paramdata_point, 'DataPoint')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'dataPoint', paramdata_point, 'DataPoint')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateChartDataPoint', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateChartDataPoint', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'CreateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'CreateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateChartDataPoint', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartDataPoint', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartDataPoint', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartDataPoint', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_chart_series
  # Add a new series to a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must be a chart).
  # @param series Series DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'create_chart_series test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateChartSeries', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateChartSeries', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateChartSeries', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramseries = AsposeSlidesCloud::SpecUtils.invalidize_param_value('series', 'CreateChartSeries', paramseries, 'Series')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'series', paramseries)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'series')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'series', paramseries, 'Series')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'series', paramseries, 'Series')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateChartSeries', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateChartSeries', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'CreateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateChartSeries', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateChartSeries', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateChartSeries', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateChartSeries', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_comment
  # Adds the comment on the slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param dto Comment DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_index Shape index.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideComments]
  describe 'create_comment test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateComment', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateComment', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateComment', paramdto, 'SlideCommentBase')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'dto', paramdto, 'SlideCommentBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'dto', paramdto, 'SlideCommentBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateComment', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateComment', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateComment', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateComment', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateComment', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateComment', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateComment', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateComment', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateComment', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateComment', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateComment', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_with_http_info(paramname, paramslide_index, paramdto, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateComment', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateComment', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_comment_online
  # Adds the comment on the slide.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param dto Comment DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_index Shape index.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'create_comment_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'CreateCommentOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCommentOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateCommentOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCommentOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateCommentOnline', paramdto, 'SlideCommentBase')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCommentOnline', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'dto', paramdto, 'SlideCommentBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'dto', paramdto, 'SlideCommentBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateCommentOnline', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCommentOnline', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateCommentOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateCommentOnline', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateCommentOnline', 'SlideCommentBase')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateCommentOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateCommentOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateCommentOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateCommentOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_comment_online_with_http_info(paramdocument, paramslide_index, paramdto, paramshape_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateCommentOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateCommentOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_folder
  # Create the folder
  # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [nil]
  describe 'create_folder test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_folder_with_http_info(parampath, paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'CreateFolder', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_folder_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateFolder', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'CreateFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'CreateFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'CreateFolder', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateFolder', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_folder_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateFolder', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateFolder', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_image_watermark
  # Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image Image data.
  # @option opts [PictureFrame] :picture_frame PictureFrame DTO
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'create_image_watermark test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateImageWatermark', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('image', 'CreateImageWatermark', paramimage, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'image', paramimage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'image')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'image', paramimage, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'image', paramimage, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid picture_frame' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pictureFrame', 'CreateImageWatermark', parampicture_frame, 'PictureFrame')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'pictureFrame', parampicture_frame)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'pictureFrame')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'pictureFrame', parampicture_frame, 'PictureFrame')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'pictureFrame', parampicture_frame, 'PictureFrame')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateImageWatermark', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateImageWatermark', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateImageWatermark', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermark', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermark', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateImageWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateImageWatermark', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermark', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_with_http_info(paramname, paramimage, parampicture_frame, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermark', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermark', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_image_watermark_online
  # Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image Image data.
  # @option opts [PictureFrame] :picture_frame PictureFrame DTO.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'create_image_watermark_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateImageWatermarkOnline', 'File')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermarkOnline', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermarkOnline', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermarkOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermarkOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_online_with_http_info(paramdocument, paramimage, parampicture_frame, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateImageWatermarkOnline', 'File')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermarkOnline', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermarkOnline', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermarkOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'CreateImageWatermarkOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermarkOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_online_with_http_info(paramdocument, paramimage, parampicture_frame, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermarkOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateImageWatermarkOnline', 'File')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermarkOnline', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermarkOnline', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermarkOnline', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('image', 'CreateImageWatermarkOnline', paramimage, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermarkOnline', 'image', paramimage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_online_with_http_info(paramdocument, paramimage, parampicture_frame, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermarkOnline', 'image')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'image', paramimage, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'image', paramimage, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid picture_frame' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateImageWatermarkOnline', 'File')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermarkOnline', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermarkOnline', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermarkOnline', 'String')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pictureFrame', 'CreateImageWatermarkOnline', parampicture_frame, 'PictureFrame')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermarkOnline', 'pictureFrame', parampicture_frame)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_online_with_http_info(paramdocument, paramimage, parampicture_frame, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermarkOnline', 'pictureFrame')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'pictureFrame', parampicture_frame, 'PictureFrame')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'pictureFrame', parampicture_frame, 'PictureFrame')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateImageWatermarkOnline', 'File')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'CreateImageWatermarkOnline', 'File')
      parampicture_frame = AsposeSlidesCloud::SpecUtils.get_param_value('pictureFrame', 'CreateImageWatermarkOnline', 'PictureFrame')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateImageWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateImageWatermarkOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateImageWatermarkOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_image_watermark_online_with_http_info(paramdocument, paramimage, parampicture_frame, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateImageWatermarkOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateImageWatermarkOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_notes_slide
  # Add new notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param dto A NotesSlide object with notes slide data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'create_notes_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateNotesSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateNotesSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateNotesSlide', paramdto, 'NotesSlide')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'dto', paramdto, 'NotesSlide')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'dto', paramdto, 'NotesSlide')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateNotesSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateNotesSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateNotesSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateNotesSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateNotesSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_paragraph
  # Creates new paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position Position of the new paragraph in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'create_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateParagraph', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreateParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_portion
  # Creates new portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position Position of the new portion in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'create_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreatePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreatePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreatePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'CreatePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreatePortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreatePortion', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreatePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreatePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreatePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreatePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreatePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreatePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_presentation
  # Create a presentation.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :data Source presentation binary data.
  # @option opts [String] :input_password The password for source presentation.
  # @option opts [String] :password The document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'create_presentation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreatePresentation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid data' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.invalidize_param_value('data', 'CreatePresentation', paramdata, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'data', paramdata)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'data')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'data', paramdata, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'data', paramdata, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid input_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      paraminput_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('inputPassword', 'CreatePresentation', paraminput_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'inputPassword', paraminput_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'inputPassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'inputPassword', paraminput_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'inputPassword', paraminput_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreatePresentation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreatePresentation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentation', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentation', 'File')
      paraminput_password = AsposeSlidesCloud::SpecUtils.get_param_value('inputPassword', 'CreatePresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreatePresentation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_with_http_info(paramname, paramdata, paraminput_password, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_presentation_from_source
  # Create a presentation from an existing source.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :source_path Source file path.
  # @option opts [String] :source_password Source file password.
  # @option opts [String] :source_storage Source storage name.
  # @option opts [String] :password The document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'create_presentation_from_source test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreatePresentationFromSource', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePath', 'CreatePresentationFromSource', paramsource_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'sourcePath', paramsource_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'sourcePath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourcePath', paramsource_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourcePath', paramsource_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourcePassword', 'CreatePresentationFromSource', paramsource_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'sourcePassword', paramsource_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'sourcePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourcePassword', paramsource_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourcePassword', paramsource_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceStorage', 'CreatePresentationFromSource', paramsource_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'sourceStorage', paramsource_storage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'sourceStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourceStorage', paramsource_storage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'sourceStorage', paramsource_storage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreatePresentationFromSource', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreatePresentationFromSource', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromSource', 'String')
      paramsource_path = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePath', 'CreatePresentationFromSource', 'String')
      paramsource_password = AsposeSlidesCloud::SpecUtils.get_param_value('sourcePassword', 'CreatePresentationFromSource', 'String')
      paramsource_storage = AsposeSlidesCloud::SpecUtils.get_param_value('sourceStorage', 'CreatePresentationFromSource', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromSource', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromSource', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreatePresentationFromSource', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromSource', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_source_with_http_info(paramname, paramsource_path, paramsource_password, paramsource_storage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromSource', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromSource', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_presentation_from_template
  # Create a presentation.
  # @param name Document name.
  # @param template_path Template file path.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :data Document input data.
  # @option opts [String] :template_password Template file password.
  # @option opts [String] :template_storage Template storage name.
  # @option opts [BOOLEAN] :is_image_data_embedded True if image data is embedded.
  # @option opts [String] :password The document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'create_presentation_from_template test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreatePresentationFromTemplate', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid template_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templatePath', 'CreatePresentationFromTemplate', paramtemplate_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'templatePath', paramtemplate_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'templatePath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templatePath', paramtemplate_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templatePath', paramtemplate_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid data' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.invalidize_param_value('data', 'CreatePresentationFromTemplate', paramdata, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'data', paramdata)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'data')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'data', paramdata, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'data', paramdata, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid template_password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templatePassword', 'CreatePresentationFromTemplate', paramtemplate_password, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'templatePassword', paramtemplate_password)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'templatePassword')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templatePassword', paramtemplate_password, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templatePassword', paramtemplate_password, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid template_storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('templateStorage', 'CreatePresentationFromTemplate', paramtemplate_storage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'templateStorage', paramtemplate_storage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'templateStorage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templateStorage', paramtemplate_storage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'templateStorage', paramtemplate_storage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid is_image_data_embedded' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.invalidize_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', paramis_image_data_embedded, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'isImageDataEmbedded', paramis_image_data_embedded)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'isImageDataEmbedded')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'isImageDataEmbedded', paramis_image_data_embedded, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'isImageDataEmbedded', paramis_image_data_embedded, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreatePresentationFromTemplate', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreatePresentationFromTemplate', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_path = AsposeSlidesCloud::SpecUtils.get_param_value('templatePath', 'CreatePresentationFromTemplate', 'String')
      paramdata = AsposeSlidesCloud::SpecUtils.get_param_value('data', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_password = AsposeSlidesCloud::SpecUtils.get_param_value('templatePassword', 'CreatePresentationFromTemplate', 'String')
      paramtemplate_storage = AsposeSlidesCloud::SpecUtils.get_param_value('templateStorage', 'CreatePresentationFromTemplate', 'String')
      paramis_image_data_embedded = AsposeSlidesCloud::SpecUtils.get_param_value('isImageDataEmbedded', 'CreatePresentationFromTemplate', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreatePresentationFromTemplate', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreatePresentationFromTemplate', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreatePresentationFromTemplate', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreatePresentationFromTemplate', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_presentation_from_template_with_http_info(paramname, paramtemplate_path, paramdata, paramtemplate_password, paramtemplate_storage, paramis_image_data_embedded, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreatePresentationFromTemplate', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreatePresentationFromTemplate', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_section
  # Create a section starting at a specified slide index.
  # @param name Document name.
  # @param section_name Section name.
  # @param slide_index Slide index (one-based).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'create_section test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid section_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sectionName', 'CreateSection', paramsection_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'sectionName', paramsection_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'sectionName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'sectionName', paramsection_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'sectionName', paramsection_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSection', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'CreateSection', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_section_with_http_info(paramname, paramsection_name, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_shape
  # Create new shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [ShapeBase] :dto Shape DTO.
  # @option opts [Integer] :shape_to_clone Optional index for clone shape instead of adding a new one.
  # @option opts [Integer] :position Position of the new shape in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'create_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateShape', paramdto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'dto', paramdto, 'ShapeBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'dto', paramdto, 'ShapeBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_to_clone' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeToClone', 'CreateShape', paramshape_to_clone, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'shapeToClone', paramshape_to_clone)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'shapeToClone')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'shapeToClone', paramshape_to_clone, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'shapeToClone', paramshape_to_clone, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateShape', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreateShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_shape_with_http_info(paramname, paramslide_index, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_slide
  # Create a slide.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :layout_alias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index
  # @option opts [Integer] :position The target position at which to create the slide. Add to the end by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'create_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid layout_alias' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.invalidize_param_value('layoutAlias', 'CreateSlide', paramlayout_alias, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'layoutAlias', paramlayout_alias)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'layoutAlias')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'layoutAlias', paramlayout_alias, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'layoutAlias', paramlayout_alias, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateSlide', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSlide', 'String')
      paramlayout_alias = AsposeSlidesCloud::SpecUtils.get_param_value('layoutAlias', 'CreateSlide', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_slide_with_http_info(paramname, paramlayout_alias, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_smart_art_node
  # Add SmartArt node
  # @param name Document name.
  # @param slide_index Slide index.
  # @param smart_art_index Index of the object on the slide among the same type of objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sub_node Sub-node path (e.g. \&quot;3\&quot;, \&quot;3/nodes/2).
  # @option opts [String] :text Node text.
  # @option opts [Integer] :position Position to insert a new node.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SmartArt]
  describe 'create_smart_art_node test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSmartArtNode', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSmartArtNode', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid smart_art_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('smartArtIndex', 'CreateSmartArtNode', paramsmart_art_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'smartArtIndex', paramsmart_art_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'smartArtIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'smartArtIndex', paramsmart_art_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'smartArtIndex', paramsmart_art_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_node' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramsub_node = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subNode', 'CreateSmartArtNode', paramsub_node, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'subNode', paramsub_node)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'subNode')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'subNode', paramsub_node, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'subNode', paramsub_node, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid text' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.invalidize_param_value('text', 'CreateSmartArtNode', paramtext, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'text', paramtext)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'text')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'text', paramtext, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'text', paramtext, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateSmartArtNode', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSmartArtNode', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSmartArtNode', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'CreateSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'CreateSmartArtNode', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateSmartArtNode', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSmartArtNode', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSmartArtNode', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSmartArtNode', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramsub_node, paramtext, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSmartArtNode', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSmartArtNode', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_animation_effect
  # Add an effect to special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_special_slide_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlideAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlideAnimationEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'CreateSpecialSlideAnimationEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlideAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlideAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlideAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_animation_interactive_sequence
  # Set special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param sequence Animation sequence DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_special_slide_animation_interactive_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', paramsequence, 'InteractiveSequence')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'sequence', paramsequence)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'sequence')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'sequence', paramsequence, 'InteractiveSequence')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'sequence', paramsequence, 'InteractiveSequence')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence = AsposeSlidesCloud::SpecUtils.get_param_value('sequence', 'CreateSpecialSlideAnimationInteractiveSequence', 'InteractiveSequence')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_animation_interactive_sequence_effect
  # Add an animation effect to a special slide (master, layout, notes) interactive sequence.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param sequence_index The position of the interactive sequence.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'create_special_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlideAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_paragraph
  # Creates new paragraph.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position Position of the new paragraph in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'create_special_slide_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlideParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlideParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlideParagraph', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateSpecialSlideParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateSpecialSlideParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateSpecialSlideParagraph', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlideParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlideParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlideParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideParagraph', 'Paragraph')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreateSpecialSlideParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_portion
  # Creates new portion.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position Position of the new portion in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'create_special_slide_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlidePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlidePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlidePortion', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateSpecialSlidePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'CreateSpecialSlidePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateSpecialSlidePortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateSpecialSlidePortion', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlidePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlidePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlidePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlidePortion', 'Portion')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreateSpecialSlidePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlidePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlidePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_special_slide_shape
  # Create new shape.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param dto Shape DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_to_clone Optional index for clone shape instead of adding a new one.
  # @option opts [Integer] :position Position of the new shape in the list. Default is at the end of the list.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'create_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'CreateSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateSpecialSlideShape', paramdto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'dto', paramdto, 'ShapeBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'dto', paramdto, 'ShapeBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_to_clone' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeToClone', 'CreateSpecialSlideShape', paramshape_to_clone, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'shapeToClone', paramshape_to_clone)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'shapeToClone')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'shapeToClone', paramshape_to_clone, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'shapeToClone', paramshape_to_clone, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateSpecialSlideShape', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'CreateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateSpecialSlideShape', 'ShapeBase')
      paramshape_to_clone = AsposeSlidesCloud::SpecUtils.get_param_value('shapeToClone', 'CreateSpecialSlideShape', 'Integer')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'CreateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'CreateSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramdto, paramshape_to_clone, paramposition, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_table_cell_paragraph
  # Creates table cell paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'create_table_cell_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateTableCellParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateTableCellParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateTableCellParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'CreateTableCellParagraph', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'CreateTableCellParagraph', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateTableCellParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateTableCellParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateTableCellParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateTableCellParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_table_cell_portion
  # Creates table cell portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'create_table_cell_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateTableCellPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateTableCellPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateTableCellPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'CreateTableCellPortion', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'CreateTableCellPortion', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'CreateTableCellPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateTableCellPortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateTableCellPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateTableCellPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'CreateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'CreateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'CreateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateTableCellPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableCellPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableCellPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableCellPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_table_row
  # Inserts the table row in the specified position. If position is not specified, the row add to the end of the table.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param dto Table row data.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :position Position.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TableRow]
  describe 'create_table_row test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateTableRow', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'CreateTableRow', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'CreateTableRow', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'CreateTableRow', paramdto, 'TableRow')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'dto', paramdto, 'TableRow')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'dto', paramdto, 'TableRow')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'CreateTableRow', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateTableRow', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateTableRow', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'CreateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'CreateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'CreateTableRow', 'TableRow')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'CreateTableRow', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateTableRow', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateTableRow', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, paramposition, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateTableRow', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateTableRow', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_vba_module
  # Append module to VBA project             
  # @param name Document name.
  # @param module_dto VBA module DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [VbaModule]
  describe 'create_vba_module test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateVbaModule', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateVbaModule', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid module_dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('moduleDto', 'CreateVbaModule', parammodule_dto, 'VbaModule')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', 'moduleDto', parammodule_dto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateVbaModule', 'moduleDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'moduleDto', parammodule_dto, 'VbaModule')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'moduleDto', parammodule_dto, 'VbaModule')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateVbaModule', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateVbaModule', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateVbaModule', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateVbaModule', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'CreateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateVbaModule', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateVbaModule', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_vba_module_with_http_info(paramname, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateVbaModule', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateVbaModule', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_watermark
  # Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [Shape] :shape Shape DTO
  # @option opts [Float] :font_height Watermark font height.
  # @option opts [String] :text Watermark text.
  # @option opts [String] :font_name Watermark font name.
  # @option opts [String] :font_color Watermark font color.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'create_watermark test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'CreateWatermark', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shape', 'CreateWatermark', paramshape, 'Shape')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'shape', paramshape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'shape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'shape', paramshape, 'Shape')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'shape', paramshape, 'Shape')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramfont_height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontHeight', 'CreateWatermark', paramfont_height, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'fontHeight', paramfont_height)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'fontHeight')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontHeight', paramfont_height, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontHeight', paramfont_height, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid text' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.invalidize_param_value('text', 'CreateWatermark', paramtext, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'text', paramtext)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'text')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'text', paramtext, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'text', paramtext, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'CreateWatermark', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontColor', 'CreateWatermark', paramfont_color, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'fontColor', paramfont_color)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'fontColor')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontColor', paramfont_color, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'fontColor', paramfont_color, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateWatermark', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'CreateWatermark', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'CreateWatermark', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermark', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermark', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermark', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermark', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'CreateWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'CreateWatermark', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermark', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_with_http_info(paramname, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermark', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermark', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for create_watermark_online
  # Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [Shape] :shape Shape DTO
  # @option opts [Float] :font_height Watermark font height.
  # @option opts [String] :text Watermark text.
  # @option opts [String] :font_name Watermark font name.
  # @option opts [String] :font_color Watermark font color.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'create_watermark_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'CreateWatermarkOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramshape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shape', 'CreateWatermarkOnline', paramshape, 'Shape')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'shape', paramshape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'shape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'shape', paramshape, 'Shape')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'shape', paramshape, 'Shape')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramfont_height = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontHeight', 'CreateWatermarkOnline', paramfont_height, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'fontHeight', paramfont_height)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'fontHeight')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontHeight', paramfont_height, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontHeight', paramfont_height, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid text' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.invalidize_param_value('text', 'CreateWatermarkOnline', paramtext, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'text', paramtext)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'text')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'text', paramtext, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'text', paramtext, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'CreateWatermarkOnline', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_color' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontColor', 'CreateWatermarkOnline', paramfont_color, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'fontColor', paramfont_color)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'fontColor')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontColor', paramfont_color, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'fontColor', paramfont_color, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'CreateWatermarkOnline', 'File')
      paramshape = AsposeSlidesCloud::SpecUtils.get_param_value('shape', 'CreateWatermarkOnline', 'Shape')
      paramfont_height = AsposeSlidesCloud::SpecUtils.get_param_value('fontHeight', 'CreateWatermarkOnline', 'Float')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'CreateWatermarkOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'CreateWatermarkOnline', 'String')
      paramfont_color = AsposeSlidesCloud::SpecUtils.get_param_value('fontColor', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'CreateWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'CreateWatermarkOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('CreateWatermarkOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.create_watermark_online_with_http_info(paramdocument, paramshape, paramfont_height, paramtext, paramfont_name, paramfont_color, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('CreateWatermarkOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('CreateWatermarkOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation
  # Remove animation from a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation_effect
  # Remove an effect from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteAnimationEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation_interactive_sequence
  # Remove an interactive sequence from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The index of an interactive sequence to be deleted.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation_interactive_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimationInteractiveSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimationInteractiveSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimationInteractiveSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimationInteractiveSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation_interactive_sequence_effect
  # Remove an effect from slide animation interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index Interactive sequence index.
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation_interactive_sequences
  # Clear all interactive sequences from slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation_interactive_sequences test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimationInteractiveSequences', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequences', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequences', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimationInteractiveSequences', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequences', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimationInteractiveSequences', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequences', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationInteractiveSequences', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimationInteractiveSequences', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationInteractiveSequences', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_interactive_sequences_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationInteractiveSequences', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationInteractiveSequences', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_animation_main_sequence
  # Clear main sequence in slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_animation_main_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteAnimationMainSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationMainSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteAnimationMainSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationMainSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteAnimationMainSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationMainSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteAnimationMainSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationMainSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteAnimationMainSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteAnimationMainSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteAnimationMainSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_animation_main_sequence_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteAnimationMainSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteAnimationMainSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_background
  # Remove background from a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'delete_background test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteBackground', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteBackground', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteBackground', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteBackground', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteBackground', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteBackground', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteBackground', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_caption_track
  # Delete video/audio captions track.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must refer to a video or audio frame).
  # @param captions_index Captions track index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Presentation storage.
  # @return [nil]
  describe 'delete_caption_track test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteCaptionTrack', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteCaptionTrack', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteCaptionTrack', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid captions_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('captionsIndex', 'DeleteCaptionTrack', paramcaptions_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'captionsIndex', paramcaptions_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'captionsIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'captionsIndex', paramcaptions_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'captionsIndex', paramcaptions_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteCaptionTrack', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteCaptionTrack', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTrack', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTrack', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTrack', 'Integer')
      paramcaptions_index = AsposeSlidesCloud::SpecUtils.get_param_value('captionsIndex', 'DeleteCaptionTrack', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTrack', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTrack', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteCaptionTrack', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTrack', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_track_with_http_info(paramname, paramslide_index, paramshape_index, paramcaptions_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTrack', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTrack', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_caption_tracks
  # Delete all video/audio captions tracks.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must refer to a video frame).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Presentation storage.
  # @return [nil]
  describe 'delete_caption_tracks test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteCaptionTracks', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteCaptionTracks', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteCaptionTracks', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteCaptionTracks', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteCaptionTracks', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteCaptionTracks', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteCaptionTracks', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCaptionTracks', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCaptionTracks', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCaptionTracks', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_chart_category
  # Delete a category from a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param category_index Category index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'delete_chart_category test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteChartCategory', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteChartCategory', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteChartCategory', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid category_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('categoryIndex', 'DeleteChartCategory', paramcategory_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'categoryIndex', paramcategory_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'categoryIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'categoryIndex', paramcategory_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'categoryIndex', paramcategory_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteChartCategory', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteChartCategory', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'DeleteChartCategory', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteChartCategory', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartCategory', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartCategory', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartCategory', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_chart_data_point
  # Delete a data point from a chart series.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param series_index Series index.
  # @param point_index Data point index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'delete_chart_data_point test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteChartDataPoint', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteChartDataPoint', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteChartDataPoint', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramseries_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesIndex', 'DeleteChartDataPoint', paramseries_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'seriesIndex', paramseries_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'seriesIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid point_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      parampoint_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pointIndex', 'DeleteChartDataPoint', parampoint_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'pointIndex', parampoint_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'pointIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'pointIndex', parampoint_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'pointIndex', parampoint_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteChartDataPoint', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteChartDataPoint', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'DeleteChartDataPoint', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteChartDataPoint', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartDataPoint', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartDataPoint', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartDataPoint', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_chart_series
  # Delete a series from a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must be a chart).
  # @param series_index Series index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'delete_chart_series test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteChartSeries', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteChartSeries', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteChartSeries', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramseries_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesIndex', 'DeleteChartSeries', paramseries_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'seriesIndex', paramseries_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'seriesIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'seriesIndex', paramseries_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'seriesIndex', paramseries_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteChartSeries', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteChartSeries', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'DeleteChartSeries', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteChartSeries', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteChartSeries', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteChartSeries', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteChartSeries', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_comments
  # Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author Author of comments.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'delete_comments test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteComments', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteComments', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid author' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('author', 'DeleteComments', paramauthor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', 'author', paramauthor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteComments', 'author')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'author', paramauthor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'author', paramauthor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteComments', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteComments', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteComments', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteComments', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteComments', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteComments', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_with_http_info(paramname, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteComments', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteComments', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_comments_online
  # Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author Author of comments.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_comments_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteCommentsOnline', 'File')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCommentsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCommentsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_online_with_http_info(paramdocument, paramauthor, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteCommentsOnline', 'File')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCommentsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteCommentsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCommentsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_online_with_http_info(paramdocument, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCommentsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid author' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteCommentsOnline', 'File')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCommentsOnline', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('author', 'DeleteCommentsOnline', paramauthor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCommentsOnline', 'author', paramauthor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_online_with_http_info(paramdocument, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCommentsOnline', 'author')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'author', paramauthor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'author', paramauthor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteCommentsOnline', 'File')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteCommentsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteCommentsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_comments_online_with_http_info(paramdocument, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteCommentsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteCommentsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_document_properties
  # Clean document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'delete_document_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteDocumentProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteDocumentProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteDocumentProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteDocumentProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_document_property
  # Delete document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'delete_document_property test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteDocumentProperty', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid property_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'DeleteDocumentProperty', paramproperty_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', 'propertyName', paramproperty_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteDocumentProperty', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteDocumentProperty', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'DeleteDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteDocumentProperty', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteDocumentProperty', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteDocumentProperty', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_embedded_font
  # Removes specified embedded font and returns presentation fonts info.
  # @param name Document name.
  # @param font_name Font name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FontsData]
  describe 'delete_embedded_font test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteEmbeddedFont', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFont', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'DeleteEmbeddedFont', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFont', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteEmbeddedFont', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFont', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteEmbeddedFont', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFont', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteEmbeddedFont', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFont', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_with_http_info(paramname, paramfont_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFont', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFont', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_embedded_font_online
  # Removes specified embedded font and returns presentation.
  # @param document Document data.
  # @param font_name Font name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_embedded_font_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFontOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFontOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_online_with_http_info(paramdocument, paramfont_name, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFontOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteEmbeddedFontOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFontOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_online_with_http_info(paramdocument, paramfont_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFontOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFontOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'DeleteEmbeddedFontOnline', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFontOnline', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_online_with_http_info(paramdocument, paramfont_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFontOnline', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'DeleteEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteEmbeddedFontOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteEmbeddedFontOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_embedded_font_online_with_http_info(paramdocument, paramfont_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteEmbeddedFontOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteEmbeddedFontOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_file
  # Delete file
  # @param path File path e.g. &#39;/folder/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to delete
  # @return [nil]
  describe 'delete_file test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_file_with_http_info(parampath, paramstorage_name, paramversion_id)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteFile', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DeleteFile', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid version_id' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DeleteFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'DeleteFile', paramversion_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFile', 'versionId', paramversion_id)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'versionId', paramversion_id, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFile', 'versionId', paramversion_id, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_folder
  # Delete folder
  # @param path Folder path e.g. &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files
  # @return [nil]
  describe 'delete_folder test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      paramrecursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_folder_with_http_info(parampath, paramstorage_name, paramrecursive)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      paramrecursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DeleteFolder', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_folder_with_http_info(parampath, paramstorage_name, paramrecursive)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      paramrecursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DeleteFolder', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_folder_with_http_info(parampath, paramstorage_name, paramrecursive)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid recursive' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DeleteFolder', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DeleteFolder', 'String')
      paramrecursive = AsposeSlidesCloud::SpecUtils.get_param_value('recursive', 'DeleteFolder', 'BOOLEAN')
      paramrecursive = AsposeSlidesCloud::SpecUtils.invalidize_param_value('recursive', 'DeleteFolder', paramrecursive, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteFolder', 'recursive', paramrecursive)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_folder_with_http_info(parampath, paramstorage_name, paramrecursive)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteFolder', 'recursive')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'recursive', paramrecursive, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteFolder', 'recursive', paramrecursive, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_notes_slide
  # Remove notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'delete_notes_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteNotesSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteNotesSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteNotesSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteNotesSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteNotesSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteNotesSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteNotesSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_paragraph
  # Remove a paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'delete_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_paragraphs
  # Remove a range of paragraphs.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :paragraphs The indices of the paragraphs to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'delete_paragraphs test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteParagraphs', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteParagraphs', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteParagraphs', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraphs' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphs', 'DeleteParagraphs', paramparagraphs, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'paragraphs', paramparagraphs)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'paragraphs')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'paragraphs', paramparagraphs, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'paragraphs', paramparagraphs, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteParagraphs', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteParagraphs', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteParagraphs', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteParagraphs', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteParagraphs', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteParagraphs', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteParagraphs', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_portion
  # Remove a portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'delete_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeletePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeletePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeletePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeletePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeletePortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeletePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeletePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeletePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeletePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeletePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_portions
  # Remove a range of portions.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :portions The indices of the portions to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'delete_portions test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeletePortions', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeletePortions', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeletePortions', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeletePortions', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portions' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramportions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portions', 'DeletePortions', paramportions, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'portions', paramportions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'portions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'portions', paramportions, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'portions', paramportions, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeletePortions', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeletePortions', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeletePortions', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeletePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeletePortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeletePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeletePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeletePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeletePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeletePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeletePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeletePortions', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeletePortions', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeletePortions', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeletePortions', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_protection
  # Resets all presentation protection settings. 
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Presentation password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ProtectionProperties]
  describe 'delete_protection test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteProtection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteProtection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteProtection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteProtection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteProtection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteProtection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_protection_online
  # Resets all presentation protection settings. 
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Presentation password.
  # @return [File]
  describe 'delete_protection_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteProtectionOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtectionOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtectionOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_online_with_http_info(paramdocument, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtectionOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteProtectionOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtectionOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteProtectionOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtectionOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtectionOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtectionOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtectionOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteProtectionOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteProtectionOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteProtectionOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteProtectionOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_protection_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteProtectionOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtectionOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteProtectionOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_section
  # Delete a presentation section.
  # @param name Document name.
  # @param section_index Section index.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_slides True to delete the slides related to the deleted section; move them to the remaining sections otherwise.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'delete_section test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid section_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sectionIndex', 'DeleteSection', paramsection_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'sectionIndex', paramsection_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'sectionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_slides' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withSlides', 'DeleteSection', paramwith_slides, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'withSlides', paramwith_slides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'withSlides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'withSlides', paramwith_slides, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'withSlides', paramwith_slides, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'DeleteSection', 'Integer')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSection', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_section_with_http_info(paramname, paramsection_index, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_sections
  # Delete presentation sections.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :sections The indices of the sections to be deleted; delete all by default.
  # @option opts [BOOLEAN] :with_slides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'delete_sections test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSections', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sections' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sections', 'DeleteSections', paramsections, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'sections', paramsections)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'sections')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'sections', paramsections, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'sections', paramsections, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_slides' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withSlides', 'DeleteSections', paramwith_slides, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'withSlides', paramwith_slides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'withSlides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'withSlides', paramwith_slides, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'withSlides', paramwith_slides, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSections', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSections', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'DeleteSections', 'Integer[]')
      paramwith_slides = AsposeSlidesCloud::SpecUtils.get_param_value('withSlides', 'DeleteSections', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSections', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSections', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_sections_with_http_info(paramname, paramsections, paramwith_slides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSections', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSections', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_shape
  # Remove a shape.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'delete_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_shapes
  # Remove a range of shapes.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :shapes The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'delete_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shapes' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'DeleteShapes', paramshapes, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'shapes', paramshapes)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'shapes', paramshapes, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'shapes', paramshapes, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteShapes', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_shapes_with_http_info(paramname, paramslide_index, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_slide
  # Delete a presentation slide by index.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'delete_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_slide_comments
  # Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author Author of comments.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideComments]
  describe 'delete_slide_comments test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlideComments', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideComments', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid author' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('author', 'DeleteSlideComments', paramauthor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'author', paramauthor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'author')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'author', paramauthor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'author', paramauthor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideComments', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlideComments', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideComments', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlideComments', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideComments', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_with_http_info(paramname, paramslide_index, paramauthor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideComments', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideComments', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_slide_comments_online
  # Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
  # @param document Document data.
  # @param slide_index 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author Author of comments.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_slide_comments_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteSlideCommentsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideCommentsOnline', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideCommentsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideCommentsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_online_with_http_info(paramdocument, paramslide_index, paramauthor, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteSlideCommentsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideCommentsOnline', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideCommentsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteSlideCommentsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideCommentsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_online_with_http_info(paramdocument, paramslide_index, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideCommentsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteSlideCommentsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideCommentsOnline', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideCommentsOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSlideCommentsOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideCommentsOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_online_with_http_info(paramdocument, paramslide_index, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideCommentsOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid author' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteSlideCommentsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideCommentsOnline', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideCommentsOnline', 'String')
      paramauthor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('author', 'DeleteSlideCommentsOnline', paramauthor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideCommentsOnline', 'author', paramauthor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_online_with_http_info(paramdocument, paramslide_index, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideCommentsOnline', 'author')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'author', paramauthor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'author', paramauthor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteSlideCommentsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSlideCommentsOnline', 'Integer')
      paramauthor = AsposeSlidesCloud::SpecUtils.get_param_value('author', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlideCommentsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlideCommentsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlideCommentsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slide_comments_online_with_http_info(paramdocument, paramslide_index, paramauthor, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlideCommentsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlideCommentsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_slides
  # Delete presentation slides.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :slides The indices of the slides to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'delete_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slides' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'DeleteSlides', paramslides, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', 'slides', paramslides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlides', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'slides', paramslides, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'slides', paramslides, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSlides', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DeleteSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_slides_with_http_info(paramname, paramslides, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_smart_art_node
  # Delete SmartArt node
  # @param name Document name.
  # @param slide_index Slide index.
  # @param smart_art_index Index of the object on the slide among the same type of objects.
  # @param node_index Root level node index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sub_node Sub-node path (e.g. \&quot;3\&quot;, \&quot;3/nodes/2).
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SmartArt]
  describe 'delete_smart_art_node test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSmartArtNode', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSmartArtNode', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid smart_art_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('smartArtIndex', 'DeleteSmartArtNode', paramsmart_art_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'smartArtIndex', paramsmart_art_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'smartArtIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'smartArtIndex', paramsmart_art_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'smartArtIndex', paramsmart_art_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid node_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramnode_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('nodeIndex', 'DeleteSmartArtNode', paramnode_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'nodeIndex', paramnode_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'nodeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'nodeIndex', paramnode_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'nodeIndex', paramnode_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_node' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramsub_node = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subNode', 'DeleteSmartArtNode', paramsub_node, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'subNode', paramsub_node)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'subNode')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'subNode', paramsub_node, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'subNode', paramsub_node, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSmartArtNode', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSmartArtNode', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSmartArtNode', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSmartArtNode', 'Integer')
      paramsmart_art_index = AsposeSlidesCloud::SpecUtils.get_param_value('smartArtIndex', 'DeleteSmartArtNode', 'Integer')
      paramnode_index = AsposeSlidesCloud::SpecUtils.get_param_value('nodeIndex', 'DeleteSmartArtNode', 'Integer')
      paramsub_node = AsposeSlidesCloud::SpecUtils.get_param_value('subNode', 'DeleteSmartArtNode', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSmartArtNode', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSmartArtNode', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSmartArtNode', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSmartArtNode', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_smart_art_node_with_http_info(paramname, paramslide_index, paramsmart_art_index, paramnode_index, paramsub_node, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSmartArtNode', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSmartArtNode', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation
  # Remove animation from a special slide (master, layout, notes).
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimation', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation_effect
  # Remove an effect from special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation_interactive_sequence
  # Remove an interactive sequence from special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param sequence_index The index of an interactive sequence to be deleted.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation_interactive_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequence', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation_interactive_sequence_effect
  # Remove an effect from special slide (master, layout, notes) animation interactive sequence.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param sequence_index Interactive sequence index.
  # @param effect_index Index of the effect to be removed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation_interactive_sequences
  # Clear all interactive sequences from special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation_interactive_sequences test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationInteractiveSequences', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimationInteractiveSequences', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationInteractiveSequences', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_interactive_sequences_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationInteractiveSequences', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationInteractiveSequences', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_animation_main_sequence
  # Clear main sequence in special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'delete_special_slide_animation_main_sequence test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideAnimationMainSequence', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideAnimationMainSequence', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideAnimationMainSequence', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_animation_main_sequence_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideAnimationMainSequence', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideAnimationMainSequence', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_paragraph
  # Remove a paragraph.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'delete_special_slide_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideParagraph', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlideParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_paragraphs
  # Remove a range of paragraphs.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :paragraphs The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'delete_special_slide_paragraphs test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideParagraphs', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideParagraphs', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraphs' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', paramparagraphs, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'paragraphs', paramparagraphs)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'paragraphs')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'paragraphs', paramparagraphs, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'paragraphs', paramparagraphs, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideParagraphs', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideParagraphs', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideParagraphs', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideParagraphs', 'Integer')
      paramparagraphs = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphs', 'DeleteSpecialSlideParagraphs', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlideParagraphs', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideParagraphs', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraphs, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideParagraphs', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideParagraphs', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_portion
  # Remove a portion.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'delete_special_slide_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlidePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlidePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlidePortion', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSpecialSlidePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeleteSpecialSlidePortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlidePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlidePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlidePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlidePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_portions
  # Remove a range of portions.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :portions The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'delete_special_slide_portions test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlidePortions', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlidePortions', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlidePortions', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSpecialSlidePortions', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portions' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramportions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portions', 'DeleteSpecialSlidePortions', paramportions, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'portions', paramportions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'portions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'portions', paramportions, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'portions', paramportions, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlidePortions', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlidePortions', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlidePortions', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteSpecialSlidePortions', 'Integer')
      paramportions = AsposeSlidesCloud::SpecUtils.get_param_value('portions', 'DeleteSpecialSlidePortions', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlidePortions', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlidePortions', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportions, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlidePortions', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlidePortions', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_shape
  # Remove a shape.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'delete_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteSpecialSlideShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_special_slide_shapes
  # Remove a range of shapes.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :shapes The indices of the shapes to be deleted; delete all by default.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'delete_special_slide_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteSpecialSlideShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteSpecialSlideShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DeleteSpecialSlideShapes', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shapes' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'DeleteSpecialSlideShapes', paramshapes, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'shapes', paramshapes)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'shapes', paramshapes, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'shapes', paramshapes, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteSpecialSlideShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteSpecialSlideShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteSpecialSlideShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DeleteSpecialSlideShapes', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'DeleteSpecialSlideShapes', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DeleteSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DeleteSpecialSlideShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteSpecialSlideShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, paramshapes, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteSpecialSlideShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_table_cell_paragraph
  # Delete cell paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'delete_table_cell_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteTableCellParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteTableCellParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteTableCellParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'DeleteTableCellParagraph', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'DeleteTableCellParagraph', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteTableCellParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteTableCellParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteTableCellParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteTableCellParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_table_cell_portion
  # Delete table ell portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'delete_table_cell_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteTableCellPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteTableCellPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteTableCellPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'DeleteTableCellPortion', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'DeleteTableCellPortion', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DeleteTableCellPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DeleteTableCellPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteTableCellPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteTableCellPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'DeleteTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DeleteTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DeleteTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteTableCellPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableCellPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableCellPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableCellPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_table_row
  # Deletes the table row.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_attached_rows Also delete all attached rows.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Table]
  describe 'delete_table_row test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteTableRow', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DeleteTableRow', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DeleteTableRow', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'DeleteTableRow', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_attached_rows' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withAttachedRows', 'DeleteTableRow', paramwith_attached_rows, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'withAttachedRows', paramwith_attached_rows)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'withAttachedRows')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'withAttachedRows', paramwith_attached_rows, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'withAttachedRows', paramwith_attached_rows, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteTableRow', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteTableRow', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DeleteTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DeleteTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'DeleteTableRow', 'Integer')
      paramwith_attached_rows = AsposeSlidesCloud::SpecUtils.get_param_value('withAttachedRows', 'DeleteTableRow', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteTableRow', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteTableRow', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramwith_attached_rows, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteTableRow', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteTableRow', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_unused_layout_slides
  # Removes unused layout slides.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlides]
  describe 'delete_unused_layout_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedLayoutSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedLayoutSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteUnusedLayoutSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteUnusedLayoutSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteUnusedLayoutSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteUnusedLayoutSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_unused_layout_slides_online
  # Removes unused layout slides.
  # @param document Document data
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_unused_layout_slides_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedLayoutSlidesOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlidesOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlidesOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_online_with_http_info(paramdocument, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlidesOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedLayoutSlidesOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlidesOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteUnusedLayoutSlidesOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlidesOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlidesOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlidesOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlidesOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedLayoutSlidesOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedLayoutSlidesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteUnusedLayoutSlidesOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedLayoutSlidesOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_layout_slides_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedLayoutSlidesOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlidesOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedLayoutSlidesOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_unused_master_slides
  # Removes unused master slides.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_preserve_field Determines, whether this method should remove unused master even if its             preserve property is set to true.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlides]
  describe 'delete_unused_master_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteUnusedMasterSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_preserve_field' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', paramignore_preserve_field, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', 'ignorePreserveField', paramignore_preserve_field)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlides', 'ignorePreserveField')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'ignorePreserveField', paramignore_preserve_field, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'ignorePreserveField', paramignore_preserve_field, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteUnusedMasterSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteUnusedMasterSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteUnusedMasterSlides', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlides', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteUnusedMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteUnusedMasterSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_with_http_info(paramname, paramignore_preserve_field, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_unused_master_slides_online
  # Removes unused master slides.
  # @param document Document data
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_preserve_field Determines, whether this method should remove unused master even if its             preserve property is set to true.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_unused_master_slides_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedMasterSlidesOnline', 'File')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlidesOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlidesOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlidesOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_online_with_http_info(paramdocument, paramignore_preserve_field, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedMasterSlidesOnline', 'File')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlidesOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlidesOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteUnusedMasterSlidesOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlidesOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_online_with_http_info(paramdocument, paramignore_preserve_field, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlidesOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_preserve_field' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedMasterSlidesOnline', 'File')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlidesOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlidesOnline', 'String')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignorePreserveField', 'DeleteUnusedMasterSlidesOnline', paramignore_preserve_field, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlidesOnline', 'ignorePreserveField', paramignore_preserve_field)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_online_with_http_info(paramdocument, paramignore_preserve_field, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlidesOnline', 'ignorePreserveField')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'ignorePreserveField', paramignore_preserve_field, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'ignorePreserveField', paramignore_preserve_field, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteUnusedMasterSlidesOnline', 'File')
      paramignore_preserve_field = AsposeSlidesCloud::SpecUtils.get_param_value('ignorePreserveField', 'DeleteUnusedMasterSlidesOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteUnusedMasterSlidesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteUnusedMasterSlidesOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteUnusedMasterSlidesOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_unused_master_slides_online_with_http_info(paramdocument, paramignore_preserve_field, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteUnusedMasterSlidesOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteUnusedMasterSlidesOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_vba_module
  # Delete module from VBA project.
  # @param name Document name.
  # @param module_index The index of the macros module to remove.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [VbaProject]
  describe 'delete_vba_module test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteVbaModule', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteVbaModule', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid module_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('moduleIndex', 'DeleteVbaModule', parammodule_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', 'moduleIndex', parammodule_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteVbaModule', 'moduleIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteVbaModule', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteVbaModule', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteVbaModule', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteVbaModule', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'DeleteVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteVbaModule', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteVbaModule', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteVbaModule', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteVbaModule', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_watermark
  # Removes shapes with name \&quot;watermark\&quot; from the presentation.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :shape_name Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'delete_watermark test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DeleteWatermark', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermark', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeName', 'DeleteWatermark', paramshape_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', 'shapeName', paramshape_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermark', 'shapeName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'shapeName', paramshape_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'shapeName', paramshape_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteWatermark', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermark', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DeleteWatermark', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermark', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DeleteWatermark', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermark', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermark', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DeleteWatermark', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DeleteWatermark', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermark', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_with_http_info(paramname, paramshape_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermark', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermark', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for delete_watermark_online
  # Removes shapes with name \&quot;watermark\&quot; from the presentation.
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :shape_name Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'delete_watermark_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteWatermarkOnline', 'File')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermarkOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermarkOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_online_with_http_info(paramdocument, paramshape_name, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteWatermarkOnline', 'File')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermarkOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DeleteWatermarkOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermarkOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_online_with_http_info(paramdocument, paramshape_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermarkOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_name' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteWatermarkOnline', 'File')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermarkOnline', 'String')
      paramshape_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeName', 'DeleteWatermarkOnline', paramshape_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermarkOnline', 'shapeName', paramshape_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_online_with_http_info(paramdocument, paramshape_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermarkOnline', 'shapeName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'shapeName', paramshape_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'shapeName', paramshape_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DeleteWatermarkOnline', 'File')
      paramshape_name = AsposeSlidesCloud::SpecUtils.get_param_value('shapeName', 'DeleteWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DeleteWatermarkOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DeleteWatermarkOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DeleteWatermarkOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.delete_watermark_online_with_http_info(paramdocument, paramshape_name, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DeleteWatermarkOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DeleteWatermarkOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_file
  # Download file
  # @param path File path e.g. &#39;/folder/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to download
  # @return [File]
  describe 'download_file test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_file_with_http_info(parampath, paramstorage_name, paramversion_id)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'DownloadFile', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'DownloadFile', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid version_id' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'DownloadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'DownloadFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'DownloadFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'DownloadFile', paramversion_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadFile', 'versionId', paramversion_id)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_file_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'versionId', paramversion_id, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadFile', 'versionId', paramversion_id, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_image
  # Get image in specified format.
  # @param name Document name.
  # @param index Image index.
  # @param format Export format (png, jpg, gif).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :quality Image quality (0 to 100; has effect only on Jpeg format).
  # @return [File]
  describe 'download_image test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadImage', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramindex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'DownloadImage', paramindex, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'index', paramindex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'index', paramindex, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'index', paramindex, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadImage', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImage', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadImage', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadImage', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid quality' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImage', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImage', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImage', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImage', 'Integer')
      paramquality = AsposeSlidesCloud::SpecUtils.invalidize_param_value('quality', 'DownloadImage', paramquality, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImage', 'quality', paramquality)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_with_http_info(paramname, paramindex, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImage', 'quality')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'quality', paramquality, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImage', 'quality', paramquality, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_image_default_format
  # Get image binary data.
  # @param name Document name.
  # @param index Image index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'download_image_default_format test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadImageDefaultFormat', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormat', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'DownloadImageDefaultFormat', paramindex, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', 'index', paramindex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormat', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'index', paramindex, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'index', paramindex, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImageDefaultFormat', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadImageDefaultFormat', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormat', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImageDefaultFormat', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormat', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImageDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadImageDefaultFormat', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormat', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_with_http_info(paramname, paramindex, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormat', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormat', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_image_default_format_online
  # Get image binary data.
  # @param document Document data.
  # @param index Image index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'download_image_default_format_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageDefaultFormatOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormatOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormatOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormatOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_online_with_http_info(paramdocument, paramindex, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageDefaultFormatOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormatOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormatOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadImageDefaultFormatOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormatOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_online_with_http_info(paramdocument, paramindex, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormatOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageDefaultFormatOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormatOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormatOnline', 'String')
      paramindex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'DownloadImageDefaultFormatOnline', paramindex, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormatOnline', 'index', paramindex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_online_with_http_info(paramdocument, paramindex, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormatOnline', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'index', paramindex, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'index', paramindex, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageDefaultFormatOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageDefaultFormatOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageDefaultFormatOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImageDefaultFormatOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageDefaultFormatOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_default_format_online_with_http_info(paramdocument, paramindex, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageDefaultFormatOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageDefaultFormatOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_image_online
  # Get image in specified format.
  # @param document Document data.
  # @param index Image index.
  # @param format Export format (png, jpg, gif).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [Integer] :quality Image quality (0 to 100; has effect only on Jpeg format).
  # @return [File]
  describe 'download_image_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadImageOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      paramindex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('index', 'DownloadImageOnline', paramindex, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', 'index', paramindex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageOnline', 'index')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'index', paramindex, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'index', paramindex, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadImageOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImageOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid quality' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImageOnline', 'File')
      paramindex = AsposeSlidesCloud::SpecUtils.get_param_value('index', 'DownloadImageOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImageOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImageOnline', 'Integer')
      paramquality = AsposeSlidesCloud::SpecUtils.invalidize_param_value('quality', 'DownloadImageOnline', paramquality, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImageOnline', 'quality', paramquality)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_image_online_with_http_info(paramdocument, paramindex, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImageOnline', 'quality')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'quality', paramquality, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImageOnline', 'quality', paramquality, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_images
  # Get all presentation images in specified format.
  # @param name 
  # @param format Export format (png, jpg, gif).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :quality Image quality (0 to 100; has effect only on Jpeg format).
  # @return [File]
  describe 'download_images test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadImages', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadImages', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImages', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadImages', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadImages', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid quality' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImages', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImages', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImages', 'Integer')
      paramquality = AsposeSlidesCloud::SpecUtils.invalidize_param_value('quality', 'DownloadImages', paramquality, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImages', 'quality', paramquality)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_with_http_info(paramname, paramformat, parampassword, paramfolder, paramstorage, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImages', 'quality')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'quality', paramquality, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImages', 'quality', paramquality, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_images_default_format
  # Get all presentation images.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'download_images_default_format test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImagesDefaultFormat', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormat', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImagesDefaultFormat', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadImagesDefaultFormat', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormat', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormat', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImagesDefaultFormat', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormat', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormat', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadImagesDefaultFormat', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormat', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormat', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadImagesDefaultFormat', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormat', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadImagesDefaultFormat', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadImagesDefaultFormat', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormat', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormat', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormat', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_images_default_format_online
  # Get all presentation images.
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'download_images_default_format_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesDefaultFormatOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormatOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormatOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_online_with_http_info(paramdocument, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormatOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesDefaultFormatOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormatOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadImagesDefaultFormatOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormatOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormatOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormatOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormatOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesDefaultFormatOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesDefaultFormatOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImagesDefaultFormatOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesDefaultFormatOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_default_format_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesDefaultFormatOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormatOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesDefaultFormatOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_images_online
  # Get all presentation images in specified format. 
  # @param document Document data.
  # @param format Export format (png, jpg, gif).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [Integer] :quality Image quality (0 to 100; has effect only on Jpeg format).
  # @return [File]
  describe 'download_images_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImagesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImagesOnline', 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_online_with_http_info(paramdocument, paramformat, parampassword, paramquality)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImagesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImagesOnline', 'Integer')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadImagesOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_online_with_http_info(paramdocument, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImagesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImagesOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadImagesOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_online_with_http_info(paramdocument, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImagesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImagesOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadImagesOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_online_with_http_info(paramdocument, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid quality' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadImagesOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadImagesOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadImagesOnline', 'String')
      paramquality = AsposeSlidesCloud::SpecUtils.get_param_value('quality', 'DownloadImagesOnline', 'Integer')
      paramquality = AsposeSlidesCloud::SpecUtils.invalidize_param_value('quality', 'DownloadImagesOnline', paramquality, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadImagesOnline', 'quality', paramquality)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_images_online_with_http_info(paramdocument, paramformat, parampassword, paramquality)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadImagesOnline', 'quality')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'quality', paramquality, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadImagesOnline', 'quality', paramquality, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_math_portion
  # Convert Mathematical Text to MathML Format
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param format Format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'download_math_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadMathPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadMathPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DownloadMathPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'DownloadMathPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'DownloadMathPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadMathPortion', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadMathPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadMathPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'DownloadMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'DownloadMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadMathPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadMathPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadMathPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadMathPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_notes_slide
  # Convert notes slide to the specified image format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width The width of the slide representation in the output format.
  # @option opts [Integer] :height The height of the slide representation in the output format
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'download_notes_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadNotesSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadNotesSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadNotesSlide', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'DownloadNotesSlide', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'DownloadNotesSlide', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadNotesSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadNotesSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadNotesSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadNotesSlide', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlide', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_with_http_info(paramname, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlide', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_notes_slide_online
  # Convert notes slide to the specified image format.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width The width of the slide representation in the output format.
  # @option opts [Integer] :height The height of the slide representation in the output format.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'download_notes_slide_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadNotesSlideOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadNotesSlideOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadNotesSlideOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'DownloadNotesSlideOnline', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'DownloadNotesSlideOnline', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadNotesSlideOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadNotesSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadNotesSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadNotesSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadNotesSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadNotesSlideOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadNotesSlideOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_notes_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadNotesSlideOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadNotesSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_presentation
  # Save a presentation to a specified format.
  # @param name Document name.
  # @param format Export format.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [Integer[]] :slides The indices of the slides to be saved. If not specified, all slides are saved by default.
  # @return [File]
  describe 'download_presentation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadPresentation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadPresentation', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadPresentation', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadPresentation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadPresentation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadPresentation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadPresentation', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slides' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadPresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadPresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadPresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadPresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadPresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'DownloadPresentation', 'Integer[]')
      paramslides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'DownloadPresentation', paramslides, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadPresentation', 'slides', paramslides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_presentation_with_http_info(paramname, paramformat, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadPresentation', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'slides', paramslides, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadPresentation', 'slides', paramslides, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_shape
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [File]
  describe 'download_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DownloadShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadShape', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadShape', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'DownloadShape', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'DownloadShape', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'DownloadShape', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadShape', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DownloadShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_shape_from_dto
  # Creates the shape from the DTO and returns the result in the specified format.
  # @param format Export format
  # @param dto Shape DTO.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'download_shape_from_dto test' do
    it 'should work' do
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeFromDto', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'DownloadShapeFromDto', 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeFromDto', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_from_dto_with_http_info(paramformat, paramdto)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeFromDto', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid format' do
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeFromDto', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'DownloadShapeFromDto', 'ShapeBase')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadShapeFromDto', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeFromDto', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_from_dto_with_http_info(paramformat, paramdto)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeFromDto', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeFromDto', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeFromDto', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeFromDto', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'DownloadShapeFromDto', 'ShapeBase')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'DownloadShapeFromDto', paramdto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeFromDto', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_from_dto_with_http_info(paramformat, paramdto)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeFromDto', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeFromDto', 'dto', paramdto, 'ShapeBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeFromDto', 'dto', paramdto, 'ShapeBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_shape_online
  # Render shape to specified picture format.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [IShapeExportOptions] :options Export options.
  # @return [File]
  describe 'download_shape_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadShapeOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadShapeOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DownloadShapeOnline', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadShapeOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'DownloadShapeOnline', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'DownloadShapeOnline', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'DownloadShapeOnline', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadShapeOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadShapeOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadShapeOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadShapeOnline', 'IShapeExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadShapeOnline', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadShapeOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadShapeOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadShapeOnline', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_slide
  # Save a slide to a specified format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [Integer] :width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [File]
  describe 'download_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadSlide', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadSlide', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'DownloadSlide', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'DownloadSlide', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadSlide', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlide', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_with_http_info(paramname, paramslide_index, paramformat, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlide', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_slide_online
  # Save a slide to a specified format.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @option opts [ExportOptions] :options Export options.
  # @return [File]
  describe 'download_slide_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'DownloadSlideOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadSlideOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadSlideOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'DownloadSlideOnline', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'DownloadSlideOnline', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadSlideOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadSlideOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadSlideOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'DownloadSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'DownloadSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'DownloadSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSlideOnline', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadSlideOnline', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSlideOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSlideOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSlideOnline', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for download_special_slide_shape
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options Export options
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [File]
  describe 'download_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'DownloadSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'DownloadSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'DownloadSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'DownloadSpecialSlideShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'DownloadSpecialSlideShape', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'DownloadSpecialSlideShape', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'DownloadSpecialSlideShape', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'DownloadSpecialSlideShape', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'DownloadSpecialSlideShape', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'DownloadSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'DownloadSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'DownloadSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'DownloadSpecialSlideShape', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'DownloadSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'DownloadSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'DownloadSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'DownloadSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'DownloadSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'DownloadSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'DownloadSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'DownloadSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'DownloadSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'DownloadSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'DownloadSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'DownloadSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'DownloadSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('DownloadSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.download_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('DownloadSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('DownloadSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_animation
  # Read slide animation effects.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_index Shape index. If specified, only effects related to that shape are returned.
  # @option opts [Integer] :paragraph_index Paragraph index.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'get_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetAnimation', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetAnimation', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetAnimation', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_animation_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_api_info
  # Get API info.
  # @param [Hash] opts the optional parameters
  # @return [ApiInfo]
  describe 'get_api_info test' do
    it 'should work' do
      AsposeSlidesCloud::SpecUtils.initialize('GetApiInfo', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_api_info_with_http_info
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetApiInfo', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end
  end

  # unit tests for get_available_fonts
  # Returns presentation fonts info.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fonts_folder Storage folder for custom fonts.
  # @option opts [String] :storage Storage for custom fonts.
  # @return [FontsData]
  describe 'get_available_fonts test' do
    it 'should work' do
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetAvailableFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAvailableFonts', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAvailableFonts', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_available_fonts_with_http_info(paramfonts_folder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAvailableFonts', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid fonts_folder' do
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetAvailableFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAvailableFonts', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'GetAvailableFonts', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAvailableFonts', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_available_fonts_with_http_info(paramfonts_folder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAvailableFonts', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAvailableFonts', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAvailableFonts', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'GetAvailableFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetAvailableFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetAvailableFonts', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetAvailableFonts', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_available_fonts_with_http_info(paramfonts_folder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetAvailableFonts', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAvailableFonts', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetAvailableFonts', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_background
  # Read slide background info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'get_background test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetBackground', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetBackground', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetBackground', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetBackground', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetBackground', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetBackground', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetBackground', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_background_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetBackground', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_caption_tracks
  # Gets video/audio captions tracks.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must refer to a video or audio frame).
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_data true to include caption data string values in the response.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Presentation storage.
  # @return [CaptionTracks]
  describe 'get_caption_tracks test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetCaptionTracks', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetCaptionTracks', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetCaptionTracks', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid include_data' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.invalidize_param_value('includeData', 'GetCaptionTracks', paraminclude_data, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'includeData', paraminclude_data)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'includeData')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'includeData', paraminclude_data, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'includeData', paraminclude_data, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetCaptionTracks', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetCaptionTracks', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCaptionTracks', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetCaptionTracks', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetCaptionTracks', 'Integer')
      paraminclude_data = AsposeSlidesCloud::SpecUtils.get_param_value('includeData', 'GetCaptionTracks', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCaptionTracks', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCaptionTracks', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetCaptionTracks', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCaptionTracks', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_caption_tracks_with_http_info(paramname, paramslide_index, paramshape_index, paraminclude_data, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCaptionTracks', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCaptionTracks', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_color_scheme
  # Read slide theme color scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ColorScheme]
  describe 'get_color_scheme test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetColorScheme', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetColorScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetColorScheme', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetColorScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetColorScheme', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetColorScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetColorScheme', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetColorScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetColorScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetColorScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetColorScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetColorScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetColorScheme', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetColorScheme', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_color_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetColorScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetColorScheme', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_comment_authors
  # Lists comment authors.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [CommentAuthors]
  describe 'get_comment_authors test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCommentAuthors', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCommentAuthors', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_comment_authors_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCommentAuthors', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetCommentAuthors', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCommentAuthors', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_comment_authors_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCommentAuthors', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetCommentAuthors', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCommentAuthors', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_comment_authors_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCommentAuthors', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetCommentAuthors', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCommentAuthors', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_comment_authors_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCommentAuthors', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetCommentAuthors', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetCommentAuthors', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetCommentAuthors', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetCommentAuthors', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetCommentAuthors', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_comment_authors_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetCommentAuthors', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetCommentAuthors', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_disc_usage
  # Get disc usage
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [DiscUsage]
  describe 'get_disc_usage test' do
    it 'should work' do
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetDiscUsage', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDiscUsage', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_disc_usage_with_http_info(paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDiscUsage', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid storage_name' do
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetDiscUsage', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetDiscUsage', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDiscUsage', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_disc_usage_with_http_info(paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDiscUsage', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDiscUsage', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDiscUsage', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_document_properties
  # Read presentation document properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'get_document_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetDocumentProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetDocumentProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetDocumentProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetDocumentProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_document_property
  # Read presentation document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperty]
  describe 'get_document_property test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetDocumentProperty', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid property_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'GetDocumentProperty', paramproperty_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', 'propertyName', paramproperty_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetDocumentProperty', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetDocumentProperty', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'GetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetDocumentProperty', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetDocumentProperty', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_document_property_with_http_info(paramname, paramproperty_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetDocumentProperty', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_file_versions
  # Get file versions
  # @param path File path e.g. &#39;/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FileVersions]
  describe 'get_file_versions test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_file_versions_with_http_info(parampath, paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetFileVersions', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_file_versions_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFileVersions', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFileVersions', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFileVersions', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetFileVersions', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFileVersions', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_file_versions_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFileVersions', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFileVersions', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_files_list
  # Get all files and folders within a folder
  # @param path Folder path e.g. &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FilesList]
  describe 'get_files_list test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_files_list_with_http_info(parampath, paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'GetFilesList', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_files_list_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFilesList', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'GetFilesList', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'GetFilesList', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'GetFilesList', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFilesList', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_files_list_with_http_info(parampath, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFilesList', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFilesList', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_font_scheme
  # Read slide theme font scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FontScheme]
  describe 'get_font_scheme test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetFontScheme', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetFontScheme', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetFontScheme', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetFontScheme', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFontScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFontScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFontScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetFontScheme', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontScheme', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_font_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontScheme', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_fonts
  # Returns presentation fonts info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FontsData]
  describe 'get_fonts test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFonts', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFonts', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFonts', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetFonts', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFonts', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFonts', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetFonts', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFonts', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFonts', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetFonts', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFonts', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFonts', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetFonts', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFonts', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFonts', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFonts', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_fonts_online
  # Returns presentation fonts info.
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [FontsData]
  describe 'get_fonts_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_online_with_http_info(paramdocument, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'GetFontsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetFontsOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFontsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetFontsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFontsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_fonts_online_with_http_info(paramdocument, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFontsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFontsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_format_scheme
  # Read slide theme format scheme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FormatScheme]
  describe 'get_format_scheme test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetFormatScheme', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFormatScheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetFormatScheme', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFormatScheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetFormatScheme', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFormatScheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetFormatScheme', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFormatScheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetFormatScheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetFormatScheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetFormatScheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetFormatScheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetFormatScheme', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetFormatScheme', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_format_scheme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetFormatScheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetFormatScheme', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_html5_templates
  # Get default templates for HTML5 export.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_html5_templates test' do
    it 'should work' do
      AsposeSlidesCloud::SpecUtils.initialize('GetHtml5Templates', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_html5_templates_with_http_info
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetHtml5Templates', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end
  end

  # unit tests for get_layout_slide
  # Read presentation layoutSlide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'get_layout_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetLayoutSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetLayoutSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetLayoutSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetLayoutSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetLayoutSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetLayoutSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_layout_slides
  # Read presentation layoutSlides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlides]
  describe 'get_layout_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetLayoutSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetLayoutSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetLayoutSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetLayoutSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetLayoutSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetLayoutSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetLayoutSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetLayoutSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_layout_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetLayoutSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetLayoutSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_master_slide
  # Read presentation masterSlide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlide]
  describe 'get_master_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetMasterSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetMasterSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetMasterSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetMasterSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetMasterSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetMasterSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_master_slides
  # Read presentation masterSlides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [MasterSlides]
  describe 'get_master_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetMasterSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetMasterSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetMasterSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetMasterSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetMasterSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetMasterSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetMasterSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetMasterSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_master_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetMasterSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetMasterSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_notes_slide
  # Read notes slide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'get_notes_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_notes_slide_header_footer
  # Get header/footer info for the notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlideHeaderFooter]
  describe 'get_notes_slide_header_footer test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetNotesSlideHeaderFooter', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideHeaderFooter', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideHeaderFooter', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideHeaderFooter', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideHeaderFooter', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideHeaderFooter', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetNotesSlideHeaderFooter', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideHeaderFooter', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetNotesSlideHeaderFooter', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideHeaderFooter', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideHeaderFooter', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_notes_slide_online
  # Read notes slide info.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [NotesSlide]
  describe 'get_notes_slide_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_online_with_http_info(paramdocument, paramslide_index, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'GetNotesSlideOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetNotesSlideOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'GetNotesSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetNotesSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetNotesSlideOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetNotesSlideOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetNotesSlideOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_notes_slide_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetNotesSlideOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetNotesSlideOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_paragraph
  # Read shape paragraph info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'get_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_paragraph_effective
  # Read effective paragraph info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'get_paragraph_effective test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraphEffective', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraphEffective', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraphEffective', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetParagraphEffective', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraphEffective', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraphEffective', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraphEffective', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetParagraphEffective', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphEffective', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphEffective', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphEffective', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_paragraph_rectangle
  # Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextBounds]
  describe 'get_paragraph_rectangle test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraphRectangle', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraphRectangle', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraphRectangle', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetParagraphRectangle', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraphRectangle', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraphRectangle', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetParagraphRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraphRectangle', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphRectangle', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraph_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphRectangle', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphRectangle', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_paragraphs
  # Read shape paragraphs info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'get_paragraphs test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetParagraphs', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetParagraphs', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetParagraphs', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetParagraphs', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetParagraphs', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetParagraphs', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetParagraphs', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetParagraphs', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetParagraphs', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetParagraphs', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_placeholder
  # Read slide placeholder info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param placeholder_index Placeholder index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Placeholder]
  describe 'get_placeholder test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPlaceholder', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPlaceholder', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid placeholder_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('placeholderIndex', 'GetPlaceholder', paramplaceholder_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'placeholderIndex', paramplaceholder_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'placeholderIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'placeholderIndex', paramplaceholder_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'placeholderIndex', paramplaceholder_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPlaceholder', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPlaceholder', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholder', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholder', 'Integer')
      paramplaceholder_index = AsposeSlidesCloud::SpecUtils.get_param_value('placeholderIndex', 'GetPlaceholder', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholder', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholder', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPlaceholder', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholder', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholder_with_http_info(paramname, paramslide_index, paramplaceholder_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholder', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholder', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_placeholders
  # Read slide placeholders info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Placeholders]
  describe 'get_placeholders test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPlaceholders', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholders', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPlaceholders', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholders', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPlaceholders', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholders', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPlaceholders', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholders', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPlaceholders', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPlaceholders', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPlaceholders', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPlaceholders', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPlaceholders', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPlaceholders', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_placeholders_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPlaceholders', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPlaceholders', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_portion
  # Read paragraph portion info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'get_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetPortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_portion_effective
  # Read effective portion info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'get_portion_effective test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPortionEffective', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPortionEffective', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetPortionEffective', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetPortionEffective', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetPortionEffective', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPortionEffective', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPortionEffective', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPortionEffective', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionEffective', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionEffective', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionEffective', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionEffective', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionEffective', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionEffective', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionEffective', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortionEffective', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetPortionEffective', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionEffective', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_effective_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionEffective', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionEffective', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_portion_rectangle
  # Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextBounds]
  describe 'get_portion_rectangle test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPortionRectangle', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPortionRectangle', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetPortionRectangle', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetPortionRectangle', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetPortionRectangle', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPortionRectangle', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPortionRectangle', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortionRectangle', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortionRectangle', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortionRectangle', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortionRectangle', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetPortionRectangle', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortionRectangle', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortionRectangle', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPortionRectangle', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortionRectangle', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portion_rectangle_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortionRectangle', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortionRectangle', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_portions
  # Read paragraph portions info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'get_portions test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPortions', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetPortions', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetPortions', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetPortions', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPortions', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPortions', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPortions', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetPortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetPortions', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPortions', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPortions', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPortions', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_presentation
  # Read presentation info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'get_presentation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPresentation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPresentation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPresentation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPresentation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_presentation_images
  # Read presentation images info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Images]
  describe 'get_presentation_images test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationImages', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationImages', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_images_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationImages', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPresentationImages', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationImages', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_images_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationImages', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPresentationImages', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationImages', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_images_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationImages', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPresentationImages', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationImages', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_images_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationImages', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPresentationImages', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationImages', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_images_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationImages', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationImages', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_presentation_text_items
  # Extract presentation text items.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_empty True to incude empty items.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextItems]
  describe 'get_presentation_text_items test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetPresentationTextItems', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationTextItems', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_empty' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withEmpty', 'GetPresentationTextItems', paramwith_empty, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', 'withEmpty', paramwith_empty)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationTextItems', 'withEmpty')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'withEmpty', paramwith_empty, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'withEmpty', paramwith_empty, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetPresentationTextItems', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationTextItems', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetPresentationTextItems', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationTextItems', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetPresentationTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetPresentationTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetPresentationTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetPresentationTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetPresentationTextItems', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetPresentationTextItems', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_presentation_text_items_with_http_info(paramname, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetPresentationTextItems', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetPresentationTextItems', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_protection_properties
  # Read presentation protection properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ProtectionProperties]
  describe 'get_protection_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetProtectionProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetProtectionProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_protection_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetProtectionProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetProtectionProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetProtectionProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_protection_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetProtectionProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetProtectionProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetProtectionProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_protection_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetProtectionProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetProtectionProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetProtectionProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_protection_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetProtectionProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetProtectionProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetProtectionProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetProtectionProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetProtectionProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetProtectionProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_protection_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetProtectionProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetProtectionProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_sections
  # Read presentation sections info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'get_sections test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSections', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSections', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_sections_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSections', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSections', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSections', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_sections_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSections', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSections', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSections', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_sections_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSections', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSections', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSections', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_sections_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSections', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSections', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSections', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_sections_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSections', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSections', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_shape
  # Read slide shape info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'get_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_shape_geometry_path
  # Returns geometry path of the shape
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [GeometryPaths]
  describe 'get_shape_geometry_path test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetShapeGeometryPath', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetShapeGeometryPath', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetShapeGeometryPath', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetShapeGeometryPath', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetShapeGeometryPath', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetShapeGeometryPath', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetShapeGeometryPath', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapeGeometryPath', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapeGeometryPath', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapeGeometryPath', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_shapes
  # Read slide shapes info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :shape_type Shape type.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2\&quot;).
  # @return [Shapes]
  describe 'get_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeType', 'GetShapes', paramshape_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'shapeType', paramshape_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'shapeType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'shapeType', paramshape_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'shapeType', paramshape_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetShapes', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetShapes', 'String')
      paramshape_type = AsposeSlidesCloud::SpecUtils.get_param_value('shapeType', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_shapes_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage, paramshape_type, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide
  # Read presentation slide info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'get_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_comments
  # Read presentation slide comments.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideComments]
  describe 'get_slide_comments test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideComments', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideComments', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideComments', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideComments', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideComments', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideComments', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideComments', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideComments', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideComments', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideComments', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideComments', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideComments', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideComments', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideComments', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_comments_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideComments', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideComments', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_header_footer
  # Get footer info for the slide.
  # @param name Document name.
  # @param slide_index The position of the slide to be reordered.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [HeaderFooter]
  describe 'get_slide_header_footer test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideHeaderFooter', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideHeaderFooter', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideHeaderFooter', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideHeaderFooter', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideHeaderFooter', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideHeaderFooter', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideHeaderFooter', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideHeaderFooter', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideHeaderFooter', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideHeaderFooter', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideHeaderFooter', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_header_footer_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideHeaderFooter', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_images
  # Read slide images info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_index Shape index (null to search all shapes).
  # @option opts [String] :shape_alt_text Shape alt name (null to search all shapes).
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Images]
  describe 'get_slide_images test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideImages', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideImages', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSlideImages', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_alt_text' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeAltText', 'GetSlideImages', paramshape_alt_text, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'shapeAltText', paramshape_alt_text)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'shapeAltText')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'shapeAltText', paramshape_alt_text, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'shapeAltText', paramshape_alt_text, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideImages', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideImages', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideImages', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideImages', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSlideImages', 'Integer')
      paramshape_alt_text = AsposeSlidesCloud::SpecUtils.get_param_value('shapeAltText', 'GetSlideImages', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideImages', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideImages', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideImages', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideImages', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_images_with_http_info(paramname, paramslide_index, paramshape_index, paramshape_alt_text, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideImages', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideImages', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_properties
  # Read presentation slide properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideProperties]
  describe 'get_slide_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_show_properties
  # Read presentation slide show properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideShowProperties]
  describe 'get_slide_show_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShowProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShowProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_show_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShowProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideShowProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShowProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_show_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShowProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideShowProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShowProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_show_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShowProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideShowProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShowProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_show_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShowProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideShowProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideShowProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_show_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideShowProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideShowProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slide_text_items
  # Extract slide text items.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :with_empty True to include empty items.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TextItems]
  describe 'get_slide_text_items test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlideTextItems', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSlideTextItems', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_empty' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withEmpty', 'GetSlideTextItems', paramwith_empty, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'withEmpty', paramwith_empty)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'withEmpty')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'withEmpty', paramwith_empty, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'withEmpty', paramwith_empty, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlideTextItems', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlideTextItems', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlideTextItems', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSlideTextItems', 'Integer')
      paramwith_empty = AsposeSlidesCloud::SpecUtils.get_param_value('withEmpty', 'GetSlideTextItems', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlideTextItems', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlideTextItems', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlideTextItems', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlideTextItems', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slide_text_items_with_http_info(paramname, paramslide_index, paramwith_empty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlideTextItems', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlideTextItems', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_slides
  # Read presentation slides info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'get_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_slides_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_animation
  # Read special slide (master, layout, notes) animation effects.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :shape_index Shape index. If specified, only effects related to that shape are returned.
  # @option opts [Integer] :paragraph_index Paragraph index. If specified, only effects related to that paragraph are returned.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'get_special_slide_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlideAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlideAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlideAnimation', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlideAnimation', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSpecialSlideAnimation', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlideAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlideAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideAnimation', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideAnimation', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideAnimation', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlideAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_paragraph
  # Read shape paragraph info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'get_special_slide_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlideParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlideParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlideParagraph', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlideParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSpecialSlideParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlideParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlideParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlideParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlideParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlideParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_paragraphs
  # Read special shape paragraphs info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraphs]
  describe 'get_special_slide_paragraphs test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlideParagraphs', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlideParagraphs', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlideParagraphs', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlideParagraphs', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlideParagraphs', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlideParagraphs', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlideParagraphs', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideParagraphs', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideParagraphs', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlideParagraphs', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideParagraphs', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_paragraphs_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideParagraphs', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideParagraphs', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_portion
  # Read paragraph portion info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'get_special_slide_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlidePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlidePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlidePortion', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlidePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSpecialSlidePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetSpecialSlidePortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlidePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlidePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlidePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetSpecialSlidePortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlidePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_portions
  # Read paragraph portions info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portions]
  describe 'get_special_slide_portions test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlidePortions', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlidePortions', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlidePortions', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlidePortions', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetSpecialSlidePortions', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlidePortions', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlidePortions', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlidePortions', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlidePortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlidePortions', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlidePortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlidePortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetSpecialSlidePortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlidePortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlidePortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlidePortions', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlidePortions', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlidePortions', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_portions_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlidePortions', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlidePortions', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_shape
  # Read special slide shape info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'get_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetSpecialSlideShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetSpecialSlideShape', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_special_slide_shapes
  # Read special slide shapes info.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Shapes]
  describe 'get_special_slide_shapes test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetSpecialSlideShapes', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetSpecialSlideShapes', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'GetSpecialSlideShapes', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetSpecialSlideShapes', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetSpecialSlideShapes', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetSpecialSlideShapes', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetSpecialSlideShapes', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetSpecialSlideShapes', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'GetSpecialSlideShapes', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetSpecialSlideShapes', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetSpecialSlideShapes', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'GetSpecialSlideShapes', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'GetSpecialSlideShapes', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetSpecialSlideShapes', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_special_slide_shapes_with_http_info(paramname, paramslide_index, paramslide_type, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetSpecialSlideShapes', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetSpecialSlideShapes', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_table_cell_paragraph
  # Returns paragraph info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'get_table_cell_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetTableCellParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetTableCellParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetTableCellParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'GetTableCellParagraph', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'GetTableCellParagraph', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetTableCellParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetTableCellParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetTableCellParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellParagraph', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetTableCellParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_table_cell_paragraphs
  # Returns table cell paragraphs.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraphs]
  describe 'get_table_cell_paragraphs test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetTableCellParagraphs', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetTableCellParagraphs', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetTableCellParagraphs', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'GetTableCellParagraphs', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'GetTableCellParagraphs', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetTableCellParagraphs', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetTableCellParagraphs', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellParagraphs', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellParagraphs', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellParagraphs', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellParagraphs', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellParagraphs', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellParagraphs', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellParagraphs', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetTableCellParagraphs', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellParagraphs', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_paragraphs_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellParagraphs', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellParagraphs', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_table_cell_portion
  # Returns table cell portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'get_table_cell_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetTableCellPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetTableCellPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetTableCellPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'GetTableCellPortion', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'GetTableCellPortion', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetTableCellPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'GetTableCellPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetTableCellPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetTableCellPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'GetTableCellPortion', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetTableCellPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_table_cell_portions
  # Returns table cell portions.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portions]
  describe 'get_table_cell_portions test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetTableCellPortions', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetTableCellPortions', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'GetTableCellPortions', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'GetTableCellPortions', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'GetTableCellPortions', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'GetTableCellPortions', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetTableCellPortions', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetTableCellPortions', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTableCellPortions', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTableCellPortions', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'GetTableCellPortions', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'GetTableCellPortions', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'GetTableCellPortions', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'GetTableCellPortions', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTableCellPortions', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTableCellPortions', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetTableCellPortions', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTableCellPortions', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_table_cell_portions_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTableCellPortions', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTableCellPortions', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_theme
  # Read slide theme info.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Theme]
  describe 'get_theme test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetTheme', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTheme', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'GetTheme', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTheme', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetTheme', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTheme', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetTheme', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTheme', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetTheme', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'GetTheme', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetTheme', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetTheme', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetTheme', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetTheme', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_theme_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetTheme', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetTheme', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_vba_module
  # Get VBA module info.
  # @param name Document name.
  # @param module_index The index of the macros module to remove.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [VbaModule]
  describe 'get_vba_module test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetVbaModule', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaModule', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid module_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('moduleIndex', 'GetVbaModule', parammodule_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', 'moduleIndex', parammodule_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaModule', 'moduleIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetVbaModule', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaModule', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetVbaModule', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaModule', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'GetVbaModule', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetVbaModule', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaModule', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_module_with_http_info(paramname, parammodule_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaModule', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaModule', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_vba_project
  # Get VBA project info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [VbaProject]
  describe 'get_vba_project test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaProject', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaProject', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_project_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaProject', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetVbaProject', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaProject', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_project_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaProject', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetVbaProject', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaProject', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_project_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaProject', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetVbaProject', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaProject', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_project_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaProject', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetVbaProject', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetVbaProject', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetVbaProject', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetVbaProject', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetVbaProject', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_vba_project_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetVbaProject', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetVbaProject', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for get_view_properties
  # Read presentation view properties.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ViewProperties]
  describe 'get_view_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetViewProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetViewProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.get_view_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetViewProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'GetViewProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetViewProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_view_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetViewProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'GetViewProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetViewProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_view_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetViewProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'GetViewProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetViewProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_view_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetViewProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'GetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'GetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'GetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'GetViewProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('GetViewProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.get_view_properties_with_http_info(paramname, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('GetViewProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('GetViewProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for highlight_presentation_regex
  # Highlight all matches of sample in text frame text using specified color.
  # @param name Document name.
  # @param regex Regular expression.
  # @param color Highlighting color.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True to search ignoring char case.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentReplaceResult]
  describe 'highlight_presentation_regex test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'HighlightPresentationRegex', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid regex' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('regex', 'HighlightPresentationRegex', paramregex, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'regex', paramregex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'regex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'regex', paramregex, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'regex', paramregex, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'HighlightPresentationRegex', paramcolor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'color', paramcolor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'color', paramcolor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'color', paramcolor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'HighlightPresentationRegex', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'HighlightPresentationRegex', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'HighlightPresentationRegex', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightPresentationRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'HighlightPresentationRegex', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationRegex', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_regex_with_http_info(paramname, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationRegex', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationRegex', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for highlight_presentation_text
  # Highlight all matches of sample using specified color.
  # @param name Document name.
  # @param text Text sample to highlight.
  # @param color Highlighting color.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :whole_words_only Match only whole words.
  # @option opts [BOOLEAN] :ignore_case True to search ignoring char case.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentReplaceResult]
  describe 'highlight_presentation_text test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'HighlightPresentationText', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid text' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.invalidize_param_value('text', 'HighlightPresentationText', paramtext, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'text', paramtext)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'text')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'text', paramtext, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'text', paramtext, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'HighlightPresentationText', paramcolor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'color', paramcolor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'color', paramcolor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'color', paramcolor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid whole_words_only' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.invalidize_param_value('wholeWordsOnly', 'HighlightPresentationText', paramwhole_words_only, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'wholeWordsOnly', paramwhole_words_only)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'wholeWordsOnly')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'HighlightPresentationText', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'HighlightPresentationText', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'HighlightPresentationText', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightPresentationText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightPresentationText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightPresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightPresentationText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightPresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightPresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightPresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'HighlightPresentationText', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightPresentationText', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_presentation_text_with_http_info(paramname, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightPresentationText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightPresentationText', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for highlight_shape_regex
  # Highlight all matches of sample in text frame text using specified color.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param regex Regular expression.
  # @param color Highlighting color.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True to search ignoring char case.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shape]
  describe 'highlight_shape_regex test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'HighlightShapeRegex', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'HighlightShapeRegex', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'HighlightShapeRegex', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid regex' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramregex = AsposeSlidesCloud::SpecUtils.invalidize_param_value('regex', 'HighlightShapeRegex', paramregex, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'regex', paramregex)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'regex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'regex', paramregex, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'regex', paramregex, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'HighlightShapeRegex', paramcolor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'color', paramcolor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'color', paramcolor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'color', paramcolor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'HighlightShapeRegex', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'HighlightShapeRegex', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'HighlightShapeRegex', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeRegex', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeRegex', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeRegex', 'Integer')
      paramregex = AsposeSlidesCloud::SpecUtils.get_param_value('regex', 'HighlightShapeRegex', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'HighlightShapeRegex', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeRegex', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_regex_with_http_info(paramname, paramslide_index, paramshape_index, paramregex, paramcolor, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeRegex', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeRegex', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for highlight_shape_text
  # Highlight all matches of sample in text frame text using specified color.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param text Text sample to highlight.
  # @param color Highlighting color.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :whole_words_only Match only whole words.
  # @option opts [BOOLEAN] :ignore_case True to search ignoring char case.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Shape]
  describe 'highlight_shape_text test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'HighlightShapeText', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'HighlightShapeText', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'HighlightShapeText', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid text' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramtext = AsposeSlidesCloud::SpecUtils.invalidize_param_value('text', 'HighlightShapeText', paramtext, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'text', paramtext)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'text')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'text', paramtext, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'text', paramtext, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'HighlightShapeText', paramcolor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'color', paramcolor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'color', paramcolor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'color', paramcolor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid whole_words_only' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.invalidize_param_value('wholeWordsOnly', 'HighlightShapeText', paramwhole_words_only, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'wholeWordsOnly', paramwhole_words_only)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'wholeWordsOnly')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'HighlightShapeText', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'HighlightShapeText', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'HighlightShapeText', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'HighlightShapeText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'HighlightShapeText', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'HighlightShapeText', 'Integer')
      paramtext = AsposeSlidesCloud::SpecUtils.get_param_value('text', 'HighlightShapeText', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'HighlightShapeText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'HighlightShapeText', 'BOOLEAN')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'HighlightShapeText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'HighlightShapeText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'HighlightShapeText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'HighlightShapeText', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('HighlightShapeText', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.highlight_shape_text_with_http_info(paramname, paramslide_index, paramshape_index, paramtext, paramcolor, paramwhole_words_only, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('HighlightShapeText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('HighlightShapeText', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for import_from_html
  # Create presentation document from html.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :html HTML data.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [Integer] :position Slide index before which the HTML should be added (add to the end by default).
  # @option opts [BOOLEAN] :use_slide_with_index_as_start true to insert data starting from an empty space on the slide with the specified index; false to add data to the created slides.
  # @return [Document]
  describe 'import_from_html test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ImportFromHtml', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid html' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramhtml = AsposeSlidesCloud::SpecUtils.invalidize_param_value('html', 'ImportFromHtml', paramhtml, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'html', paramhtml)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'html')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'html', paramhtml, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'html', paramhtml, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ImportFromHtml', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ImportFromHtml', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ImportFromHtml', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramposition = AsposeSlidesCloud::SpecUtils.invalidize_param_value('position', 'ImportFromHtml', paramposition, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'position', paramposition)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'position')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'position', paramposition, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'position', paramposition, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid use_slide_with_index_as_start' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromHtml', 'String')
      paramhtml = AsposeSlidesCloud::SpecUtils.get_param_value('html', 'ImportFromHtml', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromHtml', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromHtml', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromHtml', 'String')
      paramposition = AsposeSlidesCloud::SpecUtils.get_param_value('position', 'ImportFromHtml', 'Integer')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.get_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', 'BOOLEAN')
      paramuse_slide_with_index_as_start = AsposeSlidesCloud::SpecUtils.invalidize_param_value('useSlideWithIndexAsStart', 'ImportFromHtml', paramuse_slide_with_index_as_start, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromHtml', 'useSlideWithIndexAsStart', paramuse_slide_with_index_as_start)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_html_with_http_info(paramname, paramhtml, parampassword, paramfolder, paramstorage, paramposition, paramuse_slide_with_index_as_start)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromHtml', 'useSlideWithIndexAsStart')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'useSlideWithIndexAsStart', paramuse_slide_with_index_as_start, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromHtml', 'useSlideWithIndexAsStart', paramuse_slide_with_index_as_start, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for import_from_pdf
  # Create presentation document from pdf or append pdf to an existing presentation.
  # @param name Document name.
  # @param pdf PDF data.
  # @param [Hash] opts the optional parameters
  # @option opts [PdfImportOptions] :options Import options.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'import_from_pdf test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ImportFromPdf', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid pdf' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pdf', 'ImportFromPdf', parampdf, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'pdf', parampdf)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'pdf')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'pdf', parampdf, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'pdf', parampdf, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'ImportFromPdf', paramoptions, 'PdfImportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'options', paramoptions, 'PdfImportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'options', paramoptions, 'PdfImportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ImportFromPdf', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ImportFromPdf', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportFromPdf', 'String')
      parampdf = AsposeSlidesCloud::SpecUtils.get_param_value('pdf', 'ImportFromPdf', 'File')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'ImportFromPdf', 'PdfImportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportFromPdf', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportFromPdf', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ImportFromPdf', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportFromPdf', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_from_pdf_with_http_info(paramname, parampdf, paramoptions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportFromPdf', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportFromPdf', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for import_shapes_from_svg
  # Imports shapes from SVG file.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image SVG image data.
  # @option opts [Integer] :x The X coordinate of the imported group of shapes (0 is default if not specified).
  # @option opts [Integer] :y The Y coordinate of the imported group of shapes (0 is default if not specified).
  # @option opts [Integer] :width The width of the imported group of shapes (default is SVG image width).
  # @option opts [Integer] :height The height of the imported group of shapes (default is SVG image width).
  # @option opts [Integer[]] :shapes Indexes of shapes to import. All shapes are imported if not specified.
  # @option opts [BOOLEAN] :group If true, the set of shapes will be imported as a one group shape.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @return [Shapes]
  describe 'import_shapes_from_svg test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ImportShapesFromSvg', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'ImportShapesFromSvg', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('image', 'ImportShapesFromSvg', paramimage, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'image', paramimage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'image')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'image', paramimage, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'image', paramimage, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid x' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramx = AsposeSlidesCloud::SpecUtils.invalidize_param_value('x', 'ImportShapesFromSvg', paramx, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'x', paramx)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'x')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'x', paramx, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'x', paramx, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid y' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramy = AsposeSlidesCloud::SpecUtils.invalidize_param_value('y', 'ImportShapesFromSvg', paramy, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'y', paramy)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'y')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'y', paramy, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'y', paramy, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'ImportShapesFromSvg', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'ImportShapesFromSvg', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shapes' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramshapes = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapes', 'ImportShapesFromSvg', paramshapes, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'shapes', paramshapes)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'shapes')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'shapes', paramshapes, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'shapes', paramshapes, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid group' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramgroup = AsposeSlidesCloud::SpecUtils.invalidize_param_value('group', 'ImportShapesFromSvg', paramgroup, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'group', paramgroup)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'group')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'group', paramgroup, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'group', paramgroup, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ImportShapesFromSvg', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ImportShapesFromSvg', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ImportShapesFromSvg', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ImportShapesFromSvg', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ImportShapesFromSvg', 'File')
      paramx = AsposeSlidesCloud::SpecUtils.get_param_value('x', 'ImportShapesFromSvg', 'Integer')
      paramy = AsposeSlidesCloud::SpecUtils.get_param_value('y', 'ImportShapesFromSvg', 'Integer')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'ImportShapesFromSvg', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'ImportShapesFromSvg', 'Integer')
      paramshapes = AsposeSlidesCloud::SpecUtils.get_param_value('shapes', 'ImportShapesFromSvg', 'Integer[]')
      paramgroup = AsposeSlidesCloud::SpecUtils.get_param_value('group', 'ImportShapesFromSvg', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ImportShapesFromSvg', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ImportShapesFromSvg', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ImportShapesFromSvg', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ImportShapesFromSvg', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.import_shapes_from_svg_with_http_info(paramname, paramslide_index, paramimage, paramx, paramy, paramwidth, paramheight, paramshapes, paramgroup, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ImportShapesFromSvg', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ImportShapesFromSvg', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for merge
  # Merge the presentation with other presentations specified in the request parameter.
  # @param name Document name.
  # @param request PresentationsMergeRequest with a list of presentations to merge.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'merge test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'Merge', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Merge', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid request' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'Merge', paramrequest, 'PresentationsMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', 'request', paramrequest)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Merge', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'request', paramrequest, 'PresentationsMergeRequest')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'request', paramrequest, 'PresentationsMergeRequest')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'Merge', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Merge', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'Merge', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Merge', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Merge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'Merge', 'PresentationsMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Merge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Merge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'Merge', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Merge', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Merge', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Merge', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for merge_and_save_online
  # Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [File[]] :files Files to merge
  # @option opts [OrderedMergeRequest] :request Merge request.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'merge_and_save_online test' do
    it 'should work' do
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeAndSaveOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeAndSaveOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeAndSaveOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeAndSaveOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_and_save_online_with_http_info(paramout_path, paramfiles, paramrequest, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid out_path' do
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeAndSaveOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeAndSaveOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeAndSaveOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'MergeAndSaveOnline', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeAndSaveOnline', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_and_save_online_with_http_info(paramout_path, paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeAndSaveOnline', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid files' do
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeAndSaveOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeAndSaveOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.invalidize_param_value('files', 'MergeAndSaveOnline', paramfiles, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('MergeAndSaveOnline', 'files', paramfiles)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_and_save_online_with_http_info(paramout_path, paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeAndSaveOnline', 'files')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'files', paramfiles, 'File[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'files', paramfiles, 'File[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid request' do
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeAndSaveOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeAndSaveOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeAndSaveOnline', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'MergeAndSaveOnline', paramrequest, 'OrderedMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('MergeAndSaveOnline', 'request', paramrequest)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_and_save_online_with_http_info(paramout_path, paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeAndSaveOnline', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'request', paramrequest, 'OrderedMergeRequest')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'request', paramrequest, 'OrderedMergeRequest')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'MergeAndSaveOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeAndSaveOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeAndSaveOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'MergeAndSaveOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeAndSaveOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_and_save_online_with_http_info(paramout_path, paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeAndSaveOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeAndSaveOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for merge_online
  # Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
  # @param [Hash] opts the optional parameters
  # @option opts [File[]] :files Files to merge
  # @option opts [OrderedMergeRequest] :request Merge request.
  # @option opts [String] :storage Document storage.
  # @return [File]
  describe 'merge_online test' do
    it 'should work' do
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_online_with_http_info(paramfiles, paramrequest, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid files' do
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeOnline', 'String')
      paramfiles = AsposeSlidesCloud::SpecUtils.invalidize_param_value('files', 'MergeOnline', paramfiles, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('MergeOnline', 'files', paramfiles)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_online_with_http_info(paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeOnline', 'files')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'files', paramfiles, 'File[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'files', paramfiles, 'File[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid request' do
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeOnline', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'MergeOnline', paramrequest, 'OrderedMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('MergeOnline', 'request', paramrequest)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_online_with_http_info(paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeOnline', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'request', paramrequest, 'OrderedMergeRequest')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'request', paramrequest, 'OrderedMergeRequest')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'MergeOnline', 'File[]')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'MergeOnline', 'OrderedMergeRequest')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'MergeOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_online_with_http_info(paramfiles, paramrequest, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for merge_table_cells
  # Merge table cells.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param table_cell_merge_options Merge settings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Table]
  describe 'merge_table_cells test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'MergeTableCells', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'MergeTableCells', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'MergeTableCells', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid table_cell_merge_options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.invalidize_param_value('tableCellMergeOptions', 'MergeTableCells', paramtable_cell_merge_options, 'TableCellMergeOptions')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'tableCellMergeOptions', paramtable_cell_merge_options)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'tableCellMergeOptions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'tableCellMergeOptions', paramtable_cell_merge_options, 'TableCellMergeOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'tableCellMergeOptions', paramtable_cell_merge_options, 'TableCellMergeOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'MergeTableCells', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'MergeTableCells', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MergeTableCells', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MergeTableCells', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'MergeTableCells', 'Integer')
      paramtable_cell_merge_options = AsposeSlidesCloud::SpecUtils.get_param_value('tableCellMergeOptions', 'MergeTableCells', 'TableCellMergeOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MergeTableCells', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MergeTableCells', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'MergeTableCells', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MergeTableCells', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.merge_table_cells_with_http_info(paramname, paramslide_index, paramshape_index, paramtable_cell_merge_options, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MergeTableCells', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MergeTableCells', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for move_file
  # Move file
  # @param src_path Source file path e.g. &#39;/src.ext&#39;
  # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to move
  # @return [nil]
  describe 'move_file test' do
    it 'should work' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      paramsrc_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'MoveFile', paramsrc_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'srcPath', paramsrc_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcPath', paramsrc_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcPath', paramsrc_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'MoveFile', paramdest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'destPath', paramdest_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destPath', paramdest_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destPath', paramdest_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid src_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'MoveFile', paramsrc_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'srcStorageName', paramsrc_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'MoveFile', paramdest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'destStorageName', paramdest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destStorageName', paramdest_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'destStorageName', paramdest_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid version_id' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFile', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFile', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFile', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'MoveFile', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'MoveFile', paramversion_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFile', 'versionId', paramversion_id)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_file_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFile', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'versionId', paramversion_id, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFile', 'versionId', paramversion_id, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for move_folder
  # Move folder
  # @param src_path Folder path to move e.g. &#39;/folder&#39;
  # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'move_folder test' do
    it 'should work' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.move_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid src_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      paramsrc_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcPath', 'MoveFolder', paramsrc_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'srcPath', paramsrc_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'srcPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcPath', paramsrc_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcPath', paramsrc_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_path' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destPath', 'MoveFolder', paramdest_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'destPath', paramdest_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'destPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destPath', paramdest_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destPath', paramdest_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid src_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('srcStorageName', 'MoveFolder', paramsrc_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'srcStorageName', paramsrc_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'srcStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'srcStorageName', paramsrc_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_storage_name' do
      paramsrc_path = AsposeSlidesCloud::SpecUtils.get_param_value('srcPath', 'MoveFolder', 'String')
      paramdest_path = AsposeSlidesCloud::SpecUtils.get_param_value('destPath', 'MoveFolder', 'String')
      paramsrc_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('srcStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.get_param_value('destStorageName', 'MoveFolder', 'String')
      paramdest_storage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destStorageName', 'MoveFolder', paramdest_storage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveFolder', 'destStorageName', paramdest_storage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_folder_with_http_info(paramsrc_path, paramdest_path, paramsrc_storage_name, paramdest_storage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveFolder', 'destStorageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destStorageName', paramdest_storage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveFolder', 'destStorageName', paramdest_storage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for move_section
  # Move presentation section to a specified position.
  # @param name Document name.
  # @param section_index The position of the section to be reordered.
  # @param new_position The new position of the reordered section.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'move_section test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'MoveSection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid section_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sectionIndex', 'MoveSection', paramsection_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'sectionIndex', paramsection_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'sectionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      paramnew_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newPosition', 'MoveSection', paramnew_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'newPosition', paramnew_position)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'newPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'newPosition', paramnew_position, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'newPosition', paramnew_position, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'MoveSection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'MoveSection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'MoveSection', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSection', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'MoveSection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_section_with_http_info(paramname, paramsection_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for move_slide
  # Reorder presentation slide position.
  # @param name Document name.
  # @param slide_index The position of the slide to be reordered.
  # @param new_position The new position of the reordered slide.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'move_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'MoveSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'MoveSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_position' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      paramnew_position = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newPosition', 'MoveSlide', paramnew_position, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'newPosition', paramnew_position)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'newPosition')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'newPosition', paramnew_position, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'newPosition', paramnew_position, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'MoveSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'MoveSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'MoveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'MoveSlide', 'Integer')
      paramnew_position = AsposeSlidesCloud::SpecUtils.get_param_value('newPosition', 'MoveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'MoveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'MoveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'MoveSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('MoveSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.move_slide_with_http_info(paramname, paramslide_index, paramnew_position, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('MoveSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('MoveSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for notes_slide_exists
  # Get info whether a notes slide exists.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [EntityExists]
  describe 'notes_slide_exists test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'NotesSlideExists', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExists', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'NotesSlideExists', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExists', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'NotesSlideExists', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExists', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'NotesSlideExists', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExists', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'NotesSlideExists', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExists', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExists', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'NotesSlideExists', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'NotesSlideExists', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExists', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_with_http_info(paramname, paramslide_index, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExists', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExists', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for notes_slide_exists_online
  # Get info whether a notes slide exists.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [EntityExists]
  describe 'notes_slide_exists_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'NotesSlideExistsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExistsOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExistsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExistsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_online_with_http_info(paramdocument, paramslide_index, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'NotesSlideExistsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExistsOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExistsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'NotesSlideExistsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExistsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExistsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'NotesSlideExistsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExistsOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExistsOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'NotesSlideExistsOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExistsOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExistsOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'NotesSlideExistsOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'NotesSlideExistsOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'NotesSlideExistsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'NotesSlideExistsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('NotesSlideExistsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.notes_slide_exists_online_with_http_info(paramdocument, paramslide_index, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('NotesSlideExistsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('NotesSlideExistsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for object_exists
  # Check if file or folder exists
  # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID
  # @return [ObjectExist]
  describe 'object_exists test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.object_exists_with_http_info(parampath, paramstorage_name, paramversion_id)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'ObjectExists', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.object_exists_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'ObjectExists', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.object_exists_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid version_id' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'ObjectExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'ObjectExists', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.get_param_value('versionId', 'ObjectExists', 'String')
      paramversion_id = AsposeSlidesCloud::SpecUtils.invalidize_param_value('versionId', 'ObjectExists', paramversion_id, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ObjectExists', 'versionId', paramversion_id)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.object_exists_with_http_info(parampath, paramstorage_name, paramversion_id)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ObjectExists', 'versionId')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'versionId', paramversion_id, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ObjectExists', 'versionId', paramversion_id, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for ordered_merge
  # Merge the presentation with other presentations or some of their slides specified in the request parameter.
  # @param name Document name.
  # @param request OrderedMergeRequest with a list of presentations and slide indices to merge.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'ordered_merge test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'OrderedMerge', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('OrderedMerge', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid request' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.invalidize_param_value('request', 'OrderedMerge', paramrequest, 'OrderedMergeRequest')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', 'request', paramrequest)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('OrderedMerge', 'request')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'request', paramrequest, 'OrderedMergeRequest')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'request', paramrequest, 'OrderedMergeRequest')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'OrderedMerge', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('OrderedMerge', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'OrderedMerge', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('OrderedMerge', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'OrderedMerge', 'String')
      paramrequest = AsposeSlidesCloud::SpecUtils.get_param_value('request', 'OrderedMerge', 'OrderedMergeRequest')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'OrderedMerge', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'OrderedMerge', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'OrderedMerge', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('OrderedMerge', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.ordered_merge_with_http_info(paramname, paramrequest, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('OrderedMerge', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('OrderedMerge', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for pipeline
  # Performs slides pipeline.
  # @param pipeline A Pipeline object.
  # @param [Hash] opts the optional parameters
  # @option opts [File[]] :files Files to upload with the pipeline
  # @return [File]
  describe 'pipeline test' do
    it 'should work' do
      parampipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'Pipeline', 'Pipeline')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'Pipeline', 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('Pipeline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.pipeline_with_http_info(parampipeline, paramfiles)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Pipeline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid pipeline' do
      parampipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'Pipeline', 'Pipeline')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'Pipeline', 'File[]')
      parampipeline = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pipeline', 'Pipeline', parampipeline, 'Pipeline')
      AsposeSlidesCloud::SpecUtils.initialize('Pipeline', 'pipeline', parampipeline)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.pipeline_with_http_info(parampipeline, paramfiles)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Pipeline', 'pipeline')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Pipeline', 'pipeline', parampipeline, 'Pipeline')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Pipeline', 'pipeline', parampipeline, 'Pipeline')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid files' do
      parampipeline = AsposeSlidesCloud::SpecUtils.get_param_value('pipeline', 'Pipeline', 'Pipeline')
      paramfiles = AsposeSlidesCloud::SpecUtils.get_param_value('files', 'Pipeline', 'File[]')
      paramfiles = AsposeSlidesCloud::SpecUtils.invalidize_param_value('files', 'Pipeline', paramfiles, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('Pipeline', 'files', paramfiles)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.pipeline_with_http_info(parampipeline, paramfiles)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Pipeline', 'files')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Pipeline', 'files', paramfiles, 'File[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Pipeline', 'files', paramfiles, 'File[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for reorder_slides
  # Reorder presentation slides positions.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer[]] :old_positions A comma separated array of positions of slides to be reordered.
  # @option opts [Integer[]] :new_positions A comma separated array of new slide positions.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slides]
  describe 'reorder_slides test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReorderSlides', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_positions' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldPositions', 'ReorderSlides', paramold_positions, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'oldPositions', paramold_positions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'oldPositions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'oldPositions', paramold_positions, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'oldPositions', paramold_positions, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_positions' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newPositions', 'ReorderSlides', paramnew_positions, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'newPositions', paramnew_positions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'newPositions')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'newPositions', paramnew_positions, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'newPositions', paramnew_positions, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReorderSlides', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReorderSlides', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReorderSlides', 'String')
      paramold_positions = AsposeSlidesCloud::SpecUtils.get_param_value('oldPositions', 'ReorderSlides', 'Integer[]')
      paramnew_positions = AsposeSlidesCloud::SpecUtils.get_param_value('newPositions', 'ReorderSlides', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReorderSlides', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReorderSlides', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReorderSlides', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReorderSlides', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.reorder_slides_with_http_info(paramname, paramold_positions, paramnew_positions, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReorderSlides', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReorderSlides', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_font
  # Replaces specified font and returns presentation fonts info.
  # @param name Document name.
  # @param source_font Source font name.
  # @param target_font Target font name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :embed Embed target font.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [FontsData]
  describe 'replace_font test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplaceFont', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_font' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceFont', 'ReplaceFont', paramsource_font, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'sourceFont', paramsource_font)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'sourceFont')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'sourceFont', paramsource_font, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'sourceFont', paramsource_font, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid target_font' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.invalidize_param_value('targetFont', 'ReplaceFont', paramtarget_font, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'targetFont', paramtarget_font)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'targetFont')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'targetFont', paramtarget_font, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'targetFont', paramtarget_font, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid embed' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.invalidize_param_value('embed', 'ReplaceFont', paramembed, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'embed', paramembed)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'embed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'embed', paramembed, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'embed', paramembed, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceFont', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplaceFont', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplaceFont', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceFont', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFont', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFont', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'ReplaceFont', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFont', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_with_http_info(paramname, paramsource_font, paramtarget_font, paramembed, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFont', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFont', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_font_online
  # Replaces specified font and returns presentation.
  # @param document Document data.
  # @param source_font Source font name.
  # @param target_font Target font name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :embed Embed target font.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [File]
  describe 'replace_font_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplaceFontOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid source_font' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      paramsource_font = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sourceFont', 'ReplaceFontOnline', paramsource_font, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'sourceFont', paramsource_font)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'sourceFont')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'sourceFont', paramsource_font, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'sourceFont', paramsource_font, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid target_font' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.invalidize_param_value('targetFont', 'ReplaceFontOnline', paramtarget_font, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'targetFont', paramtarget_font)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'targetFont')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'targetFont', paramtarget_font, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'targetFont', paramtarget_font, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid embed' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.invalidize_param_value('embed', 'ReplaceFontOnline', paramembed, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'embed', paramembed)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'embed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'embed', paramembed, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'embed', paramembed, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceFontOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceFontOnline', 'File')
      paramsource_font = AsposeSlidesCloud::SpecUtils.get_param_value('sourceFont', 'ReplaceFontOnline', 'String')
      paramtarget_font = AsposeSlidesCloud::SpecUtils.get_param_value('targetFont', 'ReplaceFontOnline', 'String')
      paramembed = AsposeSlidesCloud::SpecUtils.get_param_value('embed', 'ReplaceFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'ReplaceFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'ReplaceFontOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceFontOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_font_online_with_http_info(paramdocument, paramsource_font, paramtarget_font, paramembed, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceFontOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceFontOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_image
  # Replaces image by the specified index.
  # @param name Document name.
  # @param image_index Image index.
  # @param image Image data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [nil]
  describe 'replace_image test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplaceImage', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('imageIndex', 'ReplaceImage', paramimage_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'imageIndex', paramimage_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'imageIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'imageIndex', paramimage_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'imageIndex', paramimage_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('image', 'ReplaceImage', paramimage, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'image', paramimage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'image')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'image', paramimage, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'image', paramimage, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceImage', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplaceImage', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceImage', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImage', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImage', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImage', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceImage', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplaceImage', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImage', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_with_http_info(paramname, paramimage_index, paramimage, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImage', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImage', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_image_online
  # Replaces image by the specified index and returns updated document. 
  # @param document Document data.
  # @param image_index Image index.
  # @param image Image data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Password.
  # @return [File]
  describe 'replace_image_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceImageOnline', 'File')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImageOnline', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImageOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImageOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImageOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_online_with_http_info(paramdocument, paramimage_index, paramimage, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceImageOnline', 'File')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImageOnline', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImageOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImageOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplaceImageOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImageOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_online_with_http_info(paramdocument, paramimage_index, paramimage, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImageOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceImageOnline', 'File')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImageOnline', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImageOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImageOnline', 'String')
      paramimage_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('imageIndex', 'ReplaceImageOnline', paramimage_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImageOnline', 'imageIndex', paramimage_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_online_with_http_info(paramdocument, paramimage_index, paramimage, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImageOnline', 'imageIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'imageIndex', paramimage_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'imageIndex', paramimage_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid image' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceImageOnline', 'File')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImageOnline', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImageOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImageOnline', 'String')
      paramimage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('image', 'ReplaceImageOnline', paramimage, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImageOnline', 'image', paramimage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_online_with_http_info(paramdocument, paramimage_index, paramimage, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImageOnline', 'image')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'image', paramimage, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'image', paramimage, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceImageOnline', 'File')
      paramimage_index = AsposeSlidesCloud::SpecUtils.get_param_value('imageIndex', 'ReplaceImageOnline', 'Integer')
      paramimage = AsposeSlidesCloud::SpecUtils.get_param_value('image', 'ReplaceImageOnline', 'File')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceImageOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceImageOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceImageOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_image_online_with_http_info(paramdocument, paramimage_index, paramimage, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceImageOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceImageOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_presentation_regex
  # Replace text with a new value using a regex.
  # @param name Document name.
  # @param pattern Text value pattern to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentReplaceResult]
  describe 'replace_presentation_regex test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplacePresentationRegex', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid pattern' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pattern', 'ReplacePresentationRegex', parampattern, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'pattern', parampattern)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'pattern')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'pattern', parampattern, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'pattern', parampattern, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplacePresentationRegex', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplacePresentationRegex', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplacePresentationRegex', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplacePresentationRegex', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationRegex', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegex', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegex', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegex', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegex', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationRegex', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplacePresentationRegex', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegex', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_with_http_info(paramname, parampattern, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegex', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegex', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_presentation_regex_online
  # Replace text with a new value using a regex.
  # @param document Document data.
  # @param pattern Text regex pattern to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'replace_presentation_regex_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplacePresentationRegexOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegexOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid pattern' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      parampattern = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pattern', 'ReplacePresentationRegexOnline', parampattern, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', 'pattern', parampattern)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegexOnline', 'pattern')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'pattern', parampattern, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'pattern', parampattern, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplacePresentationRegexOnline', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegexOnline', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplacePresentationRegexOnline', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegexOnline', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationRegexOnline', 'File')
      parampattern = AsposeSlidesCloud::SpecUtils.get_param_value('pattern', 'ReplacePresentationRegexOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationRegexOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationRegexOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationRegexOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplacePresentationRegexOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationRegexOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_regex_online_with_http_info(paramdocument, parampattern, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationRegexOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationRegexOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_presentation_text
  # Replace text with a new value.
  # @param name Document name.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [BOOLEAN] :whole_words_only True to replace whole words only.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentReplaceResult]
  describe 'replace_presentation_text test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplacePresentationText', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplacePresentationText', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplacePresentationText', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplacePresentationText', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid whole_words_only' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.invalidize_param_value('wholeWordsOnly', 'ReplacePresentationText', paramwhole_words_only, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'wholeWordsOnly', paramwhole_words_only)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'wholeWordsOnly')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplacePresentationText', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplacePresentationText', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplacePresentationText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationText', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplacePresentationText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplacePresentationText', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationText', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_with_http_info(paramname, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationText', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_presentation_text_online
  # Replace text with a new value.
  # @param document Document data.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [BOOLEAN] :whole_words_only True to replace whole words only.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'replace_presentation_text_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplacePresentationTextOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplacePresentationTextOnline', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplacePresentationTextOnline', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplacePresentationTextOnline', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid whole_words_only' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.invalidize_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', paramwhole_words_only, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'wholeWordsOnly', paramwhole_words_only)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'wholeWordsOnly')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'wholeWordsOnly', paramwhole_words_only, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplacePresentationTextOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplacePresentationTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplacePresentationTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplacePresentationTextOnline', 'BOOLEAN')
      paramwhole_words_only = AsposeSlidesCloud::SpecUtils.get_param_value('wholeWordsOnly', 'ReplacePresentationTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplacePresentationTextOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplacePresentationTextOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplacePresentationTextOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_presentation_text_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramignore_case, paramwhole_words_only, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplacePresentationTextOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplacePresentationTextOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_slide_text
  # Replace text with a new value.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideReplaceResult]
  describe 'replace_slide_text test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplaceSlideText', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'ReplaceSlideText', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplaceSlideText', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplaceSlideText', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplaceSlideText', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceSlideText', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplaceSlideText', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceSlideText', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideText', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideText', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideText', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideText', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideText', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceSlideText', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplaceSlideText', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideText', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_with_http_info(paramname, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideText', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideText', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_slide_text_online
  # Replace slide text with a new value.
  # @param document Document data.
  # @param slide_index Index of target slide.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ignore_case True if character case must be ignored.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'replace_slide_text_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplaceSlideTextOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'ReplaceSlideTextOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplaceSlideTextOnline', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplaceSlideTextOnline', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid ignore_case' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.invalidize_param_value('ignoreCase', 'ReplaceSlideTextOnline', paramignore_case, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'ignoreCase', paramignore_case)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'ignoreCase')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'ignoreCase', paramignore_case, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceSlideTextOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'ReplaceSlideTextOnline', 'Integer')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceSlideTextOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceSlideTextOnline', 'String')
      paramignore_case = AsposeSlidesCloud::SpecUtils.get_param_value('ignoreCase', 'ReplaceSlideTextOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceSlideTextOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceSlideTextOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceSlideTextOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_slide_text_online_with_http_info(paramdocument, paramslide_index, paramold_value, paramnew_value, paramignore_case, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceSlideTextOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceSlideTextOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_text_formatting
  # Finds and replaces text in presentation with given format.
  # @param name Document name.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [PortionFormat] :portion_format Portion format.
  # @option opts [BOOLEAN] :with_masters Text replacement includes master slides.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'replace_text_formatting test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'ReplaceTextFormatting', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplaceTextFormatting', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplaceTextFormatting', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionFormat', 'ReplaceTextFormatting', paramportion_format, 'PortionFormat')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'portionFormat', paramportion_format)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'portionFormat')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'portionFormat', paramportion_format, 'PortionFormat')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'portionFormat', paramportion_format, 'PortionFormat')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_masters' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withMasters', 'ReplaceTextFormatting', paramwith_masters, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'withMasters', paramwith_masters)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'withMasters')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'withMasters', paramwith_masters, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'withMasters', paramwith_masters, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceTextFormatting', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'ReplaceTextFormatting', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'ReplaceTextFormatting', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormatting', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormatting', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormatting', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormatting', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormatting', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'ReplaceTextFormatting', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'ReplaceTextFormatting', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormatting', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_with_http_info(paramname, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormatting', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormatting', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for replace_text_formatting_online
  # Finds and replaces text in presentation with given format.
  # @param document Document data.
  # @param old_value Text value to be replaced.
  # @param new_value Text value to replace with.
  # @param [Hash] opts the optional parameters
  # @option opts [PortionFormat] :portion_format Portion format.
  # @option opts [BOOLEAN] :with_masters Text replacement includes master slides.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'replace_text_formatting_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'ReplaceTextFormattingOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid old_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      paramold_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('oldValue', 'ReplaceTextFormattingOnline', paramold_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'oldValue', paramold_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'oldValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'oldValue', paramold_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'oldValue', paramold_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid new_value' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.invalidize_param_value('newValue', 'ReplaceTextFormattingOnline', paramnew_value, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'newValue', paramnew_value)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'newValue')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'newValue', paramnew_value, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'newValue', paramnew_value, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionFormat', 'ReplaceTextFormattingOnline', paramportion_format, 'PortionFormat')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'portionFormat', paramportion_format)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'portionFormat')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'portionFormat', paramportion_format, 'PortionFormat')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'portionFormat', paramportion_format, 'PortionFormat')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid with_masters' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.invalidize_param_value('withMasters', 'ReplaceTextFormattingOnline', paramwith_masters, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'withMasters', paramwith_masters)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'withMasters')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'withMasters', paramwith_masters, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'withMasters', paramwith_masters, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'ReplaceTextFormattingOnline', 'File')
      paramold_value = AsposeSlidesCloud::SpecUtils.get_param_value('oldValue', 'ReplaceTextFormattingOnline', 'String')
      paramnew_value = AsposeSlidesCloud::SpecUtils.get_param_value('newValue', 'ReplaceTextFormattingOnline', 'String')
      paramportion_format = AsposeSlidesCloud::SpecUtils.get_param_value('portionFormat', 'ReplaceTextFormattingOnline', 'PortionFormat')
      paramwith_masters = AsposeSlidesCloud::SpecUtils.get_param_value('withMasters', 'ReplaceTextFormattingOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'ReplaceTextFormattingOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'ReplaceTextFormattingOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('ReplaceTextFormattingOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.replace_text_formatting_online_with_http_info(paramdocument, paramold_value, paramnew_value, paramportion_format, paramwith_masters, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('ReplaceTextFormattingOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('ReplaceTextFormattingOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_math_portion
  # Convert Mathematical Text to MathML Format and saves result to the storage
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param format Format.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @return [nil]
  describe 'save_math_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SaveMathPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveMathPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SaveMathPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'SaveMathPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'SaveMathPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveMathPortion', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveMathPortion', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveMathPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SaveMathPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveMathPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveMathPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveMathPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'SaveMathPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'SaveMathPortion', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveMathPortion', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveMathPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveMathPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveMathPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveMathPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveMathPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_math_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramformat, paramout_path, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveMathPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveMathPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_presentation
  # Save a presentation to a specified format.
  # @param name Document name.
  # @param format Export format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [Integer[]] :slides The indices of the slides to be saved. If not specified, all slides are saved by default.
  # @return [nil]
  describe 'save_presentation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SavePresentation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SavePresentation', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SavePresentation', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SavePresentation', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SavePresentation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SavePresentation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SavePresentation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SavePresentation', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slides' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SavePresentation', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SavePresentation', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SavePresentation', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SavePresentation', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SavePresentation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SavePresentation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SavePresentation', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SavePresentation', 'String')
      paramslides = AsposeSlidesCloud::SpecUtils.get_param_value('slides', 'SavePresentation', 'Integer[]')
      paramslides = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slides', 'SavePresentation', paramslides, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('SavePresentation', 'slides', paramslides)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_presentation_with_http_info(paramname, paramformat, paramout_path, paramoptions, parampassword, paramfolder, paramstorage, paramfonts_folder, paramslides)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SavePresentation', 'slides')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'slides', paramslides, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SavePresentation', 'slides', paramslides, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_shape
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [nil]
  describe 'save_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SaveShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SaveShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveShape', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveShape', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SaveShape', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'SaveShape', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'SaveShape', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'SaveShape', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SaveShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SaveShape', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'SaveShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_shape_online
  # Render shape to specified picture format.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [IShapeExportOptions] :options Export options.
  # @return [nil]
  describe 'save_shape_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SaveShapeOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveShapeOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SaveShapeOnline', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveShapeOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveShapeOnline', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'SaveShapeOnline', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'SaveShapeOnline', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'SaveShapeOnline', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveShapeOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveShapeOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SaveShapeOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveShapeOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveShapeOnline', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveShapeOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveShapeOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveShapeOnline', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveShapeOnline', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveShapeOnline', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveShapeOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveShapeOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveShapeOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveShapeOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveShapeOnline', 'IShapeExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SaveShapeOnline', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveShapeOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_shape_online_with_http_info(paramdocument, paramslide_index, paramshape_index, paramformat, paramout_path, paramscale_x, paramscale_y, parambounds, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveShapeOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveShapeOnline', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_slide
  # Save a slide to a specified format.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param out_path Path to upload the output file to.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [Integer] :width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @return [nil]
  describe 'save_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SaveSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveSlide', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveSlide', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SaveSlide', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'SaveSlide', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'SaveSlide', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SaveSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlide', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlide', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlide', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlide', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlide', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlide', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlide', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SaveSlide', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlide', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_with_http_info(paramname, paramslide_index, paramformat, paramout_path, paramoptions, paramwidth, paramheight, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlide', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlide', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_slide_online
  # Save a slide to a specified format.
  # @param document Document data.
  # @param slide_index Slide index.
  # @param format Output file format.
  # @param out_path Path to save result.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [Integer] :height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Storage folder containing custom fonts to be used with the document.
  # @option opts [ExportOptions] :options Export options.
  # @return [nil]
  describe 'save_slide_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SaveSlideOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveSlideOnline', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveSlideOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveSlideOnline', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'SaveSlideOnline', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'SaveSlideOnline', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveSlideOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveSlideOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SaveSlideOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SaveSlideOnline', 'File')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSlideOnline', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSlideOnline', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSlideOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SaveSlideOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SaveSlideOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSlideOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSlideOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSlideOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSlideOnline', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SaveSlideOnline', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSlideOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_slide_online_with_http_info(paramdocument, paramslide_index, paramformat, paramout_path, paramwidth, paramheight, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSlideOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSlideOnline', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for save_special_slide_shape
  # Render shape to specified picture format.
  # @param name Presentation name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Index of shape starting from 1
  # @param format Export picture format.
  # @param out_path Output path.
  # @param [Hash] opts the optional parameters
  # @option opts [IShapeExportOptions] :options export options
  # @option opts [Float] :scale_x X scale ratio.
  # @option opts [Float] :scale_y Y scale ratio.
  # @option opts [String] :bounds Shape thumbnail bounds type.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Presentation folder.
  # @option opts [String] :storage Presentation storage.
  # @option opts [String] :fonts_folder Fonts folder.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [nil]
  describe 'save_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SaveSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SaveSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'SaveSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SaveSpecialSlideShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SaveSpecialSlideShape', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid out_path' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.invalidize_param_value('outPath', 'SaveSpecialSlideShape', paramout_path, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'outPath', paramout_path)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'outPath')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'outPath', paramout_path, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'outPath', paramout_path, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SaveSpecialSlideShape', paramoptions, 'IShapeExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'options', paramoptions, 'IShapeExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_x' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramscale_x = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleX', 'SaveSpecialSlideShape', paramscale_x, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'scaleX', paramscale_x)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'scaleX')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'scaleX', paramscale_x, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'scaleX', paramscale_x, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid scale_y' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramscale_y = AsposeSlidesCloud::SpecUtils.invalidize_param_value('scaleY', 'SaveSpecialSlideShape', paramscale_y, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'scaleY', paramscale_y)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'scaleY')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'scaleY', paramscale_y, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'scaleY', paramscale_y, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid bounds' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      parambounds = AsposeSlidesCloud::SpecUtils.invalidize_param_value('bounds', 'SaveSpecialSlideShape', parambounds, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'bounds', parambounds)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'bounds')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'bounds', parambounds, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'bounds', parambounds, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SaveSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SaveSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SaveSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SaveSpecialSlideShape', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SaveSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SaveSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SaveSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SaveSpecialSlideShape', 'Integer')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SaveSpecialSlideShape', 'String')
      paramout_path = AsposeSlidesCloud::SpecUtils.get_param_value('outPath', 'SaveSpecialSlideShape', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SaveSpecialSlideShape', 'IShapeExportOptions')
      paramscale_x = AsposeSlidesCloud::SpecUtils.get_param_value('scaleX', 'SaveSpecialSlideShape', 'Float')
      paramscale_y = AsposeSlidesCloud::SpecUtils.get_param_value('scaleY', 'SaveSpecialSlideShape', 'Float')
      parambounds = AsposeSlidesCloud::SpecUtils.get_param_value('bounds', 'SaveSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SaveSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SaveSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SaveSpecialSlideShape', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'SaveSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'SaveSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SaveSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.save_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramformat, paramout_path, paramoptions, paramscale_x, paramscale_y, parambounds, parampassword, paramfolder, paramstorage, paramfonts_folder, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SaveSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SaveSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_animation
  # Set slide animation.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param animation Animation DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'set_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid animation' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.invalidize_param_value('animation', 'SetAnimation', paramanimation, 'SlideAnimation')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'animation', paramanimation)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'animation')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'animation', paramanimation, 'SlideAnimation')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'animation', paramanimation, 'SlideAnimation')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetAnimation', 'Integer')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_animation_with_http_info(paramname, paramslide_index, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_background
  # Set background for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param background Slide background update data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'set_background test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetBackground', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetBackground', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid background' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      parambackground = AsposeSlidesCloud::SpecUtils.invalidize_param_value('background', 'SetBackground', parambackground, 'SlideBackground')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'background', parambackground)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'background')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'background', parambackground, 'SlideBackground')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'background', parambackground, 'SlideBackground')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetBackground', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetBackground', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackground', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackground', 'Integer')
      parambackground = AsposeSlidesCloud::SpecUtils.get_param_value('background', 'SetBackground', 'SlideBackground')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackground', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackground', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetBackground', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackground', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_with_http_info(paramname, paramslide_index, parambackground, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackground', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackground', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_background_color
  # Set background color for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param color Slide background target color in RRGGBB format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideBackground]
  describe 'set_background_color test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetBackgroundColor', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetBackgroundColor', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid color' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      paramcolor = AsposeSlidesCloud::SpecUtils.invalidize_param_value('color', 'SetBackgroundColor', paramcolor, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'color', paramcolor)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'color')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'color', paramcolor, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'color', paramcolor, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetBackgroundColor', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetBackgroundColor', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetBackgroundColor', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetBackgroundColor', 'Integer')
      paramcolor = AsposeSlidesCloud::SpecUtils.get_param_value('color', 'SetBackgroundColor', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetBackgroundColor', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetBackgroundColor', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetBackgroundColor', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetBackgroundColor', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_background_color_with_http_info(paramname, paramslide_index, paramcolor, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetBackgroundColor', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetBackgroundColor', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_chart_axis
  # Set chart axis.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param axis_type Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical.
  # @param axis Axis DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Axis]
  describe 'set_chart_axis test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetChartAxis', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetChartAxis', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SetChartAxis', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid axis_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('axisType', 'SetChartAxis', paramaxis_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'axisType', paramaxis_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'axisType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'axisType', paramaxis_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'axisType', paramaxis_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid axis' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.invalidize_param_value('axis', 'SetChartAxis', paramaxis, 'Axis')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'axis', paramaxis)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'axis')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'axis', paramaxis, 'Axis')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'axis', paramaxis, 'Axis')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetChartAxis', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetChartAxis', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartAxis', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartAxis', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartAxis', 'Integer')
      paramaxis_type = AsposeSlidesCloud::SpecUtils.get_param_value('axisType', 'SetChartAxis', 'String')
      paramaxis = AsposeSlidesCloud::SpecUtils.get_param_value('axis', 'SetChartAxis', 'Axis')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartAxis', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartAxis', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetChartAxis', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartAxis', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_axis_with_http_info(paramname, paramslide_index, paramshape_index, paramaxis_type, paramaxis, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartAxis', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartAxis', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_chart_legend
  # Set chart axis.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param legend Chart legend DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Legend]
  describe 'set_chart_legend test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetChartLegend', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetChartLegend', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SetChartLegend', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid legend' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramlegend = AsposeSlidesCloud::SpecUtils.invalidize_param_value('legend', 'SetChartLegend', paramlegend, 'Legend')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'legend', paramlegend)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'legend')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'legend', paramlegend, 'Legend')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'legend', paramlegend, 'Legend')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetChartLegend', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetChartLegend', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartLegend', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartLegend', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartLegend', 'Integer')
      paramlegend = AsposeSlidesCloud::SpecUtils.get_param_value('legend', 'SetChartLegend', 'Legend')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartLegend', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartLegend', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetChartLegend', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartLegend', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_legend_with_http_info(paramname, paramslide_index, paramshape_index, paramlegend, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartLegend', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartLegend', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_chart_series_group
  # Set a series group in a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must be a chart).
  # @param series_group_index Series group index.
  # @param series_group Series group DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'set_chart_series_group test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetChartSeriesGroup', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetChartSeriesGroup', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SetChartSeriesGroup', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_group_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesGroupIndex', 'SetChartSeriesGroup', paramseries_group_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'seriesGroupIndex', paramseries_group_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'seriesGroupIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'seriesGroupIndex', paramseries_group_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'seriesGroupIndex', paramseries_group_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_group' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramseries_group = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesGroup', 'SetChartSeriesGroup', paramseries_group, 'ChartSeriesGroup')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'seriesGroup', paramseries_group)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'seriesGroup')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'seriesGroup', paramseries_group, 'ChartSeriesGroup')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'seriesGroup', paramseries_group, 'ChartSeriesGroup')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetChartSeriesGroup', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetChartSeriesGroup', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartSeriesGroup', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartSeriesGroup', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroupIndex', 'SetChartSeriesGroup', 'Integer')
      paramseries_group = AsposeSlidesCloud::SpecUtils.get_param_value('seriesGroup', 'SetChartSeriesGroup', 'ChartSeriesGroup')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartSeriesGroup', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartSeriesGroup', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetChartSeriesGroup', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartSeriesGroup', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_series_group_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_group_index, paramseries_group, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartSeriesGroup', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartSeriesGroup', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_chart_wall
  # Set 3D chart wall.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param chart_wall_type Chart wall type: floor, sideWall or backWall.
  # @param chart_wall Chart wall DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ChartWall]
  describe 'set_chart_wall test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetChartWall', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetChartWall', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SetChartWall', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid chart_wall_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('chartWallType', 'SetChartWall', paramchart_wall_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'chartWallType', paramchart_wall_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'chartWallType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'chartWallType', paramchart_wall_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'chartWallType', paramchart_wall_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid chart_wall' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.invalidize_param_value('chartWall', 'SetChartWall', paramchart_wall, 'ChartWall')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'chartWall', paramchart_wall)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'chartWall')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'chartWall', paramchart_wall, 'ChartWall')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'chartWall', paramchart_wall, 'ChartWall')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetChartWall', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetChartWall', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetChartWall', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetChartWall', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetChartWall', 'Integer')
      paramchart_wall_type = AsposeSlidesCloud::SpecUtils.get_param_value('chartWallType', 'SetChartWall', 'String')
      paramchart_wall = AsposeSlidesCloud::SpecUtils.get_param_value('chartWall', 'SetChartWall', 'ChartWall')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetChartWall', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetChartWall', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetChartWall', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetChartWall', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_chart_wall_with_http_info(paramname, paramslide_index, paramshape_index, paramchart_wall_type, paramchart_wall, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetChartWall', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetChartWall', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_document_properties
  # Set document properties.
  # @param name Document name.
  # @param properties New properties.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperties]
  describe 'set_document_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetDocumentProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid properties' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.invalidize_param_value('properties', 'SetDocumentProperties', paramproperties, 'DocumentProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', 'properties', paramproperties)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperties', 'properties')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'properties', paramproperties, 'DocumentProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'properties', paramproperties, 'DocumentProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetDocumentProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetDocumentProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperties', 'String')
      paramproperties = AsposeSlidesCloud::SpecUtils.get_param_value('properties', 'SetDocumentProperties', 'DocumentProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetDocumentProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_properties_with_http_info(paramname, paramproperties, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_document_property
  # Set document property.
  # @param name Document name.
  # @param property_name The property name.
  # @param property Property with the value.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [DocumentProperty]
  describe 'set_document_property test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetDocumentProperty', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid property_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('propertyName', 'SetDocumentProperty', paramproperty_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'propertyName', paramproperty_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'propertyName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'propertyName', paramproperty_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid property' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.invalidize_param_value('property', 'SetDocumentProperty', paramproperty, 'DocumentProperty')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'property', paramproperty)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'property')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'property', paramproperty, 'DocumentProperty')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'property', paramproperty, 'DocumentProperty')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetDocumentProperty', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetDocumentProperty', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetDocumentProperty', 'String')
      paramproperty_name = AsposeSlidesCloud::SpecUtils.get_param_value('propertyName', 'SetDocumentProperty', 'String')
      paramproperty = AsposeSlidesCloud::SpecUtils.get_param_value('property', 'SetDocumentProperty', 'DocumentProperty')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetDocumentProperty', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetDocumentProperty', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetDocumentProperty', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetDocumentProperty', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_document_property_with_http_info(paramname, paramproperty_name, paramproperty, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetDocumentProperty', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetDocumentProperty', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_embedded_font
  # Embeds specified font and returns presentation fonts info.
  # @param name Document name.
  # @param font_name Font name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :only_used Only used characters will be embedded.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [FontsData]
  describe 'set_embedded_font test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetEmbeddedFont', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'SetEmbeddedFont', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid only_used' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.invalidize_param_value('onlyUsed', 'SetEmbeddedFont', paramonly_used, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'onlyUsed', paramonly_used)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'onlyUsed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetEmbeddedFont', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetEmbeddedFont', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetEmbeddedFont', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFont', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFont', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFont', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFont', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFont', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFont', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SetEmbeddedFont', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFont', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_with_http_info(paramname, paramfont_name, paramonly_used, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFont', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFont', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_embedded_font_online
  # Embeds specified font and returns presentation.
  # @param document Document data.
  # @param font_name Font name.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :only_used Only used characters will be embedded.
  # @option opts [String] :password Document password.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [File]
  describe 'set_embedded_font_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SetEmbeddedFontOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_name' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      paramfont_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontName', 'SetEmbeddedFontOnline', paramfont_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', 'fontName', paramfont_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontOnline', 'fontName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'fontName', paramfont_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'fontName', paramfont_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid only_used' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.invalidize_param_value('onlyUsed', 'SetEmbeddedFontOnline', paramonly_used, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', 'onlyUsed', paramonly_used)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontOnline', 'onlyUsed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetEmbeddedFontOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontOnline', 'File')
      paramfont_name = AsposeSlidesCloud::SpecUtils.get_param_value('fontName', 'SetEmbeddedFontOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SetEmbeddedFontOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SetEmbeddedFontOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_font_online_with_http_info(paramdocument, paramfont_name, paramonly_used, parampassword, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_embedded_fonts
  # Embeds fonts with specified names and/or fonts from request and returns presentation fonts info.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [File[]] :fonts Font data.
  # @option opts [Integer[]] :font_names Font names.
  # @option opts [BOOLEAN] :only_used Only used characters will be embedded.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [FontsData]
  describe 'set_embedded_fonts test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetEmbeddedFonts', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fonts', 'SetEmbeddedFonts', paramfonts, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'fonts', paramfonts)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'fonts')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'fonts', paramfonts, 'File[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'fonts', paramfonts, 'File[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_names' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramfont_names = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontNames', 'SetEmbeddedFonts', paramfont_names, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'fontNames', paramfont_names)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'fontNames')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'fontNames', paramfont_names, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'fontNames', paramfont_names, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid only_used' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.invalidize_param_value('onlyUsed', 'SetEmbeddedFonts', paramonly_used, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'onlyUsed', paramonly_used)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'onlyUsed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetEmbeddedFonts', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetEmbeddedFonts', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetEmbeddedFonts', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFonts', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFonts', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFonts', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFonts', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetEmbeddedFonts', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetEmbeddedFonts', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFonts', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_with_http_info(paramname, paramfonts, paramfont_names, paramonly_used, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFonts', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFonts', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_embedded_fonts_online
  # Embeds font from request and returns presentation.
  # @param document Document data.
  # @param [Hash] opts the optional parameters
  # @option opts [File[]] :fonts Font data.
  # @option opts [Integer[]] :font_names Font names.
  # @option opts [BOOLEAN] :only_used Only used characters will be embedded.
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'set_embedded_fonts_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SetEmbeddedFontsOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontsOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      paramfonts = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fonts', 'SetEmbeddedFontsOnline', paramfonts, 'File[]')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', 'fonts', paramfonts)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontsOnline', 'fonts')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'fonts', paramfonts, 'File[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'fonts', paramfonts, 'File[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid font_names' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      paramfont_names = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontNames', 'SetEmbeddedFontsOnline', paramfont_names, 'Integer[]')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', 'fontNames', paramfont_names)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontsOnline', 'fontNames')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'fontNames', paramfont_names, 'Integer[]')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'fontNames', paramfont_names, 'Integer[]')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid only_used' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      paramonly_used = AsposeSlidesCloud::SpecUtils.invalidize_param_value('onlyUsed', 'SetEmbeddedFontsOnline', paramonly_used, 'BOOLEAN')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', 'onlyUsed', paramonly_used)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontsOnline', 'onlyUsed')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'onlyUsed', paramonly_used, 'BOOLEAN')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetEmbeddedFontsOnline', 'File')
      paramfonts = AsposeSlidesCloud::SpecUtils.get_param_value('fonts', 'SetEmbeddedFontsOnline', 'File[]')
      paramfont_names = AsposeSlidesCloud::SpecUtils.get_param_value('fontNames', 'SetEmbeddedFontsOnline', 'Integer[]')
      paramonly_used = AsposeSlidesCloud::SpecUtils.get_param_value('onlyUsed', 'SetEmbeddedFontsOnline', 'BOOLEAN')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetEmbeddedFontsOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetEmbeddedFontsOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetEmbeddedFontsOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_embedded_fonts_online_with_http_info(paramdocument, paramfonts, paramfont_names, paramonly_used, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetEmbeddedFontsOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetEmbeddedFontsOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_notes_slide_header_footer
  # Set header/footer the notes slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param dto Header/footer to set.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlideHeaderFooter]
  describe 'set_notes_slide_header_footer test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetNotesSlideHeaderFooter', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetNotesSlideHeaderFooter', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetNotesSlideHeaderFooter', paramdto, 'NotesSlideHeaderFooter')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'dto', paramdto, 'NotesSlideHeaderFooter')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'dto', paramdto, 'NotesSlideHeaderFooter')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetNotesSlideHeaderFooter', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetNotesSlideHeaderFooter', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetNotesSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetNotesSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetNotesSlideHeaderFooter', 'NotesSlideHeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetNotesSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetNotesSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetNotesSlideHeaderFooter', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetNotesSlideHeaderFooter', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_notes_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetNotesSlideHeaderFooter', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetNotesSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_presentation_header_footer
  # Set footers for all slides in a presentation.
  # @param name Document name.
  # @param dto HeaderFooter instance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Document]
  describe 'set_presentation_header_footer test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetPresentationHeaderFooter', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetPresentationHeaderFooter', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetPresentationHeaderFooter', paramdto, 'HeaderFooter')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetPresentationHeaderFooter', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'dto', paramdto, 'HeaderFooter')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'dto', paramdto, 'HeaderFooter')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetPresentationHeaderFooter', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetPresentationHeaderFooter', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetPresentationHeaderFooter', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetPresentationHeaderFooter', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetPresentationHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetPresentationHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetPresentationHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetPresentationHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetPresentationHeaderFooter', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetPresentationHeaderFooter', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_presentation_header_footer_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetPresentationHeaderFooter', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetPresentationHeaderFooter', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_protection
  # Updates presentation protection properties.
  # @param name Document name.
  # @param dto Protection properties.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ProtectionProperties]
  describe 'set_protection test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetProtection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetProtection', paramdto, 'ProtectionProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtection', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'dto', paramdto, 'ProtectionProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'dto', paramdto, 'ProtectionProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetProtection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetProtection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetProtection', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtection', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetProtection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetProtection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_protection_online
  # Sets presentation protection options. 
  # @param document Document data.
  # @param dto Protection properties.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @return [File]
  describe 'set_protection_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetProtectionOnline', 'File')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtectionOnline', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtectionOnline', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtectionOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_online_with_http_info(paramdocument, paramdto, parampassword)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetProtectionOnline', 'File')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtectionOnline', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtectionOnline', 'String')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SetProtectionOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtectionOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_online_with_http_info(paramdocument, paramdto, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtectionOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetProtectionOnline', 'File')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtectionOnline', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtectionOnline', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetProtectionOnline', paramdto, 'ProtectionProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtectionOnline', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_online_with_http_info(paramdocument, paramdto, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtectionOnline', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'dto', paramdto, 'ProtectionProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'dto', paramdto, 'ProtectionProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SetProtectionOnline', 'File')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetProtectionOnline', 'ProtectionProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetProtectionOnline', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetProtectionOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetProtectionOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_protection_online_with_http_info(paramdocument, paramdto, parampassword)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetProtectionOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetProtectionOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_sections
  # Replace existing presentation sections with the ones provided in the sections DTO.
  # @param name Document name.
  # @param sections Sections DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'set_sections test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetSections', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSections', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sections' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sections', 'SetSections', paramsections, 'Sections')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', 'sections', paramsections)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSections', 'sections')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'sections', paramsections, 'Sections')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'sections', paramsections, 'Sections')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetSections', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSections', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetSections', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSections', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSections', 'String')
      paramsections = AsposeSlidesCloud::SpecUtils.get_param_value('sections', 'SetSections', 'Sections')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSections', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSections', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetSections', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSections', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_sections_with_http_info(paramname, paramsections, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSections', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSections', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_shape_geometry_path
  # Sets geometry path to the shape
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param dto Geometry paths DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ShapeBase]
  describe 'set_shape_geometry_path test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetShapeGeometryPath', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetShapeGeometryPath', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SetShapeGeometryPath', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetShapeGeometryPath', paramdto, 'GeometryPaths')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'dto', paramdto, 'GeometryPaths')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'dto', paramdto, 'GeometryPaths')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetShapeGeometryPath', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetShapeGeometryPath', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetShapeGeometryPath', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetShapeGeometryPath', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SetShapeGeometryPath', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetShapeGeometryPath', 'GeometryPaths')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetShapeGeometryPath', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetShapeGeometryPath', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetShapeGeometryPath', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetShapeGeometryPath', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_shape_geometry_path_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetShapeGeometryPath', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetShapeGeometryPath', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_slide_header_footer
  # Set footer the slide.
  # @param name Document name.
  # @param slide_index The position of the slide to be reordered.
  # @param dto Footer to set.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [HeaderFooter]
  describe 'set_slide_header_footer test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetSlideHeaderFooter', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetSlideHeaderFooter', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetSlideHeaderFooter', paramdto, 'HeaderFooter')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'dto', paramdto, 'HeaderFooter')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'dto', paramdto, 'HeaderFooter')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetSlideHeaderFooter', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetSlideHeaderFooter', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideHeaderFooter', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSlideHeaderFooter', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideHeaderFooter', 'HeaderFooter')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideHeaderFooter', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideHeaderFooter', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetSlideHeaderFooter', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideHeaderFooter', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_header_footer_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideHeaderFooter', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideHeaderFooter', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_slide_properties
  # Update presentation slide properties.
  # @param name Document name.
  # @param dto The view properties data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideProperties]
  describe 'set_slide_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetSlideProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetSlideProperties', paramdto, 'SlideProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'dto', paramdto, 'SlideProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'dto', paramdto, 'SlideProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetSlideProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetSlideProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideProperties', 'SlideProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetSlideProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_slide_show_properties
  # Update presentation slide show properties.
  # @param name Document name.
  # @param dto The slide show properties data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideShowProperties]
  describe 'set_slide_show_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetSlideShowProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideShowProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetSlideShowProperties', paramdto, 'SlideShowProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideShowProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'dto', paramdto, 'SlideShowProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'dto', paramdto, 'SlideShowProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetSlideShowProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideShowProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetSlideShowProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideShowProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSlideShowProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetSlideShowProperties', 'SlideShowProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSlideShowProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSlideShowProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetSlideShowProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSlideShowProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_slide_show_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSlideShowProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSlideShowProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_special_slide_animation
  # Set special slide (master, layout, notes) animation.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param animation Animation DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'set_special_slide_animation test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetSpecialSlideAnimation', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SetSpecialSlideAnimation', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'SetSpecialSlideAnimation', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid animation' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.invalidize_param_value('animation', 'SetSpecialSlideAnimation', paramanimation, 'SlideAnimation')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'animation', paramanimation)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'animation')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'animation', paramanimation, 'SlideAnimation')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'animation', paramanimation, 'SlideAnimation')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetSpecialSlideAnimation', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetSpecialSlideAnimation', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetSpecialSlideAnimation', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SetSpecialSlideAnimation', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'SetSpecialSlideAnimation', 'String')
      paramanimation = AsposeSlidesCloud::SpecUtils.get_param_value('animation', 'SetSpecialSlideAnimation', 'SlideAnimation')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetSpecialSlideAnimation', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetSpecialSlideAnimation', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetSpecialSlideAnimation', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetSpecialSlideAnimation', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_special_slide_animation_with_http_info(paramname, paramslide_index, paramslide_type, paramanimation, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetSpecialSlideAnimation', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetSpecialSlideAnimation', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for set_view_properties
  # Update presentation view properties.
  # @param name Document name.
  # @param dto The view properties data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [ViewProperties]
  describe 'set_view_properties test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SetViewProperties', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetViewProperties', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'SetViewProperties', paramdto, 'ViewProperties')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetViewProperties', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'dto', paramdto, 'ViewProperties')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'dto', paramdto, 'ViewProperties')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SetViewProperties', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetViewProperties', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SetViewProperties', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetViewProperties', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SetViewProperties', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'SetViewProperties', 'ViewProperties')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SetViewProperties', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SetViewProperties', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SetViewProperties', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SetViewProperties', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.set_view_properties_with_http_info(paramname, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SetViewProperties', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SetViewProperties', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for split
  # Splitting presentations. Create one image per slide.
  # @param name Document name.
  # @param [Hash] opts the optional parameters
  # @option opts [ExportOptions] :options Export options.
  # @option opts [String] :format Export format. Default value is jpeg.
  # @option opts [Integer] :width The width of created images.
  # @option opts [Integer] :height The height of created images.
  # @option opts [Integer] :from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
  # @option opts [Integer] :to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
  # @option opts [String] :dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @return [SplitDocumentResult]
  describe 'split test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'Split', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'Split', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'Split', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'Split', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'Split', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid from' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramfrom = AsposeSlidesCloud::SpecUtils.invalidize_param_value('from', 'Split', paramfrom, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'from', paramfrom)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'from')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'from', paramfrom, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'from', paramfrom, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid to' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('to', 'Split', paramto, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'to', paramto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'to')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'to', paramto, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'to', paramto, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destFolder', 'Split', paramdest_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'destFolder', paramdest_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'destFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'destFolder', paramdest_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'destFolder', paramdest_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'Split', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'Split', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'Split', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'Split', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'Split', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'Split', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'Split', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'Split', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'Split', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'Split', 'Integer')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'Split', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'Split', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'Split', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'Split', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'Split', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('Split', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_with_http_info(paramname, paramoptions, paramformat, paramwidth, paramheight, paramfrom, paramto, paramdest_folder, parampassword, paramfolder, paramstorage, paramfonts_folder)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('Split', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('Split', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for split_and_save_online
  # Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
  # @param document Document data.
  # @param format ExportFormat
  # @param [Hash] opts the optional parameters
  # @option opts [String] :dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder.
  # @option opts [Integer] :width Slide width.
  # @option opts [Integer] :height Slide height.
  # @option opts [Integer] :from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
  # @option opts [Integer] :to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [ExportOptions] :options Export options.
  # @return [SplitDocumentResult]
  describe 'split_and_save_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SplitAndSaveOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SplitAndSaveOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dest_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('destFolder', 'SplitAndSaveOnline', paramdest_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'destFolder', paramdest_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'destFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'destFolder', paramdest_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'destFolder', paramdest_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'SplitAndSaveOnline', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'SplitAndSaveOnline', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid from' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramfrom = AsposeSlidesCloud::SpecUtils.invalidize_param_value('from', 'SplitAndSaveOnline', paramfrom, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'from', paramfrom)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'from')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'from', paramfrom, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'from', paramfrom, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid to' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('to', 'SplitAndSaveOnline', paramto, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'to', paramto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'to')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'to', paramto, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'to', paramto, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SplitAndSaveOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SplitAndSaveOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SplitAndSaveOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitAndSaveOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitAndSaveOnline', 'String')
      paramdest_folder = AsposeSlidesCloud::SpecUtils.get_param_value('destFolder', 'SplitAndSaveOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitAndSaveOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitAndSaveOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitAndSaveOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitAndSaveOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitAndSaveOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitAndSaveOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitAndSaveOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitAndSaveOnline', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SplitAndSaveOnline', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SplitAndSaveOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_and_save_online_with_http_info(paramdocument, paramformat, paramdest_folder, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitAndSaveOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitAndSaveOnline', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for split_online
  # Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
  # @param document Document data.
  # @param format ExportFormat
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width Slide width.
  # @option opts [Integer] :height Slide height.
  # @option opts [Integer] :from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
  # @option opts [Integer] :to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
  # @option opts [String] :password Document password.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :fonts_folder Custom fonts folder.
  # @option opts [ExportOptions] :options Export options.
  # @return [File]
  describe 'split_online test' do
    it 'should work' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', nil, nil, nil)
      expect(c).to eq(code)
    end

    it 'invalid document' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramdocument = AsposeSlidesCloud::SpecUtils.invalidize_param_value('document', 'SplitOnline', paramdocument, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'document', paramdocument)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'document')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'document', paramdocument, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'document', paramdocument, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid format' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramformat = AsposeSlidesCloud::SpecUtils.invalidize_param_value('format', 'SplitOnline', paramformat, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'format', paramformat)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'format')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'format', paramformat, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'format', paramformat, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid width' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramwidth = AsposeSlidesCloud::SpecUtils.invalidize_param_value('width', 'SplitOnline', paramwidth, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'width', paramwidth)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'width')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'width', paramwidth, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'width', paramwidth, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid height' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramheight = AsposeSlidesCloud::SpecUtils.invalidize_param_value('height', 'SplitOnline', paramheight, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'height', paramheight)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'height')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'height', paramheight, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'height', paramheight, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid from' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramfrom = AsposeSlidesCloud::SpecUtils.invalidize_param_value('from', 'SplitOnline', paramfrom, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'from', paramfrom)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'from')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'from', paramfrom, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'from', paramfrom, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid to' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('to', 'SplitOnline', paramto, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'to', paramto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'to')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'to', paramto, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'to', paramto, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SplitOnline', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SplitOnline', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid fonts_folder' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('fontsFolder', 'SplitOnline', paramfonts_folder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'fontsFolder', paramfonts_folder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'fontsFolder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'fontsFolder', paramfonts_folder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid options' do
      paramdocument = AsposeSlidesCloud::SpecUtils.get_param_value('document', 'SplitOnline', 'File')
      paramformat = AsposeSlidesCloud::SpecUtils.get_param_value('format', 'SplitOnline', 'String')
      paramwidth = AsposeSlidesCloud::SpecUtils.get_param_value('width', 'SplitOnline', 'Integer')
      paramheight = AsposeSlidesCloud::SpecUtils.get_param_value('height', 'SplitOnline', 'Integer')
      paramfrom = AsposeSlidesCloud::SpecUtils.get_param_value('from', 'SplitOnline', 'Integer')
      paramto = AsposeSlidesCloud::SpecUtils.get_param_value('to', 'SplitOnline', 'Integer')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitOnline', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitOnline', 'String')
      paramfonts_folder = AsposeSlidesCloud::SpecUtils.get_param_value('fontsFolder', 'SplitOnline', 'String')
      paramoptions = AsposeSlidesCloud::SpecUtils.get_param_value('options', 'SplitOnline', 'ExportOptions')
      paramoptions = AsposeSlidesCloud::SpecUtils.invalidize_param_value('options', 'SplitOnline', paramoptions, 'ExportOptions')
      AsposeSlidesCloud::SpecUtils.initialize('SplitOnline', 'options', paramoptions)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_online_with_http_info(paramdocument, paramformat, paramwidth, paramheight, paramfrom, paramto, parampassword, paramstorage, paramfonts_folder, paramoptions)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitOnline', 'options')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'options', paramoptions, 'ExportOptions')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitOnline', 'options', paramoptions, 'ExportOptions')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for split_table_cell
  # Split table cell.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param split_type Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan).
  # @param value Split value. In case of splitting by column or row span, the value must be an integer number.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Table]
  describe 'split_table_cell test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'SplitTableCell', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'SplitTableCell', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'SplitTableCell', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'SplitTableCell', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'SplitTableCell', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid split_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('splitType', 'SplitTableCell', paramsplit_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'splitType', paramsplit_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'splitType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'splitType', paramsplit_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'splitType', paramsplit_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid value' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.invalidize_param_value('value', 'SplitTableCell', paramvalue, 'Float')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'value', paramvalue)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'value')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'value', paramvalue, 'Float')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'value', paramvalue, 'Float')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'SplitTableCell', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'SplitTableCell', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'SplitTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'SplitTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'SplitTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'SplitTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'SplitTableCell', 'Integer')
      paramsplit_type = AsposeSlidesCloud::SpecUtils.get_param_value('splitType', 'SplitTableCell', 'String')
      paramvalue = AsposeSlidesCloud::SpecUtils.get_param_value('value', 'SplitTableCell', 'Float')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'SplitTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'SplitTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'SplitTableCell', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('SplitTableCell', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.split_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramsplit_type, paramvalue, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('SplitTableCell', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('SplitTableCell', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for storage_exists
  # Check if storage exists
  # @param storage_name Storage name
  # @param [Hash] opts the optional parameters
  # @return [StorageExist]
  describe 'storage_exists test' do
    it 'should work' do
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'StorageExists', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('StorageExists', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.storage_exists_with_http_info(paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('StorageExists', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid storage_name' do
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'StorageExists', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'StorageExists', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('StorageExists', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.storage_exists_with_http_info(paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('StorageExists', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('StorageExists', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('StorageExists', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_animation_effect
  # Modify an animation effect for a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param effect_index The position of the effect to be modified.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'update_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'UpdateAnimationEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'UpdateAnimationEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_effect_with_http_info(paramname, paramslide_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_animation_interactive_sequence_effect
  # Modify an animation effect for a slide interactive sequence.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param sequence_index The position of the interactive sequence.
  # @param effect_index The position of the effect to be modified.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'update_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_chart_category
  # Update a chart category.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param category_index Category index.
  # @param category Category DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'update_chart_category test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateChartCategory', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateChartCategory', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateChartCategory', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid category_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('categoryIndex', 'UpdateChartCategory', paramcategory_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'categoryIndex', paramcategory_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'categoryIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'categoryIndex', paramcategory_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'categoryIndex', paramcategory_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid category' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramcategory = AsposeSlidesCloud::SpecUtils.invalidize_param_value('category', 'UpdateChartCategory', paramcategory, 'ChartCategory')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'category', paramcategory)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'category')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'category', paramcategory, 'ChartCategory')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'category', paramcategory, 'ChartCategory')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateChartCategory', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateChartCategory', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartCategory', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartCategory', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartCategory', 'Integer')
      paramcategory_index = AsposeSlidesCloud::SpecUtils.get_param_value('categoryIndex', 'UpdateChartCategory', 'Integer')
      paramcategory = AsposeSlidesCloud::SpecUtils.get_param_value('category', 'UpdateChartCategory', 'ChartCategory')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartCategory', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartCategory', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateChartCategory', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartCategory', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_category_with_http_info(paramname, paramslide_index, paramshape_index, paramcategory_index, paramcategory, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartCategory', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartCategory', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_chart_data_point
  # Update a data point in a chart series.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param series_index Series index.
  # @param point_index Data point index.
  # @param data_point Data point DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'update_chart_data_point test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateChartDataPoint', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateChartDataPoint', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateChartDataPoint', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramseries_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesIndex', 'UpdateChartDataPoint', paramseries_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'seriesIndex', paramseries_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'seriesIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'seriesIndex', paramseries_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid point_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      parampoint_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('pointIndex', 'UpdateChartDataPoint', parampoint_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'pointIndex', parampoint_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'pointIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'pointIndex', parampoint_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'pointIndex', parampoint_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid data_point' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramdata_point = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dataPoint', 'UpdateChartDataPoint', paramdata_point, 'DataPoint')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'dataPoint', paramdata_point)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'dataPoint')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'dataPoint', paramdata_point, 'DataPoint')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'dataPoint', paramdata_point, 'DataPoint')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateChartDataPoint', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateChartDataPoint', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartDataPoint', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartDataPoint', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartDataPoint', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartDataPoint', 'Integer')
      parampoint_index = AsposeSlidesCloud::SpecUtils.get_param_value('pointIndex', 'UpdateChartDataPoint', 'Integer')
      paramdata_point = AsposeSlidesCloud::SpecUtils.get_param_value('dataPoint', 'UpdateChartDataPoint', 'DataPoint')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartDataPoint', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartDataPoint', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateChartDataPoint', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartDataPoint', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_data_point_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, parampoint_index, paramdata_point, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartDataPoint', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartDataPoint', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_chart_series
  # Update a series in a chart.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index (must be a chart).
  # @param series_index Series index.
  # @param series Series DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Chart]
  describe 'update_chart_series test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateChartSeries', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateChartSeries', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateChartSeries', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramseries_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('seriesIndex', 'UpdateChartSeries', paramseries_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'seriesIndex', paramseries_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'seriesIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'seriesIndex', paramseries_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'seriesIndex', paramseries_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid series' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramseries = AsposeSlidesCloud::SpecUtils.invalidize_param_value('series', 'UpdateChartSeries', paramseries, 'Series')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'series', paramseries)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'series')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'series', paramseries, 'Series')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'series', paramseries, 'Series')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateChartSeries', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateChartSeries', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateChartSeries', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateChartSeries', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateChartSeries', 'Integer')
      paramseries_index = AsposeSlidesCloud::SpecUtils.get_param_value('seriesIndex', 'UpdateChartSeries', 'Integer')
      paramseries = AsposeSlidesCloud::SpecUtils.get_param_value('series', 'UpdateChartSeries', 'Series')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateChartSeries', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateChartSeries', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateChartSeries', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateChartSeries', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_chart_series_with_http_info(paramname, paramslide_index, paramshape_index, paramseries_index, paramseries, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateChartSeries', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateChartSeries', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_layout_slide
  # Update a layoutSlide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param slide_dto Slide update data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [LayoutSlide]
  describe 'update_layout_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateLayoutSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateLayoutSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideDto', 'UpdateLayoutSlide', paramslide_dto, 'LayoutSlide')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'slideDto', paramslide_dto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'slideDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'slideDto', paramslide_dto, 'LayoutSlide')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'slideDto', paramslide_dto, 'LayoutSlide')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateLayoutSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateLayoutSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateLayoutSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateLayoutSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateLayoutSlide', 'LayoutSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateLayoutSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateLayoutSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateLayoutSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateLayoutSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_layout_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateLayoutSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateLayoutSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_notes_slide
  # Update notes slide properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param dto A NotesSlide object with notes slide data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [NotesSlide]
  describe 'update_notes_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateNotesSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateNotesSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateNotesSlide', paramdto, 'NotesSlide')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'dto', paramdto, 'NotesSlide')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'dto', paramdto, 'NotesSlide')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateNotesSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateNotesSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateNotesSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateNotesSlide', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateNotesSlide', 'NotesSlide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateNotesSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateNotesSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateNotesSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateNotesSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_notes_slide_with_http_info(paramname, paramslide_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateNotesSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateNotesSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_paragraph
  # Update paragraph properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'update_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdateParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdateParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_portion
  # Update portion properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'update_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdatePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdatePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdatePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdatePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'UpdatePortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdatePortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdatePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdatePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdatePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdatePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdatePortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdatePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdatePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdatePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdatePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdatePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdatePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdatePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdatePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdatePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdatePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdatePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_section
  # Update section name.
  # @param name Document name.
  # @param section_index The position of the section to be updated.
  # @param section_name Section name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Sections]
  describe 'update_section test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSection', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid section_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sectionIndex', 'UpdateSection', paramsection_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'sectionIndex', paramsection_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'sectionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'sectionIndex', paramsection_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid section_name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      paramsection_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sectionName', 'UpdateSection', paramsection_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'sectionName', paramsection_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'sectionName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'sectionName', paramsection_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'sectionName', paramsection_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSection', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSection', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSection', 'String')
      paramsection_index = AsposeSlidesCloud::SpecUtils.get_param_value('sectionIndex', 'UpdateSection', 'Integer')
      paramsection_name = AsposeSlidesCloud::SpecUtils.get_param_value('sectionName', 'UpdateSection', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSection', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSection', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSection', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSection', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_section_with_http_info(paramname, paramsection_index, paramsection_name, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSection', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSection', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_shape
  # Update shape properties.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param dto Shape DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'update_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateShape', paramdto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'dto', paramdto, 'ShapeBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'dto', paramdto, 'ShapeBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateShape', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdateShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_shape_with_http_info(paramname, paramslide_index, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_slide
  # Update a slide.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param slide_dto Slide update data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Slide]
  describe 'update_slide test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSlide', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSlide', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideDto', 'UpdateSlide', paramslide_dto, 'Slide')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'slideDto', paramslide_dto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'slideDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'slideDto', paramslide_dto, 'Slide')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'slideDto', paramslide_dto, 'Slide')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSlide', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSlide', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSlide', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSlide', 'Integer')
      paramslide_dto = AsposeSlidesCloud::SpecUtils.get_param_value('slideDto', 'UpdateSlide', 'Slide')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSlide', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSlide', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSlide', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSlide', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_slide_with_http_info(paramname, paramslide_index, paramslide_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSlide', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSlide', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_special_slide_animation_effect
  # Modify an animation effect for a special slide (master, layout, notes).
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param effect_index The position of the effect to be modified.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'update_special_slide_animation_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSpecialSlideAnimationEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'UpdateSpecialSlideAnimationEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSpecialSlideAnimationEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSpecialSlideAnimationEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSpecialSlideAnimationEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_effect_with_http_info(paramname, paramslide_index, paramslide_type, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_special_slide_animation_interactive_sequence_effect
  # Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param sequence_index The position of the interactive sequence.
  # @param effect_index The position of the effect to be modified.
  # @param effect Animation effect DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [SlideAnimation]
  describe 'update_special_slide_animation_interactive_sequence_effect test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sequence_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramsequence_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'sequenceIndex', paramsequence_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parameffect_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', parameffect_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effectIndex', parameffect_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid effect' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parameffect = AsposeSlidesCloud::SpecUtils.invalidize_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', parameffect, 'Effect')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effect')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'effect', parameffect, 'Effect')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramsequence_index = AsposeSlidesCloud::SpecUtils.get_param_value('sequenceIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect_index = AsposeSlidesCloud::SpecUtils.get_param_value('effectIndex', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Integer')
      parameffect = AsposeSlidesCloud::SpecUtils.get_param_value('effect', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'Effect')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSpecialSlideAnimationInteractiveSequenceEffect', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_animation_interactive_sequence_effect_with_http_info(paramname, paramslide_index, paramslide_type, paramsequence_index, parameffect_index, parameffect, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideAnimationInteractiveSequenceEffect', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_special_slide_paragraph
  # Update paragraph properties.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Paragraph]
  describe 'update_special_slide_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSpecialSlideParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSpecialSlideParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'UpdateSpecialSlideParagraph', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateSpecialSlideParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSpecialSlideParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSpecialSlideParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSpecialSlideParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlideParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideParagraph', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdateSpecialSlideParagraph', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideParagraph', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_paragraph_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideParagraph', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideParagraph', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_special_slide_portion
  # Update portion properties.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [Portion]
  describe 'update_special_slide_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSpecialSlidePortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSpecialSlidePortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'UpdateSpecialSlidePortion', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateSpecialSlidePortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'UpdateSpecialSlidePortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateSpecialSlidePortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSpecialSlidePortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSpecialSlidePortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSpecialSlidePortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlidePortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlidePortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateSpecialSlidePortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlidePortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlidePortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlidePortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlidePortion', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdateSpecialSlidePortion', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlidePortion', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_portion_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlidePortion', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlidePortion', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_special_slide_shape
  # Update shape properties.
  # @param name Document name.
  # @param slide_index Parent slide index.
  # @param slide_type Slide type (master, layout or notes).
  # @param shape_index Shape index.
  # @param dto Shape DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @option opts [String] :sub_shape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2).
  # @return [ShapeBase]
  describe 'update_special_slide_shape test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateSpecialSlideShape', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateSpecialSlideShape', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_type' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramslide_type = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideType', 'UpdateSpecialSlideShape', paramslide_type, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'slideType', paramslide_type)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'slideType')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'slideType', paramslide_type, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateSpecialSlideShape', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateSpecialSlideShape', paramdto, 'ShapeBase')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'dto', paramdto, 'ShapeBase')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'dto', paramdto, 'ShapeBase')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateSpecialSlideShape', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateSpecialSlideShape', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateSpecialSlideShape', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid sub_shape' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateSpecialSlideShape', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramslide_type = AsposeSlidesCloud::SpecUtils.get_param_value('slideType', 'UpdateSpecialSlideShape', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateSpecialSlideShape', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateSpecialSlideShape', 'ShapeBase')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateSpecialSlideShape', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateSpecialSlideShape', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.get_param_value('subShape', 'UpdateSpecialSlideShape', 'String')
      paramsub_shape = AsposeSlidesCloud::SpecUtils.invalidize_param_value('subShape', 'UpdateSpecialSlideShape', paramsub_shape, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateSpecialSlideShape', 'subShape', paramsub_shape)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_special_slide_shape_with_http_info(paramname, paramslide_index, paramslide_type, paramshape_index, paramdto, parampassword, paramfolder, paramstorage, paramsub_shape)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateSpecialSlideShape', 'subShape')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateSpecialSlideShape', 'subShape', paramsub_shape, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_table_cell
  # Update the table cell.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param dto Table cell data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TableCell]
  describe 'update_table_cell test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateTableCell', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateTableCell', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateTableCell', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'UpdateTableCell', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'UpdateTableCell', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateTableCell', paramdto, 'TableCell')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'dto', paramdto, 'TableCell')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'dto', paramdto, 'TableCell')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateTableCell', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateTableCell', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCell', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCell', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCell', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCell', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCell', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCell', 'TableCell')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCell', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCell', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateTableCell', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCell', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCell', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCell', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_table_cell_paragraph
  # Updates table cell paragraph.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param dto Paragraph DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Paragraph]
  describe 'update_table_cell_paragraph test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateTableCellParagraph', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateTableCellParagraph', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateTableCellParagraph', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'UpdateTableCellParagraph', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'UpdateTableCellParagraph', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdateTableCellParagraph', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateTableCellParagraph', paramdto, 'Paragraph')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'dto', paramdto, 'Paragraph')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'dto', paramdto, 'Paragraph')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateTableCellParagraph', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateTableCellParagraph', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellParagraph', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellParagraph', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellParagraph', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellParagraph', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellParagraph', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellParagraph', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellParagraph', 'Paragraph')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellParagraph', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellParagraph', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateTableCellParagraph', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellParagraph', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_paragraph_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellParagraph', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellParagraph', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_table_cell_portion
  # Updates table cell portion.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param cell_index Table cell index.
  # @param paragraph_index Paragraph index.
  # @param portion_index Portion index.
  # @param dto Portion DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [Portion]
  describe 'update_table_cell_portion test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateTableCellPortion', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateTableCellPortion', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateTableCellPortion', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'UpdateTableCellPortion', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid cell_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramcell_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('cellIndex', 'UpdateTableCellPortion', paramcell_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'cellIndex', paramcell_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'cellIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'cellIndex', paramcell_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid paragraph_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('paragraphIndex', 'UpdateTableCellPortion', paramparagraph_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'paragraphIndex', paramparagraph_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'paragraphIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'paragraphIndex', paramparagraph_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid portion_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramportion_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('portionIndex', 'UpdateTableCellPortion', paramportion_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'portionIndex', paramportion_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'portionIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'portionIndex', paramportion_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateTableCellPortion', paramdto, 'Portion')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'dto', paramdto, 'Portion')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'dto', paramdto, 'Portion')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateTableCellPortion', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateTableCellPortion', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableCellPortion', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableCellPortion', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableCellPortion', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableCellPortion', 'Integer')
      paramcell_index = AsposeSlidesCloud::SpecUtils.get_param_value('cellIndex', 'UpdateTableCellPortion', 'Integer')
      paramparagraph_index = AsposeSlidesCloud::SpecUtils.get_param_value('paragraphIndex', 'UpdateTableCellPortion', 'Integer')
      paramportion_index = AsposeSlidesCloud::SpecUtils.get_param_value('portionIndex', 'UpdateTableCellPortion', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableCellPortion', 'Portion')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableCellPortion', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableCellPortion', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateTableCellPortion', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableCellPortion', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_cell_portion_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramcell_index, paramparagraph_index, paramportion_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableCellPortion', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableCellPortion', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_table_row
  # Update the table row.
  # @param name Document name.
  # @param slide_index Slide index.
  # @param shape_index Shape index.
  # @param row_index Row index.
  # @param dto Table cell data.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [TableRow]
  describe 'update_table_row test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateTableRow', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid slide_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('slideIndex', 'UpdateTableRow', paramslide_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'slideIndex', paramslide_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'slideIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'slideIndex', paramslide_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid shape_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramshape_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('shapeIndex', 'UpdateTableRow', paramshape_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'shapeIndex', paramshape_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'shapeIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'shapeIndex', paramshape_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid row_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramrow_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('rowIndex', 'UpdateTableRow', paramrow_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'rowIndex', paramrow_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'rowIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'rowIndex', paramrow_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'rowIndex', paramrow_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramdto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('dto', 'UpdateTableRow', paramdto, 'TableRow')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'dto', paramdto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'dto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'dto', paramdto, 'TableRow')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'dto', paramdto, 'TableRow')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateTableRow', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateTableRow', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateTableRow', 'String')
      paramslide_index = AsposeSlidesCloud::SpecUtils.get_param_value('slideIndex', 'UpdateTableRow', 'Integer')
      paramshape_index = AsposeSlidesCloud::SpecUtils.get_param_value('shapeIndex', 'UpdateTableRow', 'Integer')
      paramrow_index = AsposeSlidesCloud::SpecUtils.get_param_value('rowIndex', 'UpdateTableRow', 'Integer')
      paramdto = AsposeSlidesCloud::SpecUtils.get_param_value('dto', 'UpdateTableRow', 'TableRow')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateTableRow', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateTableRow', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateTableRow', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateTableRow', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_table_row_with_http_info(paramname, paramslide_index, paramshape_index, paramrow_index, paramdto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateTableRow', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateTableRow', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for update_vba_module
  # Update VBA module.
  # @param name Document name.
  # @param module_index The index of the macros module to remove.
  # @param module_dto VBA module DTO.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password Document password.
  # @option opts [String] :folder Document folder.
  # @option opts [String] :storage Document storage.
  # @return [VbaModule]
  describe 'update_vba_module test' do
    it 'should work' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid name' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      paramname = AsposeSlidesCloud::SpecUtils.invalidize_param_value('name', 'UpdateVbaModule', paramname, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'name', paramname)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'name')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'name', paramname, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'name', paramname, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid module_index' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.invalidize_param_value('moduleIndex', 'UpdateVbaModule', parammodule_index, 'Integer')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'moduleIndex', parammodule_index)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'moduleIndex')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'moduleIndex', parammodule_index, 'Integer')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid module_dto' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.invalidize_param_value('moduleDto', 'UpdateVbaModule', parammodule_dto, 'VbaModule')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'moduleDto', parammodule_dto)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'moduleDto')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'moduleDto', parammodule_dto, 'VbaModule')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'moduleDto', parammodule_dto, 'VbaModule')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid password' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      parampassword = AsposeSlidesCloud::SpecUtils.invalidize_param_value('password', 'UpdateVbaModule', parampassword, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'password', parampassword)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'password')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'password', parampassword, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'password', parampassword, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid folder' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.invalidize_param_value('folder', 'UpdateVbaModule', paramfolder, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'folder', paramfolder)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'folder')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'folder', paramfolder, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'folder', paramfolder, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage' do
      paramname = AsposeSlidesCloud::SpecUtils.get_param_value('name', 'UpdateVbaModule', 'String')
      parammodule_index = AsposeSlidesCloud::SpecUtils.get_param_value('moduleIndex', 'UpdateVbaModule', 'Integer')
      parammodule_dto = AsposeSlidesCloud::SpecUtils.get_param_value('moduleDto', 'UpdateVbaModule', 'VbaModule')
      parampassword = AsposeSlidesCloud::SpecUtils.get_param_value('password', 'UpdateVbaModule', 'String')
      paramfolder = AsposeSlidesCloud::SpecUtils.get_param_value('folder', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.get_param_value('storage', 'UpdateVbaModule', 'String')
      paramstorage = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storage', 'UpdateVbaModule', paramstorage, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UpdateVbaModule', 'storage', paramstorage)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.update_vba_module_with_http_info(paramname, parammodule_index, parammodule_dto, parampassword, paramfolder, paramstorage)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UpdateVbaModule', 'storage')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'storage', paramstorage, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UpdateVbaModule', 'storage', paramstorage, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

  # unit tests for upload_file
  # Upload file
  # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
  # @param file File to upload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FilesUploadResult]
  describe 'upload_file test' do
    it 'should work' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      paramfile = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', nil, nil)
      o, c, _h = AsposeSlidesCloud::SpecUtils.testSlidesApi.upload_file_with_http_info(parampath, paramfile, paramstorage_name)
      code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', nil, nil, nil)
      expect(c).to eq(code)
      expect(o).not_to be_nil
    end

    it 'invalid path' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      paramfile = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      parampath = AsposeSlidesCloud::SpecUtils.invalidize_param_value('path', 'UploadFile', parampath, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'path', parampath)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.upload_file_with_http_info(parampath, paramfile, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'path')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'path', parampath, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'path', parampath, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid file' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      paramfile = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      paramfile = AsposeSlidesCloud::SpecUtils.invalidize_param_value('file', 'UploadFile', paramfile, 'File')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'file', paramfile)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.upload_file_with_http_info(parampath, paramfile, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'file')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'file', paramfile, 'File')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'file', paramfile, 'File')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end

    it 'invalid storage_name' do
      parampath = AsposeSlidesCloud::SpecUtils.get_param_value('path', 'UploadFile', 'String')
      paramfile = AsposeSlidesCloud::SpecUtils.get_param_value('file', 'UploadFile', 'File')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.get_param_value('storageName', 'UploadFile', 'String')
      paramstorage_name = AsposeSlidesCloud::SpecUtils.invalidize_param_value('storageName', 'UploadFile', paramstorage_name, 'String')
      AsposeSlidesCloud::SpecUtils.initialize('UploadFile', 'storageName', paramstorage_name)
      begin
        AsposeSlidesCloud::SpecUtils.testSlidesApi.upload_file_with_http_info(parampath, paramfile, paramstorage_name)
        unless AsposeSlidesCloud::SpecUtils.no_exception?('UploadFile', 'storageName')
          fail "An exception expected"
        end
      rescue AsposeSlidesCloud::ApiError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'storageName', paramstorage_name, 'String')
        expect(e.code).to eq(code)
        expect(e.response_body).to include(message)
      rescue ArgumentError => e
        code, message = AsposeSlidesCloud::SpecUtils.get_expected_error('UploadFile', 'storageName', paramstorage_name, 'String')
        expect(400).to eq(code)
        expect(e.message).to include(message)
      end
    end
  end

end
